function spbc_getHashs_callback(result, data, params){
	console.log('HASHS RECEIVED');
	console.log(result);
}

function spbc_scanerClear_callback(result, data, params){
	console.log('DELETED');
	console.log(result);
}

function spbc_listUncheckedFiles_callback(result, data, params){
	var i = 0,
		item = undefined,
		actions = spbcScaner.row_actions_template.printf(spbcScaner.buttonDelete, spbcScaner.buttonApprove, spbcScaner.buttonReplace, spbcScaner.buttonCompare, spbcScaner.buttonEdit);
	for(type in result.data){
		var wrapper = params.wrapper[i];
			hint = wrapper.previousElementSibling,
			pagination = jQuery(wrapper.nextElementSibling),
			header = jQuery(wrapper.parentElement.previousElementSibling);
		// Rows
		jQuery(wrapper).find('.spbc_scan_result_row').remove();
		for(key in result.data[type].list){
			item = result.data[type].list[key];
			jQuery(wrapper).find('tbody').append(spbcScaner.row_template.printf(item.fast_hash, item.path, item.size, item.perms, item.mtime, item.status, actions));
		}
		// Table visibility and Text
		if(result.data[type].amount > 0){
			wrapper.style.display = 'block';
			hint.innerHTML = spbcScaner.result_text_bad_template.printf(result.data[type].amount)
			pagination.find('li.pagination').remove();
			var pages = Math.ceil(+result.data[type].amount / +spbcScaner.on_page),
				curr_page = data.page || 1;
			for(var page = 1; page <= pages; page++){
				pagination.find('ul.pagination').append(spbcScaner.page_selector_template.printf(type, page, (page == curr_page ? ' class=\'current_page\'' : ''), page))
			}
			pagination.show();
			spbc_setPagesHandler();
		}else{
			wrapper.style.display = 'none';
			hint.innerHTML = spbcScaner.result_text_good_template;
			pagination.hide();
		}
		header.find('.spbc_bad_type_count').text(result.data[type].amount);
		i++;
	}
}

function spbc_scan_callback(result, data, params){
	console.log(result);
	if(data.count){ // First call for count files
		data.scan_precent = result.files_total / 90;
		data.count = 0;
		params.progressbar_text.text(spbcScaner.progressbar_preparing);
		params.progressbar.progressbar('option', 'value', 0);
		spbc_sendAJAXRequest(data, params);
	}else{
		if(result.files_count != 0 && result.files_count >= data.amount){
			data.offset += data.amount;
			params.progressbar.progressbar('option', 'value', params.progressbar.progressbar('option', 'value') + Math.floor(data.amount / data.scan_precent));
			spbc_sendAJAXRequest(data, params);
		}else{
			params.progressbar.progressbar('option', 'value', 100);
			params.progressbar_text.text(spbcScaner.progressbar_done);
			console.log('end');
			// List unchecked
			params = {
				button: params.button,
				spinner: params.spinner,
				callback: spbc_listUncheckedFiles_callback,
				wrapper: document.getElementsByClassName('spbc_unchecked_file_list'),
			};
			spbc_sendAJAXRequest({action: 'spbc_scaner_list_unchecked'}, params);
		}
	}
}

jQuery(document).ready(function(){
	
	jQuery('#spbc_scaner_progress_bar').progressbar({
		value: 0,
		create: function( event, ui ) {
			event.target.style.position = 'relative';
		},
		change: function(event, ui){
			jQuery('.spbc_progressbar_counter span').text(jQuery(event.target).progressbar('option', 'value') + ' %');
		},
	});
	
	jQuery('#spbc_scan_accordion').accordion({
		header: "h3",
		heightStyle: 'content',
		collapsible: true,
		active: false,
		beforeActivate: function(event, ui){
			// jQuery( "#spbc_scan_accordion" ).accordion( "option", "active", 2 );
		},
	});
	
	// Get remote hashs
	jQuery('#spbc_get_hashs').on('click', function(){
		params = {
			button: this,
			spinner: this.nextElementSibling,
			callback: spbc_getHashs_callback,
		};
		spbc_sendAJAXRequest({action: 'spbc_scaner_get_remote_hashs'}, params);
	});
	
	// Start scan files
	jQuery('#spbc_start_scan').on('click', function(){
		data = {
			count  : true,
			action : 'spbc_scaner_do_scan',
			offset : 0,
			amount : 500,
		};
		params = {
			button: this,
			spinner: this.nextElementSibling,
			progressbar: jQuery('#spbc_scaner_progress_bar'),
			progressbar_text: jQuery('.spbc_progressbar_counter span'),
			callback: spbc_scan_callback,
		};
		spbc_sendAJAXRequest(data, params);
	});
	
	// Clear table
	jQuery('#spbc_scaner_clear').on('click', function(){
		var data   = { action : 'spbc_scaner_clear' };
		var params = {
			button: this,
			spinner: this.nextElementSibling,
			callback: spbc_scanerClear_callback,
		};
		spbc_sendAJAXRequest(data, params);
	});
	
	// Show unchecked
	jQuery('#spbc_list_unchecked').on('click', function(){
		var params = {
			button: this,
			spinner: this.nextElementSibling,
			callback: spbc_listUncheckedFiles_callback,
			wrapper: document.getElementsByClassName('spbc_unchecked_file_list'),
		};
		spbc_sendAJAXRequest({action: 'spbc_scaner_list_unchecked'}, params);
	});
	
	// Pagination
	spbc_setPagesHandler();
	
});

function spbc_setPagesHandler(){
	jQuery('.spbc_page').on('click', function(event){
		event.preventDefault();
		jQuery('.current_page').removeClass('current_page');
		this.firstElementChild.setAttribute('class', 'current_page');
		var params = {
			callback: spbc_listUncheckedFiles_callback,
			wrapper: [this.parentElement.parentElement.parentElement.previousElementSibling],
		};
		var data = {
			action: 'spbc_scaner_list_unchecked',
			type: this.getAttribute('type'),
			page: this.getAttribute('page'),
			offset: (this.getAttribute('page')-1) * 20,
			amount: 20,
		};
		spbc_sendAJAXRequest(data, params);
	});
}