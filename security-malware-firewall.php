<?php
/*
Plugin Name: Security plugin by CleanTalk 
Plugin URI: https://wordpress.org/plugins/security-malware-firewall/ 
Description: The plugin temporary restricts attempts to login to WordPress backend. The restriction is rising for a few seconds if an account failed to login.  
Author: CleanTalk.org 
Version: 1.5.2
Author URI: https://cleantalk.org
Text Domain: spbc 
*/

//
// To avoid issue with variable scope in activation hook.
// https://wordpress.org/support/topic/register_activation_hook-and-global-variables?replies=11
//
global $spbc_auth_logs_table_label;

$spbc_plugin_name = 'Security plugin by CleanTalk';
$spbc_plugin_version = '1.5.2';
$spbc_plugin_updated = false;

$spbc_auth_logs_table_label = 'spbc_auth_logs';
$spbc_login_attempts_label = 'spbc_login_attempts'; 
$spbc_data_label = 'spbc_data'; 

$spbc_attempts_max_fails = 5; // Limit of failed attempts before restrict access to backend. 
$spbc_attempts_calc_period = 3600; // Time interval to count failed attempts. 
$spbc_attempts_sleep_usual = 3; // Give a delay before attempts to login.
$spbc_attempts_sleep_long = 10; // Give a delay before attempts to login.

$spbc_tpl = array(); // Templates for all functions

$api_url = 'https://api.cleantalk.org';

$spbc_settings_last_report_limit = 20;

//Logged hooks
register_activation_hook( __FILE__, 'spbc_activation' );
register_deactivation_hook( __FILE__, 'spbc_deactivation' );

add_filter('authenticate', 'spbc_authenticate', 99, 3);
add_action('wp_logout', 'spbc_wp_logout');

add_action('plugins_loaded', 'spbc_plugin_loaded');

if(!defined('SPBC_PLUGIN_DIR')){
    define('SPBC_PLUGIN_DIR', plugin_dir_path(__FILE__));
}

if (is_admin() || is_network_admin()) {
    require_once(SPBC_PLUGIN_DIR. 'inc/spbc-admin.php');
		
    add_action('admin_init', 'spbc_admin_init', 1, 1);
    add_action('admin_menu', 'spbc_admin_add_page');
    
    if((isset($pagenow) && $pagenow == 'plugins.php') || @strpos($_SERVER['REQUEST_URI'],'plugins.php')!==false) {
        add_filter('plugin_action_links', 'spbc_plugin_action_links', 10, 2);
    }
}

//
// Test an attempt to get authed in WordPress backend.
//
function spbc_authenticate($user, $username, $password) {
    global $spbc_login_attempts_label, $spbc_attempts_max_fails, $spbc_attempts_sleep_usual, $spbc_attempts_sleep_long;

    if(is_wp_error($user)) {

        $err_codes = $user->get_error_codes();

        //
        // Passwords brute force.
        //
        if (in_array( 'incorrect_password', $err_codes )) {
            $spbc_login_attempts = get_option($spbc_login_attempts_label);
            if (is_array($spbc_login_attempts)) {
                
                if (isset($spbc_login_attempts[$username])) {
                    if ($spbc_login_attempts[$username]['attempts'] >= $spbc_attempts_max_fails) {
                        spbc_add_issue($username, $password, $spbc_login_attempts);
                        sleep ($spbc_attempts_sleep_long);
                    } else {
                        spbc_add_issue($username, $password, $spbc_login_attempts);
                    }
                } else {
                    spbc_add_issue($username, $password, $spbc_login_attempts, true);
                }
            } else {
                spbc_add_issue($username, $password, $spbc_login_attempts, true);
            }
            sleep ($spbc_attempts_sleep_usual);
        }
        
        //
        // Accounts brute force.
        //
        if (in_array( 'invalid_username', $err_codes )) {
            spbc_auth_log(array(
                'username' => $username,
                'event' => 'invalid_username'
            ));
            sleep ($spbc_attempts_sleep_usual);
        }
        
        // Execute cron system to do not miss the Daily report on low visited web-sites.
        wp_cron();
    }
    
    // The user is logged in.
    if (isset($user->ID) && $user->ID > 0) {
        spbc_auth_log(array(
            'username' => $username,
            'event' => 'login'
        ));
    }

    return $user;
}

// Adds a record to failed logins.
function spbc_add_issue($username, $password, $attempts, $new_issue = false) {
    global $spbc_login_attempts_label, $spbc_attempts_calc_period, $wpdb, $spbc_auth_logs_table_label;
    
    // Reset the data to avaoid PHP issues.
    if (!isset($attempts) || !count($attempts)) {
        $attempts = array();
    }
    
    if (isset($attempts[$username]['first_issue']) && time() - $attempts[$username]['first_issue'] > $spbc_attempts_calc_period) {
        $new_issue = true;
        unset($attempts[$username]);
    }

    $update_option = false;
    if ($new_issue) {
        $attempts[$username]['attempts'] = 1;
        $attempts[$username]['first_issue'] = time();
        $attempts[$username]['passwords'][] = md5($password);
        $update_option = true;
    } else {

        // Increase attempts only if new password failed.
        if (!in_array(md5($password), $attempts[$username]['passwords'])) {
            $attempts[$username]['attempts']++;
            $attempts[$username]['passwords'][] = md5($password);
            $update_option = true;
        }
    }
    
    if ($update_option) {
        update_option($spbc_login_attempts_label, $attempts);
        spbc_auth_log(array(
            'username' => $username,
            'event' => 'auth_failed'
        ));
    }

    return null;
}

//
// The function logs any attempt to log in the WordPress backend.
//
function spbc_auth_log ($params = null) {
    global $wpdb, $spbc_auth_logs_table_label;
    
    $params_def = array(
        'username' => null,
        'event' => null,
		'page' => null,
		'page_time' => null
    );
    $params = array_merge($params_def, $params);

    $auth_ip = null;
    if (function_exists( 'filter_var' )) {
        // The plugin doesn't use any IP from HTTP* headers, because these types of IPs can be spoofed.
        if (isset($_SERVER['REMOTE_ADDR']) && filter_var( $_SERVER['REMOTE_ADDR'], FILTER_VALIDATE_IP, FILTER_FLAG_IPV4 )) {
            $auth_ip = $_SERVER['REMOTE_ADDR'];
        }
    }

    $spbc_auth_logs_table = $wpdb->prefix . $spbc_auth_logs_table_label;
    $values = array(
        'datetime' => date("Y-m-d H:i:s"), 
        'user_login' => $params['username'],
        'event' => $params['event'],
        'auth_ip' => $auth_ip ? ip2long($auth_ip) : null,
		'page' => $params['page'],
		'page_time' => $params['page_time']
    );
    $result = $wpdb->insert(
        $spbc_auth_logs_table,
        $values
    );
	
	$inserted_id = $wpdb->insert_id;
	
    return $inserted_id;
}

//
// A code during plugin activation.
//
function spbc_activation () {
    global $wpdb, $spbc_auth_logs_table_label;

    $spbc_auth_logs_table = $wpdb->prefix . $spbc_auth_logs_table_label;

    $sql = sprintf("CREATE TABLE IF NOT EXISTS `%s` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `datetime` datetime NOT NULL,
  `user_login` varchar(60) NOT NULL,
  `event` varchar(32) NOT NULL,
  `auth_ip` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `datetime` (`datetime`,`event`)
) ENGINE=MyISAM  DEFAULT CHARSET=latin1 AUTO_INCREMENT=1;",
        $spbc_auth_logs_table 
    ); 
    $wpdb->query($sql);
    
    if (! wp_next_scheduled ('spbc_send_daily_report_hook')) {
        wp_schedule_event(time() + 3600, 'daily', 'spbc_send_daily_report_hook');
    }    
    
    return null;
}
//
// A code during plugin deactivation.
//
function spbc_deactivation () {
    
    wp_clear_scheduled_hook('spbc_send_daily_report_hook');

    // Old job name
    wp_clear_scheduled_hook('spbc_send_daily_report');

    return null;
}

add_action('spbc_send_daily_report_hook', 'spbc_send_daily_report');


//
// Logs a logout event
//
function spbc_wp_logout() {
    $user = wp_get_current_user();

    // The user is logged out.
    if (isset($user->ID) && $user->ID > 0) {
        spbc_auth_log(array(
            'username' => $user->get('user_login'), 
            'event' => 'logout'
        ));
    }

    return null;
}

/* Logging admin action */
function spbc_admin_log_action() {
    $user = wp_get_current_user();

	spbc_init_session();
	
	if(isset($_SESSION['spbc'])){
		$timer = $_SESSION['spbc'];
			
		$result = spbc_write_timer($timer);

	}
		
    // The user is logged out.
    if (isset($user->ID) && $user->ID > 0) {
        $log_id = spbc_auth_log(array(
            'username' => $user->get('user_login'), 
            'event' => 'View',
			'page' => $_SERVER['REQUEST_URI'],
			
        ));
    }
	
	if($log_id)
		spbc_set_timer($log_id);
		
    return null;
}

/* Calculates and writes page time to DB*/
function spbc_write_timer($timer){
	global $wpdb, $spbc_auth_logs_table_label;
	$spbc_auth_logs_table = $wpdb->prefix . $spbc_auth_logs_table_label;
	
	$result = $wpdb->update(
		$spbc_auth_logs_table,
		array ('page_time' => strval(time()-$timer['timer'])),
		array ('id' => $timer['log_id']),
		'%s',
		'%s'
    );
	
	return $result;
}

/*Initiate session*/
function spbc_init_session() {

    $session_id = session_id(); 
    if(empty($session_id) && !headers_sent()) {
        $result = @session_start();
        if(!$result){
            session_regenerate_id(true);
            @session_start(); 
        }
    }
    return null;
}

/*Set timer with event ID */
function spbc_set_timer($log_id){
	$_SESSION['spbc']['log_id'] = $log_id;
	$_SESSION['spbc']['timer'] = time();	
}

//
// The functions sends daily reports about attempts to login. 
//
function spbc_send_daily_report ($skip_data_rotation = false) {
    global $wpdb, $spbc_auth_logs_table_label, $spbc_plugin_name, $spbc_tpl, $api_url;
    
    include_once("templates/spbc_send_daily_report.php");
    include_once(SPBC_PLUGIN_DIR . 'inc/spbc-tools.php');

    // Hours
    $report_interval = 24 * 7;

	$admin_email = get_option('admin_email');
    if (!$admin_email) {
        error_log(sprintf('%s: can\'t send the Daily report because of empty Admin email. File: %s, line %d.',
            $spbc_plugin_name,
            __FILE__,
            __LINE__
        ));
        return false;
    }

    $spbc_auth_logs_table = $wpdb->prefix . $spbc_auth_logs_table_label;
    $sql = sprintf('select id,datetime,user_login,event,auth_ip,page,page_time from %s where datetime between now() - interval %d hour and now();',
        $spbc_auth_logs_table,
        $report_interval
    );
    $rows = $wpdb->get_results($sql);
    foreach ($rows as $k => $v) {
        if (isset($v->datetime))
            $v->datetime_ts = strtotime($v->datetime);
        $rows[$k] = $v;
    }
    usort($rows, "spbc_usort_desc");

    $record_datetime = time();
    $events = array();
    $auth_failed_events = array();
    $invalid_username_events = array();
    $auth_failed_count = 0;
    $invalid_username_count = 0;
    $ips_data = '';
    foreach ($rows as $record) {
        if (strtotime($record->datetime) > $record_datetime) {
            $record_datetime = strtotime($record->datetime);
        }
        $events[$record->event][$record->user_login][] = array(
            'datetime' => $record->datetime,
            'auth_ip' => long2ip($record->auth_ip),
            'user_login' => $record->user_login,
			'page' => ($record->page ? $record->page : '-'),
			'page_time' => ($record->page_time ? $record->page_time : 'Unknown')
        );
        
        switch ($record->event) {
            case 'auth_failed':
                $auth_failed_events[$record->user_login][$record->auth_ip] = array(
                    'attempts' => isset($auth_failed_events[$record->user_login][$record->auth_ip]['attempts']) ? $auth_failed_events[$record->user_login][$record->auth_ip]['attempts'] + 1 : 1, 
                    'auth_ip' => long2ip($record->auth_ip),
                    'user_login' => $record->user_login
                );
                $auth_failed_count++;
                break;
            case 'invalid_username':
                $invalid_username_events[$record->user_login][$record->auth_ip] = array(
                    'attempts' => isset($invalid_username_events[$record->user_login][$record->auth_ip]['attempts']) ? $invalid_username_events[$record->user_login][$record->auth_ip]['attempts'] + 1 : 1, 
                    'auth_ip' => long2ip($record->auth_ip),
                    'user_login' => $record->user_login
                );
                $invalid_username_count++;
                break;
        }
        if ($ips_data != '') {
            $ips_data .= ',';
        }
        $ips_data .= long2ip($record->auth_ip);
    }

    $ips_c = spbc_get_countries_by_ips($ips_data);

    $event_part = '';
    $auth_failed_part = sprintf("<p style=\"color: #666;\">%s</p>",
        _("0 brute force attacks have been made for past day.")
    );
    if ($auth_failed_count) {
        foreach ($auth_failed_events as $e) {
            $ip_part = '';
            foreach ($e as $ip) {
                $country_part = spbc_report_country_part($ips_c, $ip['auth_ip']);
                $ip_part .= sprintf("<a href=\"https://cleantalk.org/blacklists/%s\">%s</a>, #%d, %s<br />",
                    $ip['auth_ip'],
                    $ip['auth_ip'],
                    $ip['attempts'],
                    $country_part
                );
            }
            $event_part .= sprintf($spbc_tpl['event_part_tpl'],
                $ip['user_login'],
                $ip_part
            );
        } 
        $auth_failed_part = sprintf($spbc_tpl['auth_failed_part'],
            $event_part
        );
    } 
    
    $invalid_username_part= sprintf("<p style=\"color: #666;\">%s</p>",
        _('0 brute force attacks have been made for past day.')
    );
    
    if ($invalid_username_count) {
        foreach ($invalid_username_events as $e) {
            $ip_part = '';
            foreach ($e as $ip) {
                $country_part = spbc_report_country_part($ips_c, $ip['auth_ip']);
                $ip_part .= sprintf("<a href=\"https://cleantalk.org/blacklists/%s\">%s</a>, #%d, %s<br />",
                    $ip['auth_ip'],
                    $ip['auth_ip'],
                    $ip['attempts'],
                    $country_part
                );
            }
            $event_part .= sprintf($spbc_tpl['event_part_tpl'],
                $ip['user_login'],
                $ip_part
            );
        } 
        $invalid_username_part = sprintf($spbc_tpl['auth_failed_part'],
            $event_part
        );
    } 
   
    $logins_part = sprintf("<p style=\"color: #666;\">%s</p>",
        _('0 users have been logged in for past day.')
    );
    if (isset($events['login']) && count($events['login'])) {
        $event_part = '';
        foreach ($events['login'] as $user_login => $e) {
            $l_part = '';
            foreach ($e as $e2) {
                $country_part = spbc_report_country_part($ips_c, $e2['auth_ip']);
                $l_part .= sprintf("%s, <a href=\"https://cleantalk.org/blacklists/%s\">%s</a>, %s<br />",
                    date("M d Y H:i:s", strtotime($e2['datetime'])),
                    $e2['auth_ip'],
                    $e2['auth_ip'],
                    $country_part
                );
            }
            $event_part .= sprintf($event_part_tpl,
                $user_login,
                $l_part
            );
        }
        $logins_part = sprintf($spbc_tpl['logins_part_tpl'],
            $event_part
        );
    }
    
    $title_main_part = _('Daily security report');
    $subject = sprintf('%s %s',
        parse_url(get_option('siteurl'),PHP_URL_HOST), 
        $title_main_part
    );
    
    $message_anounce = sprintf(_('%s brute force attacks or failed logins, %d successful logins.'),
        number_format($auth_failed_count + $invalid_username_count, 0, ',', ' '),
        isset($events['login']) ? count($events['login']) : 0
    );


    $message = sprintf($spbc_tpl['message_tpl'],
        $spbc_tpl['message_style'],
        $title_main_part,
        $message_anounce,
        $auth_failed_part,
        $invalid_username_part,
        $logins_part,
        $spbc_plugin_name
    );


    $headers = array('Content-Type: text/html; charset=UTF-8');
    wp_mail(
        $admin_email,
        $subject,
        $message,
        $headers
    );
    
    if (!$skip_data_rotation) {
        $sql = sprintf("delete from %s where datetime <= '%s';",
           $spbc_auth_logs_table,
           date("Y-m-d H:i:s", $record_datetime)
        );
        $wpdb->query($sql);
    };

    return null;
}

//
// Misc functions to test the plugin.
//
function spbc_plugin_loaded() {
    if (isset($_GET['spbc_test_daily_report'])) {
        spbc_send_daily_report(true); 
    }
    
    return null;
}

//
// Sorts some data.
//
function spbc_usort_desc ($a, $b) {
    return $b->datetime_ts - $a->datetime_ts;
};


//
// Function to get the countries by IPs list.
//
function spbc_get_countries_by_ips ($ips_data = '') {
    global $api_url;

    $ips_c = array();
    
    if ($ips_data === '') {
        return $ips_c;
    }
    
    if (!function_exists('spbc_sendRawRequest')) {
        require_once(SPBC_PLUGIN_DIR . 'inc/spbc-tools.php');
    }
    if (function_exists('spbc_sendRawRequest')) {
        $data = Array(
            'method_name' => 'ip_info',
            'data' => $ips_data
        );
        $result = spbc_sendRawRequest(
            $api_url,
            $data
        );
        if ($result) {
            $result = json_decode($result, true);
            if (!isset($result['data'])) {
                return $ips_c;
            }
            foreach ($result['data'] as $ip_dec => $v2) {
                if (isset($v2['country_code'])) {
                    $ips_c[$ip_dec]['country_code'] = $v2['country_code']; 
                }
                if (isset($v2['country_name'])) {
                    $ips_c[$ip_dec]['country_name'] = $v2['country_name']; 
                }
            }
        }
    }

    return $ips_c;
}

?>
