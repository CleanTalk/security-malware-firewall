<?php
/*
Plugin Name: Security by CleanTalk 
Plugin URI: https://wordpress.org/plugins/security-malware-firewall/ 
Description: The plugin temporary restricts attempts to login to WordPress backend. The restriction is rising for a few seconds if an account failed to login.  
Author: CleanTalk.org 
Version: 1.9.4
Author URI: https://cleantalk.org
Text Domain: cleantalk-security
Domain Path: /i18n
*/

//
// To avoid issue with variable scope in activation hook.
// https://wordpress.org/support/topic/register_activation_hook-and-global-variables?replies=11
//

define('SPBC_NAME', 'Security by CleanTalk');
define('SPBC_VERSION', '1.9.4');
define('SPBC_AGENT', 'security-194');
define('SPBC_PATH', plugins_url('', __FILE__)); //HTTP path. Plugin root folder without '/'.
define('SPBC_PLUGIN_DIR', plugin_dir_path(__FILE__)); //System path. Plugin root folder with '/'.
define('SPBC_TEXT_DOMAIN', 'cleantalk-security'); //Text domain for translation.

define('SPBC_LOG_TABLE', 'spbc_auth_logs'); //Table with logs.
define('SPBC_FIREWALL_DATA', 'spbc_firewall_data'); //Table with logs.
define('SPBC_FIREWALL_LOG', 'spbc_firewall_logs'); //Table with logs.
define('SPBC_REMOTE_CALL_SLEEP', 10); //Minimum time between remote call
define('SPBC_LOGIN_ATTEMPTS', 'spbc_login_attempts'); //Option name with login attempts.
define('SPBC_DATA', 'spbc_data'); //Option name with different plugin data.
define('SPBC_SETTINGS', 'spbc_settings'); //Option name with plugin settings.
define('SPBC_NETWORK_SETTINGS', 'spbc_network_settings'); //Option name with plugin network settings.

define('SPBC_MAX_FAILS', '5'); // Limit of failed attempts before restrict access to backend. 
define('SPBC_CALC_PERIOD', '3600'); // Time interval to count failed attempts. 
define('SPBC_SLEEP_USUAL', '3'); // Give a delay before attempts to login.
define('SPBC_SLEEP_LONG', '10'); // Give a delay before attempts to login.

define('SPBC_API_URL', 'https://api.cleantalk.org'); //Api URL

define('SPBC_LAST_ACTIONS_TO_VIEW', '20'); //Nubmer of last actions to show in plugin settings page.

global $wpdb;
preg_match('/(.*[^\d_$])/', $wpdb->prefix, $matches);
define('SPBC_DB_PREFIX', $matches[1]."_"); //Original DB prefix
define('SPBC_WPMS', (defined('MULTISITE') && MULTISITE == true ? true : false)); //WMPS is enabled

$spbc_tpl = array(); // Templates for all functions

//Tools file for cron jobs 
if(defined('DOING_CRON') && DOING_CRON == true)
	require_once(SPBC_PLUGIN_DIR. 'inc/spbc-tools.php');

//Logged hooks
register_activation_hook( __FILE__, 'spbc_activation' );
register_deactivation_hook( __FILE__, 'spbc_deactivation' );

//Hooks for authentificate
add_filter('authenticate', 'spbc_authenticate', 99, 3);
add_action('wp_logout', 'spbc_wp_logout');

//Hook for registration form notification
add_action('login_footer','spbc_register_form_notification');


add_action('plugins_loaded', 'spbc_plugin_loaded');

//Cron hooks
add_action('spbc_send_logs_hook', 'spbc_send_logs');
add_action('spbc_send_report_hook', 'spbc_send_daily_report');
add_action('spbc_security_firewall_update_hook', 'spbc_security_firewall_update');
add_action('spbc_send_firewall_logs_hook', 'spbc_send_firewall_logs');
add_action('spbc_access_key_notices_hook', 'spbc_access_key_notices');

if (is_admin() || is_network_admin()) {
    require_once(SPBC_PLUGIN_DIR. 'inc/spbc-admin.php');

	//Redirect after activation
	add_action('admin_init', 'spbc_activation_redirect', 1);
	
	//Main admin hook
    add_action('admin_init', 'spbc_admin_init', 1, 1);
	
	//Admin pages
    add_action('admin_menu', 'spbc_admin_add_page');
	add_action('network_admin_menu', 'spbc_admin_add_page');
	
	//Scripts
	add_action('admin_enqueue_scripts', 'spbc_enqueue_scripts');
    
	if(!defined( 'DOING_AJAX' )){
		add_action('admin_notices', 'spbc_admin_notice_message');
		add_action('network_admin_notices', 'spbc_admin_notice_message');
	}
	
    //if((isset($pagenow) && $pagenow == 'plugins.php') || @strpos($_SERVER['REQUEST_URI'],'plugins.php')!==false) {
		add_filter('plugin_action_links_'.plugin_basename(__FILE__), 'spbc_plugin_action_links', 10, 2);
		//add_filter('network_admin_plugin_action_links_'.plugin_basename(__FILE__), 'spbc_plugin_action_links', 10, 2);
		//add_filter('plugin_row_meta'.plugin_basename(__FILE__), 'spbc_plugin_links_meta', 10);
    //}
}

if(!is_admin() || !defined( 'DOING_AJAX' )){
	
	$spbc_settings = get_option(SPBC_SETTINGS);
	
	//First start
	if($spbc_settings){
		
		//* FireWall action
		
		include_once("inc/spbc-firewall.class.php");
		$is_firewall_check = true;
		$firewall = new SecurityFireWall();
		$ip = $firewall->spbc_get_real_ip();
		
		foreach($ip as $spbc_cur_ip){
			
			// Passing via cookie
			if(isset($_COOKIE['spbc_firewall_pass_key']) && $_COOKIE['spbc_firewall_pass_key'] == md5($spbc_cur_ip.$spbc_settings['spbc_key']))
				$is_firewall_check = false;
			else
				$is_firewall_check = true;
			
		} unset($spbc_cur_ip);
		
		if($is_firewall_check){
			
			$firewall->check_ip();
			
			if($firewall->result){
				// Blocked via DB check
				SecurityFireWall::firewall_update_logs($firewall->blocked_ip, 'blocked');
				$firewall->spbc_die();
			}else{
				// Passed via DB check
				setcookie ('spbc_firewall_pass_key', md5($firewall->passed_ip.$spbc_settings['spbc_key']), time()+3600, "/");
				//SecurityFireWall::firewall_update_logs($firewall->passed_ip, 'passed');
			}
		}
		//*/
		
		//* Remote firewall update //NEED TO BE PROTECTED: REMOTE_ADDR!!!		
		
		if(isset($_GET['spbc_remote_call_token'], $_GET['spbc_remote_call_action'], $_GET['plugin_name']) && $_GET['plugin_name'] == 'security'){
			
			$spbc_data = get_option(SPBC_DATA);
			
			if(isset($spbc_data['last_remote_call']) && time() - $spbc_data['last_remote_call'] < SPBC_REMOTE_CALL_SLEEP){
				echo "FAIL TOO_MANY_ATTEMPTS";
				die();
			}else{
				$spbc_data['last_remote_call'] = time();
				update_option(SPBC_DATA, $spbc_data);
			}	
			
			$spbc_remote_call_token = md5($spbc_settings['spbc_key']);
			
			if($_GET['spbc_remote_call_token'] == $spbc_remote_call_token){
				
				if($_GET['spbc_remote_call_action'] == 'update_security_firewall'){
					$result = spbc_security_firewall_update($spbc_settings['spbc_key']);
					echo ($result == true ? "OK" : "FAIL");
					die();
				}
				
				if($_GET['spbc_remote_call_action'] == 'close_renew_banner'){
					$spbc_data['notice_show'] = 0;
					update_option(SPBC_DATA, $spbc_data);
					if (wp_next_scheduled('spbc_access_key_notices_hook')){
						wp_clear_scheduled_hook('spbc_access_key_notices_hook');
						$result = wp_schedule_event(time() + 85400, 'daily', 'spbc_access_key_notices_hook');
					}
					echo "OK";
					die();
				}
				
				// if($_GET['spbc_remote_call_action'] == 'drop_security_firewall'){
					// $result = spbc_security_firewall_drop();
					// echo ($result == true ? "OK" : "FAIL");
					// die();
				// }
				
			}else{
				echo "FAIL WRONG_TOKEN";
				die();
			}			
		}
		//*/
	}
}

//
// A code during plugin activation.
//
function spbc_activation() {
    global $wpdb;

	$spbc_firewall_logs_table = SPBC_DB_PREFIX . SPBC_FIREWALL_LOG;
	$spbc_firewall_data_table = SPBC_DB_PREFIX . SPBC_FIREWALL_DATA;
	
    $sql = sprintf("CREATE TABLE IF NOT EXISTS `%s` (
		`id` int(11) NOT NULL AUTO_INCREMENT,
		`datetime` datetime NOT NULL,
		`user_login` varchar(60) NOT NULL,
		`event` varchar(32) NOT NULL,
		`page` VARCHAR(500) NULL,
		`page_time` VARCHAR(10) NULL,
		`blog_id` int(11) NOT NULL,
		`auth_ip` int(10) unsigned DEFAULT NULL,
		PRIMARY KEY (`id`),
		KEY `datetime` (`datetime`,`event`)
		) ENGINE=MyISAM  DEFAULT CHARSET=latin1 AUTO_INCREMENT=1;",
        SPBC_DB_PREFIX . SPBC_LOG_TABLE
    ); 
    $wpdb->query($sql);
    
	$sql = "CREATE TABLE IF NOT EXISTS $spbc_firewall_data_table (
		`spbc_network` int(11) unsigned NOT NULL,
		`spbc_mask` int(11) unsigned NOT NULL,
		INDEX (`spbc_network` , `spbc_mask`)
		) ENGINE = MYISAM ;";
	$wpdb->query($sql);
				
	$sql = "CREATE TABLE IF NOT EXISTS $spbc_firewall_logs_table (
		`ip_entry` VARCHAR(15) NOT NULL , 
		`all_entry` INT NOT NULL , 
		`blocked_entry` INT NOT NULL , 
		`entry_timestamp` INT NOT NULL , 
		PRIMARY KEY (`ip_entry`)) 
		ENGINE = MYISAM;";
	$wpdb->query($sql);	


	//Cron jobs
	//Sending Security's logs cron hook
    if ( !wp_next_scheduled('spbc_send_logs_hourly_hook') )
        wp_schedule_event(time() + 1800, 'hourly', 'spbc_send_logs_hook');
	
	//Daily report cron hook
    if ( !wp_next_scheduled('spbc_send_report_hook') )
        wp_schedule_event(time() + 43200, 'daily', 'spbc_send_report_hook');	
	
	// Update FireWall cron hook
	if ( !wp_next_scheduled('spbc_security_firewall_update__hook') )
		wp_schedule_event(time() + 43200, 'daily', 'spbc_security_firewall_update_hook');
	
	// Send FireWall's logs cron hook
	if ( !wp_next_scheduled('spbc_send_firewall_logs_hourly_hook') )
		wp_schedule_event(time() + 1800, 'hourly', 'spbc_send_firewall_logs_hook');
	
	// Acess key vaidation cron hook (notice_paid_till)
	if ( !wp_next_scheduled('spbc_access_key_notices_hourly_hook') )
		wp_schedule_event(time() + 3500, 'hourly', 'spbc_access_key_notices_hook');
	
	add_option('spbc_activation_redirect', (is_network_admin() ? 'settings.php?page=spbc' : 'options-general.php?page=spbc'));
	
}

//
// Function for redirect to settings
//
function spbc_activation_redirect(){
	
	$settings_rediect = get_option('spbc_activation_redirect', false);
	
	if($settings_rediect && !isset($_GET['activate-multi'])){
		delete_option('spbc_activation_redirect');
		wp_redirect($settings_rediect);
	}
}

//
// A code during plugin deactivation.
//
function spbc_deactivation(){
	
	unregister_setting(SPBC_SETTINGS, SPBC_SETTINGS);
	wp_clear_scheduled_hook('spbc_send_logs_hook');
    wp_clear_scheduled_hook('spbc_send_report_hook');
	wp_clear_scheduled_hook('spbc_security_firewall_update_hook');
	wp_clear_scheduled_hook('spbc_send_firewall_logs_hook');
	wp_clear_scheduled_hook('spbc_access_key_notices_hook');
	
}

//
// Misc functions to test the plugin.
//
function spbc_plugin_loaded() {
		
	if(is_admin() || is_network_admin()){
		$dir = plugin_basename( dirname( __FILE__ ) ) . '/i18n';
		$loaded = load_plugin_textdomain(SPBC_TEXT_DOMAIN, false, $dir);
	}
	
    if (isset($_GET['spbc_test_daily_report']))
        spbc_send_daily_report(true); 
}

//
// Adding notification to registration form
//
function spbc_register_form_notification(){
	
	$page = $_SERVER['QUERY_STRING'];
	
	if(!strpos($page, 'register')){ //Return if it's not a registration page.
	
		$spbc_settings = get_option(SPBC_SETTINGS);
		
		$show_notification = (!empty($spbc_settings['show_link_in_reg_form']) ? true : false);
		
		if($show_notification)
			echo "<div style='position: absolute; bottom: 20px; right: 20px;'>
				<p style='text-align: right;'>Brute Force Protection by <a rel='nofollow' href='https://wordpress.org/plugins/security-malware-firewall/' target='_blank'><img style='vertical-align: bottom;' src='".SPBC_PATH."/images/logo_small.png'></a> <a rel='nofollow' href='https://wordpress.org/plugins/security-malware-firewall/' target='_blank'>CleanTalk Security</a>.</p>
				<p style='text-align: right;'>All attempts are logged.</p>
			</div>";
	}
	return null;
}


//
// Test an attempt to get authed in WordPress backend.
//
function spbc_authenticate($user, $username, $password) {

    if(is_wp_error($user)) {

        $err_codes = $user->get_error_codes();

	// Passwords brute force.
        if (in_array( 'incorrect_password', $err_codes )) {
            $spbc_login_attempts = get_option( SPBC_LOGIN_ATTEMPTS );
            if (is_array($spbc_login_attempts)) {
                
                if (isset($spbc_login_attempts[$username])) {
                    if ($spbc_login_attempts[$username]['attempts'] >= SPBC_MAX_FAILS) {
                        spbc_add_issue($username, $password, $spbc_login_attempts);
                        sleep (SPBC_SLEEP_LONG);
                    } else {
                        spbc_add_issue($username, $password, $spbc_login_attempts);
                    }
                } else {
                    spbc_add_issue($username, $password, $spbc_login_attempts, true);
                }
            } else {
                spbc_add_issue($username, $password, $spbc_login_attempts, true);
            }
            sleep (SPBC_SLEEP_USUAL);
        }
        
	// Accounts brute force.
        if (in_array( 'invalid_username', $err_codes )) {
            spbc_auth_log(array(
                'username' => $username,
                'event' => 'invalid_username'
            ));
            sleep (SPBC_SLEEP_USUAL);
        }
        
        // Execute cron system to do not miss the Daily report on low visited web-sites.
        wp_cron();
    }
    
    // The user is logged in.
    if (isset($user->ID) && $user->ID > 0) {
        spbc_auth_log(array(
            'username' => $username,
            'event' => 'login'
        ));
    }

    return $user;
}

// Adds a record to failed logins.
function spbc_add_issue($username, $password, $attempts, $new_issue = false) {
    
    // Reset the data to avaoid PHP issues.
    if (!isset($attempts) || !count($attempts)) {
        $attempts = array();
    }
    
    if (isset($attempts[$username]['first_issue']) && time() - $attempts[$username]['first_issue'] > SPBC_CALC_PERIOD) {
        $new_issue = true;
        unset($attempts[$username]);
    }

    $update_option = false;
    if ($new_issue) {
        $attempts[$username]['attempts'] = 1;
        $attempts[$username]['first_issue'] = time();
        $attempts[$username]['passwords'][] = md5($password);
        $update_option = true;
    } else {

        // Increase attempts only if new password failed.
        if (!in_array(md5($password), $attempts[$username]['passwords'])) {
            $attempts[$username]['attempts']++;
            $attempts[$username]['passwords'][] = md5($password);
            $update_option = true;
        }
    }
    
    if ($update_option) {
        update_option(SPBC_LOGIN_ATTEMPTS , $attempts);
        spbc_auth_log(array(
            'username' => $username,
            'event' => 'auth_failed'
        ));
    }

    return null;
}

//
// The function logs any attempt to log in the WordPress backend.
//
function spbc_auth_log($params = null) {
    global $wpdb;
    
    $params_default = array(
        'username' => null,
        'event' => null,
		'page' => null,
		'page_time' => null,
		'blog_id' => (SPBC_WPMS ? get_current_blog_id() : null)
    );
    $params = array_merge($params_default, $params);

    if (function_exists( 'filter_var' )) {
        // The plugin doesn't use any IP from HTTP* headers, because these types of IPs can be spoofed.
		$auth_ip = array_key_exists('REMOTE_ADDR', $_SERVER) ? filter_var($_SERVER['REMOTE_ADDR'], FILTER_VALIDATE_IP, FILTER_FLAG_IPV4) : '127.0.0.1';
		if($auth_ip == $_SERVER['SERVER_ADDR'] || $auth_ip == '127.0.0.1'){ //Server with cache software
			if(isset($_SERVER['HTTP_X_FORWARDED_FOR'])){
				$ips = explode(",", trim($_SERVER['HTTP_X_FORWARDED_FOR']));
				$auth_ip = filter_var(end($ips), FILTER_VALIDATE_IP, FILTER_FLAG_IPV4);
			}
		}
    }

    $spbc_auth_logs_table = SPBC_DB_PREFIX . SPBC_LOG_TABLE;

    // To fix issue with NULL values for not NULL field.
    $blog_id = isset($params['blog_id']) && $params['blog_id'] !== null ? $params['blog_id'] : 1;

    $values = array(
        'datetime' => date("Y-m-d H:i:s"), //time()+3600*5),//current_time("Y-m-d H:i:s"),
        'user_login' => $params['username'],
        'event' => $params['event'],
        'auth_ip' => isset($auth_ip) ? ip2long($auth_ip) : null,
		'page' => $params['page'],
		'page_time' => $params['page_time'],
		'blog_id' => $blog_id 
    );
	
    $result = $wpdb->insert(
        $spbc_auth_logs_table,
        $values
    );
	
	$inserted_id = $wpdb->insert_id;
	
    return $inserted_id;
}

//
// Logs a logout event
//
function spbc_wp_logout() {
    $user = wp_get_current_user();

    // The user is logged out.
    if (isset($user->ID) && $user->ID > 0) {
        spbc_auth_log(array(
            'username' => $user->get('user_login'), 
            'event' => 'logout'
        ));
    }

    return null;
}

//
// Sorts some data.
//
function spbc_usort_desc($a, $b) {
    return $b->datetime_ts - $a->datetime_ts;
};

//
// Function to get the countries by IPs list.
//
function spbc_get_countries_by_ips($ips_data = '') {
    global $api_url;

    $ips_c = array();
    
    if ($ips_data === '') {
        return $ips_c;
    }
    
    if (!function_exists('spbc_sendRawRequest')) {
        require_once(SPBC_PLUGIN_DIR . 'inc/spbc-tools.php');
    }
    if (function_exists('spbc_sendRawRequest')) {
        $data = Array(
            'method_name' => 'ip_info',
            'data' => $ips_data
        );
        $result = spbc_sendRawRequest(
            SPBC_API_URL,
            $data
        );
        if ($result) {
            $result = json_decode($result, true);
            if (!isset($result['data'])) {
                return $ips_c;
            }
            foreach ($result['data'] as $ip_dec => $v2) {
                if (isset($v2['country_code'])) {
                    $ips_c[$ip_dec]['country_code'] = $v2['country_code']; 
                }
                if (isset($v2['country_name'])) {
                    $ips_c[$ip_dec]['country_name'] = $v2['country_name']; 
                }
            }
        }
    }

    return $ips_c;
}

//
//	Sendings Security FireWall logs
//
function spbc_send_firewall_logs($api_key = false){
		
    $spbc_data = get_option(SPBC_DATA);
		
	if($api_key == false){
		$spbc_settings = get_option(SPBC_SETTINGS);
		$api_key = $spbc_settings['spbc_key'];
	}
		
	require_once("inc/spbc-firewall.class.php");
    $result = SecurityFireWall::send_logs($api_key);
	
	if($result !== false){
		$spbc_data['last_firewall_send'] = time();
		$spbc_data['last_firewall_send_count'] = $result;
		update_option(SPBC_DATA, $spbc_data);
		return $result;
	}else
		return 0;

}

//
//	Updating Security FireWall data
//
function spbc_security_firewall_update($api_key = false){
		
	$spbc_data = get_option(SPBC_DATA);	
		
	if($api_key == false){
		$spbc_settings = get_option(SPBC_SETTINGS);
		$api_key = $spbc_settings['spbc_key'];
	}
	
	require_once("inc/spbc-firewall.class.php");
    $result = SecurityFireWall::firewall_update($api_key);
	
	if($result !== false){
		$spbc_data['last_firewall_updated'] = time();
		$spbc_data['firewall_entries'] = $result;
		update_option(SPBC_DATA, $spbc_data);
		return $result;
	}else
		return 0;	

}

//
//	Drop Security FireWall data INACTIVE!
//
function spbc_security_firewall_drop(){
	global $wpdb;
	
	$result = $wpdb->query("TRUNCATE TABLE `".$wpdb->base_prefix."spbc_firewall_data`;");
	
	if($result !== false)
		return true;
	else
		return false;
	
}

?>
