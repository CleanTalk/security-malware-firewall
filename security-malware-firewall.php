<?php
/*
Plugin Name: Security by CleanTalk
Plugin URI: https://wordpress.org/plugins/security-malware-firewall/
Description: Security & Malware scan by CleanTalk to protect your website from online threats and viruses. IP/Country FireWall, Web application FireWall. Detailed stats and logs to have full control.
Author: CleanTalk Security
Version: 2.57.1
Author URI: https://cleantalk.org
Text Domain: security-malware-firewall
Domain Path: /i18n
*/

use CleantalkSP\Security\FireWall\FireWall;
use CleantalkSP\SpbctWp\Helper as SpbcHelper;
use CleantalkSP\SpbctWp\API as SpbcAPI;
use CleantalkSP\SpbctWp\Cron as SpbcCron;
use CleantalkSP\SpbctWp\RemoteCalls as SpbcRemoteCalls;
use CleantalkSP\SpbctWp\State as SpbcState;
use CleantalkSP\SpbctWp\Upgrader as SpbcUpgrader;
use CleantalkSP\SpbctWp\UpgraderSkin as SpbcUpgraderSkin;
use CleantalkSP\SpbctWp\UpgraderSkin_Deprecated as SpbcUpgraderSkin_Deprecated;

// Prevent direct call
if(!defined('WPINC')) die('Not allowed!');

// Getting version form main file (look above)
$plugin_info = get_file_data(__FILE__, array('Version' => 'Version', 'Name' => 'Plugin Name',));

// Common params
define('SPBC_NAME',             $plugin_info['Name']);
define('SPBC_VERSION',          $plugin_info['Version']);
define('SPBC_AGENT',            'wordpress-security-'.str_replace('.', '', $plugin_info['Version']));
define('SPBC_USER_AGENT',       'Cleantalk-Security-Wordpress-Plugin/' . $plugin_info['Version']);
define('SPBC_API_URL',          'https://api.cleantalk.org');        //Api URL
define('SPBC_PLUGIN_DIR',       dirname(__FILE__).'/'); //System path. Plugin root folder with '/'.
define('SPBC_PLUGIN_BASE_NAME', plugin_basename(__FILE__)); //Plugin base name.
define('SPBC_PATH',             is_ssl()
	? preg_replace( '/^http(s)?/', 'https', plugins_url('', __FILE__) )
	: plugins_url('', __FILE__)); //HTTP(S)? path.   Plugin root folder without '/'.

// SSL Serttificate path
if(!defined('CLEANTALK_CASERT_PATH'))
	define('CLEANTALK_CASERT_PATH', file_exists(ABSPATH.WPINC.'/certificates/ca-bundle.crt') ? ABSPATH.WPINC.'/certificates/ca-bundle.crt' : '');

// Options names
define('SPBC_LOGIN_ATTEMPTS',   'spbc_login_attempts');   //Option name with login attempts.
define('SPBC_DATA',             'spbc_data');             //Option name with different plugin data.
define('SPBC_SETTINGS',         'spbc_settings');         //Option name with plugin settings.
define('SPBC_NETWORK_SETTINGS', 'spbc_network_settings'); //Option name with plugin network settings.
define('SPBC_CRON',             'spbc_cron');             //Option name with scheduled tasks.
define('SPBC_ERRORS',           'spbc_errors');           //Option name with errors.
define('SPBC_DEBUG',            'spbc_debug');            //Option name with a debug data. Empty by default.
define('SPBC_PLUGINS',          'spbc_plugins');          //Option name with a debug data. Empty by default.
define('SPBC_THEMES',           'spbc_themes');           //Option name with a debug data. Empty by default.

// Different params
define('SPBC_REMOTE_CALL_SLEEP',    10); //Minimum time between remote call
define('SPBC_LAST_ACTIONS_TO_VIEW', 20); //Nubmer of last actions to show in plugin settings page.

// Auth params
define('SPBC_MAX_FAILS',   '5');    // Limit of failed attempts before restrict access to backend.
define('SPBC_CALC_PERIOD', '3600'); // Time interval to count failed attempts.
define('SPBC_SLEEP_USUAL', '3');    // Give a delay before attempts to login.
define('SPBC_SLEEP_LONG',  '10');   // Give a delay before attempts to login.

// DataBase params
global $wpdb;

define('SPBC_TBL_FIREWALL_DATA',            $wpdb->base_prefix . 'spbc_firewall_data'); // Legacy
define('SPBC_TBL_FIREWALL_DATA__IPS',       $wpdb->prefix . 'spbc_firewall__personal_ips'); // Table with firewall IPS
define('SPBC_TBL_FIREWALL_DATA__COUNTRIES', $wpdb->prefix . 'spbc_firewall__personal_countries'); // Table with firewall countries.
define('SPBC_TBL_FIREWALL_LOG',             $wpdb->prefix . 'spbc_firewall_logs'); // Table with firewall logs.

define('SPBC_TBL_SECURITY_LOG',    $wpdb->prefix . 'spbc_auth_logs');       // Table with security logs.
define('SPBC_TBL_TC_LOG',          $wpdb->prefix . 'spbc_traffic_control_logs'); // Table with traffic control logs.
define('SPBC_TBL_SCAN_FILES',      $wpdb->prefix . 'spbc_scan_results');    // Table with scan results.
define('SPBC_TBL_SCAN_LINKS',      $wpdb->prefix . 'spbc_scan_links_logs'); // For links scanner. Results of scan.
define('SPBC_TBL_SCAN_FRONTEND',   $wpdb->prefix . 'spbc_scan_frontend');   // For frontend scanner. Results of scan.
define('SPBC_TBL_SCAN_SIGNATURES', $wpdb->prefix . 'spbc_scan_signatures'); // For malware signatures.
define('SPBC_TBL_BACKUPED_FILES',  $wpdb->prefix . 'spbc_backuped_files');  // Contains backuped files
define('SPBC_TBL_BACKUPS',         $wpdb->prefix . 'spbc_backups');         // Contains backup info.
define('SPBC_SELECT_LIMIT',        1500);                 // Select limit for logs.
define('SPBC_WRITE_LIMIT',         5000);                 // Write limit for firewall data.

// Multisite
define('SPBC_WPMS', (is_multisite() ? true : false)); // WMPS is enabled

// Scanner params for background scanning
define('SPBC_SCAN_SURFACE_AMOUNT',  1000); // Surface scan amount for 1 iteration
define('SPBC_SCAN_SURFACE_PERIOD',  30);   // Surface scan call period
define('SPBC_SCAN_MODIFIED_AMOUNT', 5);    // Deep scan amount for 1 iteration
define('SPBC_SCAN_SIGNATURE_AMOUNT', 50);    // Deep scan amount for 1 iteration
define('SPBC_SCAN_MODIFIED_PERIOD', 30);   // Deep scan call period
define('SPBC_SCAN_LINKS_AMOUNT', 10);      // Links scan amount for 1 iteration
define('SPBC_SCAN_FRONTEND_AMOUNT', 10);      // Links scan amount for 1 iteration
define('SPBC_SCAN_LINKS_PERIOD', 30);      // Links scan call period

// Two factor auth params.
define('SPBC_2FA_KEY_TTL', 600);      // 2fa key lifetime in seconds

// PHP functions patches
require_once(SPBC_PLUGIN_DIR . 'lib/spbc-php-patch.php');

// Base classes.
require_once(SPBC_PLUGIN_DIR . 'lib/autoloader.php');                // Autoloader
require_once(SPBC_PLUGIN_DIR . 'lib/CleantalkSP/Common/API.php');    // Base API
require_once(SPBC_PLUGIN_DIR . 'lib/CleantalkSP/Common/Helper.php'); // Base Helper

// Templates classes.
require_once(SPBC_PLUGIN_DIR . 'lib/CleantalkSP/Templates/Singleton.php');    // Singleton

//Variables classes.
require_once(SPBC_PLUGIN_DIR . 'lib/CleantalkSP/Variables/SuperGlobalVariables.php'); // SuperGlobal variables
require_once(SPBC_PLUGIN_DIR . 'lib/CleantalkSP/Variables/Cookie.php'); // Cookie variables
require_once(SPBC_PLUGIN_DIR . 'lib/CleantalkSP/Variables/Get.php'); // GET variables
require_once(SPBC_PLUGIN_DIR . 'lib/CleantalkSP/Variables/Post.php'); // POST variables
require_once(SPBC_PLUGIN_DIR . 'lib/CleantalkSP/Variables/Request.php'); // REQUEST variables
require_once(SPBC_PLUGIN_DIR . 'lib/CleantalkSP/Variables/Server.php'); // SERVER variables

// Child classes
require_once(SPBC_PLUGIN_DIR . 'lib/CleantalkSP/SpbctWp/API.php');      // Modified API class
require_once(SPBC_PLUGIN_DIR . 'lib/CleantalkSP/SpbctWp/Helper.php');   // Modified Helper class

// Extended
//require_once( SPBC_PLUGIN_DIR . 'lib/CleantalkSP/Security/FireWall.php' ); // FireWall ::SpbcFireWall @ToDo this class autoloaded. remove next release.
require_once(SPBC_PLUGIN_DIR . 'lib/CleantalkSP/SpbctWp/Cron.php');     // Cron     ::SpbcCron
require_once(SPBC_PLUGIN_DIR . 'lib/CleantalkSP/SpbctWp/State.php');    // State class
require_once(SPBC_PLUGIN_DIR . 'lib/CleantalkSP/SpbctWp/RemoteCalls.php');    // State class
require_once(SPBC_PLUGIN_DIR . 'lib/CleantalkSP/SpbctWp/ListTable.php'); // Table lib

// Scanner libs
require_once(SPBC_PLUGIN_DIR . 'lib/SpbcScaner.php');          // Common analysis
require_once(SPBC_PLUGIN_DIR . 'lib/SpbcScannerLinks.php');    // Outbound links analysis
require_once(SPBC_PLUGIN_DIR . 'lib/SpbcScannerH.php');        // Heuristic analysis
require_once(SPBC_PLUGIN_DIR . 'lib/SpbcCure.php');            // Cure class
require_once(SPBC_PLUGIN_DIR . 'lib/SpbcScannerFrontend.php'); // Frontend scanner class

// Backups
require_once(SPBC_PLUGIN_DIR . 'inc/spbc-backups.php');

// Misc libs
require_once(SPBC_PLUGIN_DIR . 'inc/spbc-tools.php');   // Different helper functions
require_once(SPBC_PLUGIN_DIR . 'inc/spbc-pluggable.php'); // Wordpress functions
require_once(SPBC_PLUGIN_DIR . 'inc/spbc-scanner.php');

if(!class_exists('CleantalkTools'))
	require_once(SPBC_PLUGIN_DIR . 'lib/CleantalkTools.php');    // Differnt tools for debug

// ArrayObject with settings and other global variables
global $spbc;
$spbc = new SpbcState('spbc', array('settings', 'data', 'remote_calls', 'debug', 'installing', 'errors'), SPBC_WPMS);
if(!get_option(SPBC_DATA))
	$spbc->save('data');

// Setting SPBC statuses
$spbc->allow_custom_key = SPBC_WPMS && !empty($spbc->network_settings['allow_custom_key']) ? true : false;

// Different
if(is_main_site() || $spbc->allow_custom_key){
	
	//Account params
	$spbc->key_is_ok    = !empty($spbc->data['key_is_ok'])       ? 1                              : 0;
	$spbc->user_token   = !empty($spbc->data['user_token'])      ? $spbc->data['user_token']      : '';
	$spbc->service_id   = !empty($spbc->data['service_id'])      ? $spbc->data['service_id']      : 0;
	$spbc->moderate     = !empty($spbc->data['moderate'])        ? $spbc->data['moderate']        : 0;
	$spbc->auto_update  =  isset($spbc->data['auto_update_app']) ? $spbc->data['auto_update_app'] : 0;

	// Notices flags
	$spbc->show_notice        = !empty($spbc->data['notice_show'])         ? 1 : 0;
	$spbc->renew              = !empty($spbc->data['notice_renew'])        ? 1 : 0;
	$spbc->trial              = !empty($spbc->data['notice_trial'])        ? 1 : 0;
	$spbc->notice_auto_update = !empty($spbc->data['notice_auto_update'])  ? 1 : 0;
	$spbc->were_updated       = !empty($spbc->data['notice_were_updated']) ? 1 : 0;
	
}elseif(!$spbc->allow_custom_key){
	
	//Account params
	$spbc->key_is_ok    = (!empty($spbc->network_settings['key_is_ok'])  ? 1 : 0);
	$spbc->user_token   = (!empty($spbc->network_settings['user_token']) ? $spbc->network_settings['user_token'] : '');
	$spbc->service_id   = (!empty($spbc->network_settings['service_id']) ? $spbc->network_settings['service_id'] : 0);
	$spbc->moderate     = (!empty($spbc->network_settings['moderate'])   ? $spbc->network_settings['moderate']   : 0);
	
	// Notices flags
	$spbc->show_notice  = 0;
	$spbc->renew        = 0;
	$spbc->trial        = 0;
	$spbc->were_updated = 0;
}

// Only for lcoal/main site
if(is_main_site()){
	// Scanner
	$spbc->scaner_enabled = true;
	$spbc->scanner_status  = $spbc->moderate                        ? true : false;
	$spbc->scaner_warning = !empty($spbc->data['scaner_warning'])  ? true : false;
	
	// Traffic Control
	$spbc->fw_enabled      = true;
	$spbc->tc_enabled      = !empty($spbc->settings['traffic_control_enabled']) ? true : false;
	$spbc->tc_status       = $spbc->moderate                                    ? true : false;
}else{
	$spbc->scaner_enabled  = false;
	$spbc->fw_enabled      = false;
	$spbc->tc_enabled      = false;
	$spbc->tc_status       = false;
}

// Temporary forbid scanner for WPMS
if(SPBC_WPMS && !is_main_site()){
	$spbc->scaner_enabled = false;
	$spbc->scanner_status  = false;
	$spbc->scaner_warning = false;
}

// Update plugin's data to current version
spbc_update_actions();

//First start
if($spbc->settings && $spbc->key_is_ok){
	
	// Public pages
	if( ( ! is_admin() && ! defined( 'DOING_AJAX' ) && ! spbc_wp_doing_cron() ) ){
		
		// Remote calls
		if(SpbcRemoteCalls::check())
			SpbcRemoteCalls::perform();
		
	}
	
	// FireWall
	if(
		$spbc->moderate &&
		// @ToDo sometimes last update time will not set. bug?
	    isset( /*$spbc->data['last_firewall_updated'],*/ $spbc->data['firewall_entries'] ) &&
	    ( ( !is_admin() && !defined('DOING_AJAX') && !spbc_wp_doing_cron() ) || !empty($_FILES) )
	)
		spbc_firewall__check();

} else {
	if( isset( $spbc->errors ) && ! isset( $spbc->errors['apikey'] ) ) {
		$spbc->error_add('apikey', __('Key is empty.', 'security-malware-firewall'));
	}
}

// Set cookie to detect admin on public pages
if(spbc_is_user_logged_in() && !empty($spbc->settings['set_cookies']) && !isset($_COOKIE['spbc_is_logged_in'])){
	setcookie('spbc_is_logged_in', md5($spbc->data['salt'].parse_url(get_option('siteurl'),PHP_URL_HOST)), time()+86400*365, '/');
}

// Logged hooks
register_activation_hook( __FILE__,   'spbc_activation' );
register_deactivation_hook( __FILE__, 'spbc_deactivation' );

// Hook for newly added blog
if( version_compare( get_bloginfo('version'),'5.1.0', '<' ) ) {
	add_action('wpmu_new_blog', 'spbc_activation__new_blog', 10, 6);
} else {
	add_action('wp_insert_site', 'spbc_activation__new_blog_5_1', 10, 1);
}

// Auth hooks
add_filter('authenticate',          'spbc_authenticate',            20, 3); // Hooks for authentificate
add_action('login_form',            'spbc_2fa__show_field',         10);
add_action('login_form_login',      'spbc_2fa__authenticate',       1);    // Authentificate with Code
add_action('login_errors',          'spbc_fix_error_messages',      99999); // Filters error message
add_action('wp_logout',             'spbc_wp_logout',               1);     // Hooks for authentificate
add_action('login_header',          'spbc_login_form_notification', 1);     // Hook for registration form notification
add_action('plugins_loaded',        'spbc_plugin_loaded',           1);     // Main hook

//Hooks for updating/adding settings
add_action ('added_option', 'spbc_after_options_added', 10, 3);
add_action ('updated_option', 'spbc_after_options_updated', 10, 3);

// Posts hooks
add_action('wp_insert_post',    'spbc_update_postmeta_links',             10, 3 );
add_action('wp_insert_comment', 'spbc_update_postmeta_links__by_comment', 10, 2 );

// Set headers
add_action('init', 'spbc_set_headers');

// Cron
global $spbc_cron; // Letting know functions that they are running under spbc_cron
$spbc_cron = new SpbcCron();
$spbc_cron->checkTasks();
if(!empty($spbc_cron->tasks_to_run)){
	$spbc->doing_cron = true;
	$spbc_cron->runTasks();
}
$spbc->doing_cron = false;
unset($spbc_cron);

if (is_admin() || is_network_admin()) {
	
	// Async loading for JavaScript
	add_filter('script_loader_tag', 'spbc_admin_add_script_attribute', 10, 3);
	
	require_once(SPBC_PLUGIN_DIR. 'inc/spbc-admin.php');
	require_once(SPBC_PLUGIN_DIR . 'templates/spbc_settings_main.php'); // Templates for settings pgae
	
	add_action('admin_init',            'spbc_activation__redirect', 1); // Redirect after activation
	add_action('admin_init',            'spbc_admin_init', 1, 1);       // Main admin hook
	add_action('admin_menu',            'spbc_admin_add_page');         // Admin pages
	add_action('network_admin_menu',    'spbc_admin_add_page');         // Network admin pages
	add_action('admin_enqueue_scripts', 'spbc_enqueue_scripts');        // Scripts
	
	if(!defined( 'DOING_AJAX' )){
		add_action('admin_notices',         'spbc_admin_notice_message');
		add_action('network_admin_notices', 'spbc_admin_notice_message');
	}
	
	// Customize row with the plugin on plugins list page.
	if((isset($pagenow) && $pagenow === 'plugins.php') || (isset($_SERVER['REQUEST_URI']) & strpos($_SERVER['REQUEST_URI'],'plugins.php') !== false)) {
		add_filter('plugin_action_links_' . SPBC_PLUGIN_BASE_NAME,               'spbc_plugin_action_links', 10, 2);
		add_filter('network_admin_plugin_action_links_' . SPBC_PLUGIN_BASE_NAME, 'spbc_plugin_action_links', 10, 2);
		add_filter('plugin_row_meta',                                            'spbc_plugin_links_meta',   10, 2);
	}
	
}
/**
* Hook for updating settings
*/
function spbc_after_options_updated($option, $old_value, $value) {
	global $spbc;

	if ($option == 'spbc_settings') {
		// Sending logs.
		$result = spbc_send_logs($value['spbc_key']);
		if(empty($result['error'])){
			$spbc->data['logs_last_sent'] = current_time('timestamp');
			$spbc->data['last_sent_events_count'] = $result;
			$spbc->error_delete('send_logs');
		}else{
			$spbc->error_add('send_logs', $result);
		}

		// Updating FW
		$result = spbc_security_firewall_update(true, $value['spbc_key']);
		if(empty($result['error'])){
			$spbc->data['last_firewall_updated'] = current_time('timestamp');
			$spbc->data['firewall_entries'] = $result;
			$spbc->error_delete('firewall_update');
		}else{
			$spbc->error_add('firewall_update', $result);
		}

		// Sending FW logs
		$result = spbc_send_firewall_logs($value['spbc_key']);
		if(empty($result['error'])){
			$spbc->data['last_firewall_send'] = current_time('timestamp');
			$spbc->data['last_firewall_send_count'] = $result;
			$spbc->error_delete('send_firewall_logs');
		}else{
			$spbc->error_add('send_firewall_logs', $result);
		}
	}
}	

/**
* Hook for adding settings
*/
function spbc_after_options_added($option, $value) {
	global $spbc;
	
	if ($option == 'spbc_settings') {
		// Sending logs.
		$result = spbc_send_logs($value['spbc_key']);
		if(empty($result['error'])){
			$spbc->data['logs_last_sent'] = current_time('timestamp');
			$spbc->data['last_sent_events_count'] = $result;
			$spbc->error_delete('send_logs');
		}else{
			$spbc->error_add('send_logs', $result);
		}

		// Updating FW
		$result = spbc_security_firewall_update(true, $value['spbc_key']);
		if(empty($result['error'])){
			$spbc->data['last_firewall_updated'] = current_time('timestamp');
			$spbc->data['firewall_entries'] = $result;
			$spbc->error_delete('firewall_update');
		}else{
			$spbc->error_add('firewall_update', $result);
		}

		// Sending FW logs
		$result = spbc_send_firewall_logs($value['spbc_key']);
		if(empty($result['error'])){
			$spbc->data['last_firewall_send'] = current_time('timestamp');
			$spbc->data['last_firewall_send_count'] = $result;
			$spbc->error_delete('send_firewall_logs');
		}else{
			$spbc->error_add('send_firewall_logs', $result);
		}
	}
}
function spbc_set_headers(){
	
	global $spbc;
	
	if( ! headers_sent() ){
		
		// Additional headers
		if( $spbc->settings['additional_headers'] ){
			header('X-XSS-Protection: 1; mode=block');
			header('X-Content-Type-Options: nosniff');
		}
		
		// Forbid to show in iframes
		if( $spbc->settings['forbid_to_show_in_iframes'] ){
			header('X-Frame-Options: sameorigin', false);
		}
	}
	
	return;
}

function spbc_update_actions(){
	
	global $spbc;
	
	//Update logic
	$current_version = $spbc->data['plugin_version'];
	
	if($current_version != SPBC_VERSION){
		if(is_main_site()){
			require_once(SPBC_PLUGIN_DIR . 'inc/spbc-updater.php');
			spbc_run_update_actions($current_version, SPBC_VERSION);
		}
		$spbc->data['notice_were_updated'] = (isset($spbc->data['plugin_version']) ? true : false); //Flag - plugin were updated
		$spbc->data['plugin_version'] = SPBC_VERSION;
		$spbc->save('data');
		$spbc->save('settings'); // Saving default settings
	}
}

function spbc_firewall__check(){
	
	global $spbc, $apbct;

	$settings = is_main_site() ? $spbc->settings : $spbc->network_settings;

	$fw_init_options = array(
		'set_cookies' => $spbc->settings['set_cookies']
	);

	FireWall::set_db_handler( new \CleantalkSP\SpbctWp\FireWall\FireWall_database() );

	$firewall = new FireWall( $spbc->settings['spbc_key'], $fw_init_options );

	// Necessary: Load Security FireWall module
	$firewall->load_fw_module( new \CleantalkSP\SpbctWp\FireWall\ClassSecFW_WP() );

	// Necessary: Load BruteForce protection module
	$firewall->load_fw_module( new \CleantalkSP\SpbctWp\FireWall\ClassBFP_WP() );

	// Optional: Load Web Application FireWall module
	if( $settings['waf_enabled'] ) {
		$firewall->load_fw_module( new \CleantalkSP\SpbctWp\FireWall\ClassWAF_WP() );
	}

	// Optional: Load Traffic Control module
	if( $spbc->settings['traffic_control_enabled'] && ! is_admin() ) {
		$firewall->load_fw_module( new \CleantalkSP\SpbctWp\FireWall\ClassTC_WP() );
	}

	// Skip the check
	// Set skip test cookie
	if( ! empty( $_GET['access'] ) ) {
		$apbct_settings = get_option( 'cleantalk_settings' );
		$apbct_key = ! empty( $apbct_settings['apikey'] ) ? $apbct_settings['apikey'] : false;
		if( ( $_GET['access'] === $spbc->settings['spbc_key'] || ( $apbct_key !== false && $_GET['access'] === $apbct_key ) ) ){
			setcookie ( 'spbc_firewall_pass_key', md5( $_SERVER['REMOTE_ADDR'] . $spbc->settings['spbc_key'] ), time()+1200, '/' );
			setcookie ( 'ct_sfw_pass_key',        md5( $_SERVER['REMOTE_ADDR'] . $apbct_key ),                  time()+1200, '/' );
			return;
		}
	}

	//Pass the ckeck if cookie is set.
	foreach( $firewall->ip_array as $spbc_cur_ip ) {
		if( isset( $_COOKIE['spbc_firewall_pass_key'] ) && $_COOKIE['spbc_firewall_pass_key'] == md5( $spbc_cur_ip.$spbc->settings['spbc_key'] ) )
			return;
	}

	$firewall->run();

}

// Plugin activation
function spbc_activation( $network, $redirect = true ) {
	
	global $wpdb, $spbc;
	
	delete_option('spbc_deactivation_in_process');
	
	$sqls[] = 'CREATE TABLE IF NOT EXISTS %sspbc_auth_logs (
		`id` int(11) NOT NULL AUTO_INCREMENT,
		`datetime` datetime NOT NULL,
		`user_login` varchar(60) NOT NULL,
		`event` varchar(32) NOT NULL,
		`page` VARCHAR(500) NULL,
		`page_time` VARCHAR(10) NULL,
		`blog_id` int(11) NOT NULL,
		`auth_ip` VARCHAR(50) DEFAULT NULL,
		`role` varchar(64) DEFAULT NULL,
		`user_agent` VARCHAR(1024) DEFAULT NULL,
		`browser_sign` VARCHAR(32) DEFAULT NULL,
		PRIMARY KEY (`id`),
		KEY `datetime` (`datetime`,`event`)
		) DEFAULT CHARSET=latin1 AUTO_INCREMENT=1;';
	
	$sqls[] = 'CREATE TABLE IF NOT EXISTS `%sspbc_firewall__personal_ips` (
		    `id` INT(11) NOT NULL AUTO_INCREMENT,
		    `network` INT(10) UNSIGNED NOT NULL DEFAULT "0",
		    `mask` INT(10) UNSIGNED NOT NULL DEFAULT "0",
		    `status` TINYINT(2) NOT NULL DEFAULT "0",
		    INDEX (`network`, `mask`),
		    PRIMARY KEY (`id`)
		)
		COLLATE="utf8_general_ci"
		ENGINE=InnoDB;';
	$sqls[] = 'CREATE TABLE IF NOT EXISTS `%sspbc_firewall__personal_countries` (
		    `id` INT(11) NOT NULL AUTO_INCREMENT,
		    `country_code` CHAR(2) NOT NULL,
		    `status` TINYINT(2) NOT NULL,
		    PRIMARY KEY (`id`)
		)
		COLLATE="utf8_general_ci"
		ENGINE=InnoDB;';
	
	$sqls[] = "CREATE TABLE IF NOT EXISTS %sspbc_firewall_logs (
		`entry_id` VARCHAR(40) NOT NULL,
		`ip_entry` VARCHAR(50) NULL,
		`status` ENUM('PASS','PASS_BY_TRUSTED_NETWORK','PASS_BY_WHITELIST','DENY','DENY_BY_NETWORK','DENY_BY_DOS','DENY_BY_WAF_XSS','DENY_BY_WAF_SQL','DENY_BY_WAF_FILE','DENY_BY_WAF_EXPLOIT','DENY_BY_BFP') NULL DEFAULT NULL,
		`pattern` VARCHAR(1024) NULL,
		`requests` INT NULL,
		`page_url` VARCHAR(1024) NULL,
		`request_method` VARCHAR(5) NULL,
		`x_forwarded_for` VARCHAR(15) NULL,
		`http_user_agent` VARCHAR(300) NULL,
		`entry_timestamp` INT NOT NULL ,
		PRIMARY KEY (`entry_id`));";
	
	$sqls[] = "CREATE TABLE IF NOT EXISTS %sspbc_traffic_control_logs (
		`id` VARCHAR(32) NOT NULL,
		`log_type` TINYINT NULL DEFAULT NULL,
		`ip` VARCHAR(40) NOT NULL,
		`entries` INT DEFAULT 0,
		`interval_start` INT NOT NULL,
		PRIMARY KEY (`id`));";
	
	$sqls_common[] = 'CREATE TABLE IF NOT EXISTS `%sspbc_firewall_data`(
			`id` char(32) NOT NULL,
			`network` int(10) unsigned NOT NULL DEFAULT "0",
			`mask` int(10) unsigned NOT NULL DEFAULT "0",
			`country_code` char(2) NULL DEFAULT NULL,
			`status` TINYINT(2) NULL,
			INDEX (`network`, `mask`),
			PRIMARY KEY (`id`)
		);';
	
	$sqls_common[] = "CREATE TABLE IF NOT EXISTS %sspbc_scan_results (
		`path` VARCHAR(1024) NOT NULL,
		`size` INT(10) NOT NULL,
		`perms` INT(4) NOT NULL,
		`mtime` INT(11) NOT NULL,
		`source_type` ENUM('CORE', 'PLUGIN', 'THEME') NULL DEFAULT NULL,
		`source` VARCHAR(300) NULL DEFAULT NULL,
		`source_status` SET('UP_TO_DATE','OUTDATED','NOT_IN_DIRECTORY','UNKNOWN') NULL DEFAULT NULL,
		`version` VARCHAR(20) NULL DEFAULT NULL,
		`checked` ENUM('NO', 'YES', 'YES_SIGNATURE', 'YES_HEURISTIC') NOT NULL DEFAULT 'NO',
		`status` ENUM('UNKNOWN','OK','APROVED','MODIFIED','INFECTED','QUARANTINED') NOT NULL DEFAULT 'UNKNOWN',
		`severity` ENUM('CRITICAL', 'DANGER', 'SUSPICIOUS', 'NONE') NULL DEFAULT NULL,
		`weak_spots` VARCHAR(2048) NULL DEFAULT NULL,
		`difference` VARCHAR(1024) NULL DEFAULT NULL,
		`last_sent` INT(11) NULL DEFAULT NULL,
		`fast_hash` VARCHAR(32) NULL DEFAULT NULL,
		`full_hash` VARCHAR(32) NULL DEFAULT NULL,
		`real_full_hash` VARCHAR(32) NULL DEFAULT NULL,
		`previous_state` VARCHAR(1024) NULL DEFAULT NULL,
		`q_path` VARCHAR(1024) NULL DEFAULT NULL,
		`q_time` INT(11) NULL DEFAULT NULL,
		UNIQUE (`fast_hash`)
	);";
	
	$sqls_common[] = 'CREATE TABLE IF NOT EXISTS %sspbc_scan_links_logs (
		`link_id` INT(11) NOT NULL AUTO_INCREMENT,
		`scan_id` INT(11) NOT NULL,
		`domain` TINYTEXT NOT NULL,
		`link` VARCHAR(2048) NOT NULL,
		`link_text` VARCHAR(2048) NOT NULL,
		`page_url` VARCHAR(2048) NOT NULL,
		`spam_active` TINYINT(1) NULL,
		PRIMARY KEY (`link_id`),
		INDEX `spam_active` (`spam_active`),
		INDEX `scan_id` (`scan_id`),
		INDEX `domain` (`domain`(40))
		);';
	
	$sqls_common[] = 'CREATE TABLE IF NOT EXISTS %sspbc_scan_frontend (
		`page_id` VARCHAR(1024) NOT NULL,
		`url` VARCHAR(1024) NOT NULL,
		`dbd_found` TINYINT NULL,
		`redirect_found` TINYINT NULL,
		`signature` TINYINT NULL,
		`bad_code` TINYINT NULL,
		`weak_spots` VARCHAR(1024) NULL
		);';
	
	$sqls_common[] = 'CREATE TABLE IF NOT EXISTS %sspbc_scan_signatures (
		`id` INT(11) UNSIGNED NOT NULL AUTO_INCREMENT,
		`name` VARCHAR(128) NOT NULL,
		`body` VARCHAR(512) NOT NULL,
		`type` ENUM("FILE","CODE_PHP","CODE_HTML","CODE_JS","WAF_RULE") NOT NULL,
		`attack_type` SET("SQL_INJECTION","XSS","MALWARE","EXPLOIT") NOT NULL,
		`submitted` DATETIME NOT NULL,
		`cci` TEXT NULL DEFAULT NULL,
		PRIMARY KEY (`id`),
		UNIQUE KEY (`name`)
		);';
	
	$sqls_common[] = 'CREATE TABLE IF NOT EXISTS %sspbc_backuped_files (
		`id` INT(11) UNSIGNED NOT NULL AUTO_INCREMENT,
		`backup_id` INT(11) UNSIGNED NOT NULL,
		`real_path` VARCHAR(512) NOT NULL,
		`back_path` VARCHAR(512) NOT NULL,
		PRIMARY KEY (`id`)
		);';
	
	$sqls_common[] = 'CREATE TABLE IF NOT EXISTS %sspbc_backups (
		`backup_id` INT(11) UNSIGNED NOT NULL AUTO_INCREMENT,
		`type` ENUM("FILE","ALL","SIGNATURES") NOT NULL DEFAULT "FILE",
		`datetime` DATETIME NOT NULL,
		`status` ENUM("PROCESSING", "BACKUPED", "ROLLBACK", "ROLLBACKED", "STOPPED") NOT NULL DEFAULT "PROCESSING",
		PRIMARY KEY (`backup_id`)
		);';
	
	// Activation for network
	if(is_multisite() && $network){
		
		// For all blogs
		spbc_activation__create_tables($sqls_common);
		SpbcCron::addTask('scanner__launch',           'spbc_scanner__launch',            86400, $spbc->settings['scanner_auto_start_manual_time'] ? $spbc->settings['scanner_auto_start_manual_time'] - time() < 0 ? (3600*24 + $spbc->settings['scanner_auto_start_manual_time'] - time()) : $spbc->settings['scanner_auto_start_manual_time'] - time() : time() + 43200);
		SpbcCron::addTask('scanner_update_signatures', 'spbc_scanner__signatures_update', 86400, time()+100);
		SpbcCron::addTask('send_php_logs',             'spbc_PHP_logs__send',             3600,  time()+300);
		
		// MU-Plugin
		if(!spbc_mu_plugin__install())
			spbc_log('Couldn\'t install Must-Use Plugin. This\'s not critical but it could help plugin to work faster.');
		
		// For each blog
		$initial_blog  = get_current_blog_id();
		$blogs = array_keys($wpdb->get_results('SELECT blog_id FROM '. $wpdb->blogs, OBJECT_K));
		foreach ($blogs as $blog) {
			
			switch_to_blog($blog);
			
			spbc_activation__create_tables($sqls);
			SpbcCron::addTask('send_logs',                 'spbc_send_logs',                  3600,  time()+1800);
			SpbcCron::addTask('send_report',               'spbc_send_daily_report',          86400, time()+43200);
			SpbcCron::addTask('firewall_update',           'spbc_security_firewall_update',   86400, time()+43200);
			SpbcCron::addTask('send_firewall_logs',        'spbc_send_firewall_logs',         3600,  time()+1800);
			SpbcCron::addTask('access_key_notices',        'spbc_access_key_notices',         3600,  time()+3500);
			
		}
		switch_to_blog($initial_blog);
		
		// Activation for blog
	}elseif(is_multisite()){
		// Tables
		spbc_activation__create_tables($sqls);
		//Cron jobs
		SpbcCron::addTask('send_logs',                 'spbc_send_logs',                  3600,  time()+1800);
		SpbcCron::addTask('send_report',               'spbc_send_daily_report',          86400, time()+43200);
		SpbcCron::addTask('firewall_update',           'spbc_security_firewall_update',   86400, time()+43200);
		SpbcCron::addTask('send_firewall_logs',        'spbc_send_firewall_logs',         3600,  time()+1800);
		SpbcCron::addTask('access_key_notices',        'spbc_access_key_notices',         3600,  time()+3500);
		
	}elseif(!is_multisite()){
		
		// Tables
		spbc_activation__create_tables($sqls_common);
		spbc_activation__create_tables($sqls);
		
		// Cron
		SpbcCron::addTask('send_logs',                 'spbc_send_logs',                  3600,  time()+1800);
		SpbcCron::addTask('send_report',               'spbc_send_daily_report',          86400, time()+43200);
		SpbcCron::addTask('firewall_update',           'spbc_security_firewall_update',   86400, time()+43200);
		SpbcCron::addTask('send_firewall_logs',        'spbc_send_firewall_logs',         3600,  time()+1800);
		SpbcCron::addTask('access_key_notices',        'spbc_access_key_notices',         3600,  time()+3500);
		SpbcCron::addTask('scanner__launch',           'spbc_scanner__launch',            86400, $spbc->settings['scanner_auto_start_manual_time'] ? $spbc->settings['scanner_auto_start_manual_time'] - time() < 0 ? (3600*24 + $spbc->settings['scanner_auto_start_manual_time'] - time()) : $spbc->settings['scanner_auto_start_manual_time'] - time() : time() + 43200);
		SpbcCron::addTask('scanner_update_signatures', 'spbc_scanner__signatures_update', 86400, time()+100);
		SpbcCron::addTask('send_php_logs',             'spbc_PHP_logs__send',             3600,  time()+300);
		
		// MU-Plugin
		if(!spbc_mu_plugin__install())
			spbc_log('Couldn\'t install Must-Use Plugin. This\'s not critical but it could help plugin to work faster.');
	}
	
	// Redirect
	if($redirect)
		add_option('spbc_activation__redirect', (is_network_admin() ? 'settings.php?page=spbc' : 'options-general.php?page=spbc'));
}

function spbc_activation__create_tables($sqls) {
	global $wpdb;
	$wpdb->show_errors = false;
	
	if(is_scalar($sqls))
		$sqls = (array) $sqls;
	
	foreach($sqls as $key => $sql){
		$sql = sprintf($sql, $wpdb->prefix); // Adding current blog prefix
		$result = $wpdb->query($sql);
		if($result === false)
			$errors[] = "Failed.\nQuery: {$wpdb->last_query}\nError: {$wpdb->last_error}";
	}
	$wpdb->show_errors = true;
	// Log errors
	if(!empty($errors))
		spbc_log($errors);
}

//
// Function for redirect to settings
//
function spbc_activation__redirect(){
	
	$settings_rediect = get_option('spbc_activation__redirect', false);
	
	if($settings_rediect && !isset($_GET['activate-multi'])){
		delete_option('spbc_activation__redirect');
		wp_redirect($settings_rediect);
	}
}

function spbc_activation__new_blog($blog_id, $user_id, $domain, $path, $site_id, $meta) {
	if (spbc_is_plugin_active_for_network('security-malware-firewall/security-malware-firewall.php')){
		switch_to_blog($blog_id);
		spbc_activation(false, false);
		restore_current_blog();
	}
}

/**
 * Wrapper for spbc_activation__new_blog()
 * @param $new_site
 */
function spbc_activation__new_blog_5_1( $new_site ) {
	spbc_activation__new_blog($new_site->blog_id, null, null, null, null, null);
}

function spbc_is_plugin_active_for_network( $plugin ){
	
	if ( ! SPBC_WPMS )
		return false;
	
	$plugins = get_site_option( 'active_sitewide_plugins' );
	return isset( $plugins[ $plugin ] )
		? true
		: false;
}

//
// A code during plugin deactivation.
//
function spbc_deactivation( $network ) {
	
	global $spbc, $wpdb;
	
	setcookie('spbc_is_logged_in', '0', time()-30, '/');
	
	unregister_setting(SPBC_SETTINGS, SPBC_SETTINGS);
	
	// Deactivation for network
	if(is_multisite() && $network){
		
		update_option('spbc_deactivation_in_process', true);
		
		spbc_mu_plugin__uninstall();
		
		if(!empty($spbc->settings['complete_deactivation'])){
			
			$initial_blog  = get_current_blog_id();
			
			delete_site_option(SPBC_NETWORK_SETTINGS);
			
			$blogs = array_keys($wpdb->get_results('SELECT blog_id FROM '. $wpdb->blogs, OBJECT_K));
			
			// Deleting data from each blog
			foreach ($blogs as $blog) {
				switch_to_blog($blog);
				spbc_deactivation__delete_blog_tables();
				delete_option(SPBC_SETTINGS);
				delete_option(SPBC_DATA);
				delete_option(SPBC_LOGIN_ATTEMPTS);
				delete_option(SPBC_CRON);
				delete_option(SPBC_ERRORS);
			}
			switch_to_blog($initial_blog);
			
			spbc_deactivation__delete_common_tables();
			
			delete_option(SPBC_PLUGINS);
			delete_option(SPBC_THEMES);
			
			// Deleting scan links results
			$wpdb->query(
				$wpdb->prepare(
					"DELETE FROM {$wpdb->postmeta}
					WHERE meta_key = %s",
					'spbc_links_checked'
				)
			);
			// Deleting scan frontend results
			$wpdb->query(
				$wpdb->prepare(
					"DELETE FROM {$wpdb->postmeta}
					WHERE meta_key = %s",
					'spbc_frontend__last_checked'
				)
			);
		}
		
		// Deactivation for blog
	}elseif(is_multisite()){
		
		spbc_deactivation__delete_blog_tables();
		
		delete_option(SPBC_SETTINGS);
		delete_option(SPBC_DATA);
		delete_option(SPBC_LOGIN_ATTEMPTS);
		delete_option(SPBC_CRON);
		delete_option(SPBC_ERRORS);
		
		// Deactivation on standalone blog
	}elseif(!is_multisite()){
		
		spbc_mu_plugin__uninstall();
		
		delete_option('spbc_deactivation_in_process');
		
		if(!empty($spbc->settings['complete_deactivation'])){
			spbc_deactivation__delete_blog_tables();
			spbc_deactivation__delete_common_tables();
			delete_option(SPBC_SETTINGS);
			delete_option(SPBC_DATA);
			delete_option(SPBC_DEBUG);
			delete_option(SPBC_LOGIN_ATTEMPTS);
			delete_option(SPBC_PLUGINS);
			delete_option(SPBC_THEMES);
			delete_option(SPBC_CRON);
			delete_option(SPBC_ERRORS);
			
			// Deleting scan links results
			$wpdb->query(
				$wpdb->prepare(
					"DELETE FROM {$wpdb->postmeta}
					WHERE meta_key = %s",
					'spbc_links_checked'
				)
			);
			
			// Deleting scan frontend results
			$wpdb->query(
				$wpdb->prepare(
					"DELETE FROM {$wpdb->postmeta}
					WHERE meta_key = %s",
					'spbc_frontend__last_checked'
				)
			);
			
		}
	}
}

function spbc_deactivation__delete_blog_tables() {
	global $wpdb;
	$wpdb->query('DROP TABLE '. $wpdb->prefix . 'spbc_auth_logs');
	$wpdb->query('DROP TABLE '. $wpdb->prefix . 'spbc_firewall__personal_ips');
	$wpdb->query('DROP TABLE '. $wpdb->prefix . 'spbc_firewall__personal_countries');
	$wpdb->query('DROP TABLE '. $wpdb->prefix . 'spbc_firewall_logs');
	$wpdb->query('DROP TABLE '. $wpdb->prefix . 'spbc_traffic_control_logs');
}

function spbc_deactivation__delete_common_tables() {
	global $wpdb;
	$wpdb->query('DROP TABLE '. $wpdb->base_prefix . 'spbc_scan_results');
	$wpdb->query('DROP TABLE '. $wpdb->base_prefix . 'spbc_firewall_data');
	$wpdb->query('DROP TABLE '. $wpdb->base_prefix . 'spbc_scan_links_logs');
	$wpdb->query('DROP TABLE '. $wpdb->base_prefix . 'spbc_scan_signatures');
	$wpdb->query('DROP TABLE '. $wpdb->base_prefix . 'spbc_scan_frontend');
	$wpdb->query('DROP TABLE '. $wpdb->base_prefix . 'spbc_backups');
	$wpdb->query('DROP TABLE '. $wpdb->base_prefix . 'spbc_backuped_files');
}

// Misc functions to test the plugin.
function spbc_plugin_loaded() {
	
	if(is_admin() || is_network_admin()){
		$dir = plugin_basename( dirname( __FILE__ ) ) . '/i18n';
		$loaded = load_plugin_textdomain('security-malware-firewall', false, $dir);
	}
	
}

//
// Adding notification to registration form
//
function spbc_login_form_notification(){
	
	global $pagenow, $spbc;
	
	if($pagenow == 'wp-login.php' && empty($_GET['action'])){ //Return if it's not a registration page.
		
		$show_notification = (!empty($spbc->settings['show_link_in_login_form']) ? true : false);
		
		if($show_notification)
			echo "<div style='position: absolute; bottom: 20px; right: 20px;'>"
			     ."<p style='text-align: right;'>"
			     .__('Brute Force Protection by', 'security-malware-firewall')."&nbsp;<a rel='nofollow' href='https://wordpress.org/plugins/security-malware-firewall/' target='_blank'>"
			     ."<img style='vertical-align: bottom;' src='".SPBC_PATH."/images/logo_small.png'></a>"
			     ."<a rel='nofollow' href='https://wordpress.org/plugins/security-malware-firewall/' target='_blank'>".__('CleanTalk Security', 'security-malware-firewall')."</a>"
			     .".</p>"
			     ."<p style='text-align: right;'>".__('All attempts are logged.', 'security-malware-firewall')."</p>
			</div>";
	}
	return null;
}

/**
 * Check user for brute force attack
 *
 * @param WP_User $user
 * @param string  $username
 * @param string  $password
 *
 * @return null
 */
function spbc_authenticate($user, $username, $password){
	
	global $spbc;
	
	if(is_wp_error($user)){

		// Store BFP trigger
		do_action('apbct_log_wrong_auth' );

		$err_codes = $user->get_error_codes();
		// Passwords brute force.
		if (in_array( 'incorrect_password', $err_codes )){
			
			$sleep_timeout = $spbc->settings['block_timer__1_fails'];
			$spbc_login_attempts = get_option( SPBC_LOGIN_ATTEMPTS );
			
			if (is_array($spbc_login_attempts)) {
				
				if (isset($spbc_login_attempts[$username])) {
					
					if ($spbc_login_attempts[$username]['attempts'] >= SPBC_MAX_FAILS) {
						
						spbc_add_issue($username, $password, $spbc_login_attempts);
						$sleep_timeout = $spbc->settings['block_timer__5_fails'];
						
					} else {
						spbc_add_issue($username, $password, $spbc_login_attempts);
					}
				} else {
					spbc_add_issue($username, $password, $spbc_login_attempts, true);
				}
			} else {
				spbc_add_issue($username, $password, (array)$spbc_login_attempts, true);
			}
			
			sleep ($sleep_timeout);
		}
		
		// Usernames brute force.
		if (in_array( 'invalid_username', $err_codes )) {
			$user = spbc_log_issue_common(
				$username,
				'invalid_username',
				$spbc->settings['block_timer__1_fails'],
				$user
			);
		}
		
		// Emails brute force.
		if (in_array( 'invalid_email', $err_codes )) {
			$user = spbc_log_issue_common(
				$username,
				'invalid_email',
				$spbc->settings['block_timer__1_fails'],
				$user
			);
		}
	}
	
	// The user is logged in.
	if (isset($user->ID) && $user->ID > 0) {
		
		// Detecting new device
		$browser_sign__old = spbc_authenticate__browser_sign__get($user);
		$browser_sign      = spbc_authenticate__browser_sign__create();
		
		$roles = null;
		if ( ! empty( $user->roles ) && is_array( $user->roles ) ) {
			$roles = $user->roles[0]; // Takes only first role.
		}
		spbc_auth_log(array(
			'username' => $username,
			'event' => 'login',
			'roles' => $roles,
			'user_agent' => filter_input(INPUT_SERVER, 'HTTP_USER_AGENT'),
			'browser_sign' => $browser_sign,
		));
		
		$new_device = $browser_sign__old !== $browser_sign ? true : false;
		
		// Set sign if new device is detected
		if($new_device){
			spbc_auth_log(array(
				'username' => $username,
				'event' => 'login_new_device',
				'roles' => $roles,
				'user_agent' => filter_input(INPUT_SERVER, 'HTTP_USER_AGENT'),
				'browser_sign' => $browser_sign,
			));
		}
		
		// Sends logs to get notify about superuser login.
		$result = spbc_send_logs();
		if(empty($result['error'])){
			$spbc->error_delete('send_logs');
			$spbc->data['logs_last_sent'] = current_time('timestamp');
			$spbc->data['last_sent_events_count'] = $result;
			$spbc->save('data');
		}else{
			$spbc->error_add('send_logs', $result);
		}
		
		// Redirect if 2fa is enabled
		if($spbc->settings['2fa_enable'] == 1 || ($new_device && $spbc->settings['2fa_enable'] == -1)){
			if(spbc_is_user_role_in($spbc->settings['2fa_roles'], $user)){
				if($new_device || !(isset($_COOKIE['spbc_2fa_passed']) && $_COOKIE['spbc_2fa_passed'] === hash('sha256', $spbc->data['salt'] . $user->ID))){
					spbc_2fa__send_mail($user, $password);
					wp_redirect(get_option('siteurl') . '/wp-login.php?spbc_2fa_user=' . rawurlencode($user->user_login));
					die();
				}
			}
		}else{
			spbc_authenticate__browser_sign__set($user, $browser_sign);
			spbc_authenticate__user_agent__set($user);
		}
	}
	
	return $user;
}

/**
 * Returns browser sign
 *
 * @return string
 */
function spbc_authenticate__browser_sign__create(){
	return md5(filter_input(INPUT_SERVER, 'HTTP_USER_AGENT').filter_input(INPUT_SERVER, 'HTTP_ACCEPT_LANGUAGE'));
	// return hash(
	// 	'sha256',
	// 	filter_input(INPUT_SERVER, 'HTTP_USER_AGENT').filter_input(INPUT_SERVER, 'HTTP_ACCEPT_LANGUAGE')
	// );
}

/**
 * Set browser sign of user
 *
 * @param WP_User $user
 * @param string  $browser_sign Browser sign
 */
function spbc_authenticate__browser_sign__set($user, $browser_sign){
	update_user_meta($user->ID, 'spbc_browser_sign',          $browser_sign);
	update_user_meta($user->ID, 'spbc_browser_sign__updated', time());
}

/**
 * Gets browser sign of user
 *
 * @param $user
 *
 * @return bool|string Browser sign and update time
 */
function spbc_authenticate__browser_sign__get($user){
	return get_user_meta($user->ID, 'spbc_browser_sign', true);
}


/**
 * Set browser sign of user
 *
 * @param WP_User $user
 * @param string  $browser_sign Browser sign
 */
function spbc_authenticate__user_agent__set($user){
	update_user_meta($user->ID, 'spbc_user_agent', filter_input(INPUT_SERVER, 'HTTP_USER_AGENT'));
}

/**
 * Gets last user agent
 *
 * @param $user
 *
 * @return bool|string Browser sign and update time
 */
function spbc_authenticate__user_agent__get($user){
	return get_user_meta($user->ID, 'spbc_user_agent', true);
}

function spbc_2fa__send_mail($user, $password) {
	
	global $spbc;
	
	spbc_2fa__key_remove_old();
	
	// Send existing code if exists.
	if(isset($spbc->data['2fa_keys'][$user->user_login]) && $spbc->data['2fa_keys'][$user->user_login]['generated'] > time() - SPBC_2FA_KEY_TTL)
		$key = $spbc->data['2fa_keys'][$user->user_login]['val'];
	
	// Set new code if no code spotted
	else
		$key = spbc_2fa__key_generate_and_store($user);
	
	wp_mail(
		$user->user_email,
		// Subject
		sprintf(
			__('CleanTalk\'s Security. Two factor authentication code for user "%s" on "%s"','security-malware-firewall'),
			$user->user_login,
			parse_url(get_option('siteurl'),PHP_URL_HOST)
		),
		// Message
		sprintf(
			__('The authentication code for user "%s" on "%s" website is %d'. PHP_EOL .'Lifetime of the code 5 minutes.'. PHP_EOL . PHP_EOL .'CleanTalk\'s Security: https://wordpress.org/support/plugin/security-malware-firewall','security-malware-firewall'),
			$user->user_login,
			parse_url(get_option('siteurl'),PHP_URL_HOST),
			$key
		)
	);
	
	return $user;
}

function spbc_2fa__show_field() {
	
	global $spbc;
	
	spbc_2fa__key_remove_old();
	
	if($spbc->settings['2fa_enable']){
		
		if(isset($_GET['spbc_2fa_user'])){
			
			$user_name = rawurldecode($_GET['spbc_2fa_user']);
			
			// Error displaying
			if(isset($_GET['spbc_2fa_error'])){
				echo '<script>'
				     . 'var spbc_err = document.createElement("div");'
				     . 'spbc_err.innerHTML = \'<div id="login_error">'
				     . '<strong>'.__('WRONG CODE: ', 'security-malware-firewall').'</strong>'
				     . __('Please, check your e-mail to gain pass code', 'security-malware-firewall').'\';'
				     . 'document.getElementById("login").insertBefore(spbc_err, document.getElementById("login").children[1]);'
				     . '</script>';
			}
			
			// Recombining form to show only code input
			
			if(spbc_is_user_role_in($spbc->settings['2fa_roles'], $user_name) && isset($spbc->data['2fa_keys'][$user_name])){
				echo '<p id="spbc_2fa_wrapper">'
				     . '<label for="spbc_2fa">' . __('CleanTalk\'s Security authorization code') . '</label>'
				     . '<input type="text"   name="spbc_2fa" id="spbc_2fa" class="input" value="" size="20" />'
				     . '<input type="hidden" name="log"                    class="input" value="'. $user_name .'" />'
				     . 'Please, check your email to get code. If you have not received the e-mail, please, check "spam" folder.<br><br>Contact <a href="https://wordpress.org/support/plugin/security-malware-firewall">tech support</a> if you have questions.<br><br>'
				     . '<script>'
				     . 'setTimeout(function(){'
				     . 'var spbc_form = document.getElementById("loginform");'
				     . 'spbc_form.children[0].remove();'
				     . 'spbc_form.children[0].remove();'
				     . 'document.getElementsByClassName("forgetmenot")[0].remove();'
				     . '}, 2);'
				     . '</script>'
				     . '</p>';
			}
		}
	}
}

function spbc_2fa__key_generate_and_store($user){
	
	global $spbc;
	
	// Generate key
	$left_part  = str_pad(hexdec(substr(hash('sha256', $spbc->data['salt'].rand(0, getrandmax())), 0, 6)) % 1000, 3, '0', STR_PAD_LEFT);
	$right_part = str_pad(hexdec(substr(hash('sha256', $spbc->data['salt'].rand(0, getrandmax())), 0, 6)) % 1000, 3, '0', STR_PAD_LEFT);
	$key = $left_part.$right_part;
	
	$spbc->data['2fa_keys'][$user->user_login] = array(
		'generated' => time(),
		'val'       => $key,
	);
	$spbc->save('data');
	
	return (int)$key;
	
}

function spbc_2fa__key_remove_old() {
	
	global $spbc;
	
	// Check for old keys
	$keys = $spbc->data['2fa_keys'];
	foreach($keys as $index => $key){
		if($key['generated'] < time() - SPBC_2FA_KEY_TTL){
			unset($spbc->data['2fa_keys'][$index]);
		}
	}
	
	$spbc->save('data');
	
}

function spbc_2fa__authenticate() {
	
	global $spbc;
	
	// Protection from bruteforce
	sleep(1);
	
	if($spbc->settings['2fa_enable']){
		
		if(isset($_POST['spbc_2fa'], $_POST['log'])){
			
			$user = strpos($_POST['log'], '@') === false
				? get_user_by('login', $_POST['log'])
				: get_user_by('email', $_POST['log']);
			
			if($user instanceof WP_User){
				
				spbc_2fa__key_remove_old();
				
				// 2fa passed
				if(isset($spbc->data['2fa_keys'][$user->user_login]) && $spbc->data['2fa_keys'][$user->user_login]['val'] == $_POST['spbc_2fa']){
					
					// Delete it so no one could login via this code
					unset($spbc->data['2fa_keys'][$user->user_login]);
					$spbc->save('data');
					
					// Add event to secruity log
					spbc_auth_log(array(
						'username'     => $user->user_login,
						'event'        => 'login_2fa',
						'roles'        => reset($user->roles),
						'user_agent'   => filter_input(INPUT_SERVER, 'HTTP_USER_AGENT'),
						'browser_sign' => spbc_authenticate__browser_sign__create(),
					));
					
					// Sends logs to get notify about superuser login.
					$result = spbc_send_logs();
					if(empty($result['error'])){
						$spbc->error_delete('send_logs');
						$spbc->data['logs_last_sent'] = current_time('timestamp');
						$spbc->data['last_sent_events_count'] = $result;
						$spbc->save('data');
					}else{
						$spbc->error_add('send_logs', $result);
					}
					
					// Athorize user and redirect to wp-admin
					wp_set_auth_cookie($user->ID);
					$browser_sign = spbc_authenticate__browser_sign__create();
					spbc_authenticate__browser_sign__set($user, $browser_sign);
					spbc_authenticate__user_agent__set($user);
					setcookie('spbc_2fa_passed', hash('sha256', $spbc->data['salt'].$user->ID), time()+60*60*24*30, '/', parse_url(get_option('siteurl'), PHP_URL_HOST), false, true);
					wp_redirect('/wp-admin/');
					die();
					
					// 2fa failed
				}else{
					
					spbc_auth_log(array(
						'username'     => $user->user_login,
						'event'        => 'auth_failed_2fa',
						'roles'        => 'administrator',
						'user_agent'   => filter_input(INPUT_SERVER, 'HTTP_USER_AGENT'),
						'browser_sign' => spbc_authenticate__browser_sign__create(),
					));
					wp_redirect(get_option('siteurl').'/wp-login.php?spbc_2fa_error=1&spbc_2fa_user='.$user->user_login);
					die();
					
				}
			}
		}
	}
}

//
// Logs a logout event
//
function spbc_wp_logout() {
	$user = wp_get_current_user();
	
	// The user is logged out.
	if (isset($user->ID) && $user->ID > 0) {
		$roles = null;
		if (is_array($user->roles)) {
			$roles = $user->roles[0]; // Takes only first role.
		}
		spbc_auth_log(array(
			'username'     => $user->get('user_login'),
			'event'        => 'logout',
			'roles'        => $roles,
			'user_agent'   => spbc_authenticate__user_agent__get($user),
			'browser_sign' => spbc_authenticate__browser_sign__get($user),
		));
	}
	
	return null;
}

//
// Logs an issue.
//
function spbc_log_issue_common($username, $event, $sleep_timeout, $user = null) {
	spbc_auth_log(array(
		'username' => $username,
		'event' => $event,
	));
	sleep ($sleep_timeout);
	return $user;
}

function spbc_fix_error_messages($error_msg){
	
	global $spbc_login_error_msg;
	
	// 2fa wrong code
	if(isset($_GET['spbc_2fa_error'])){
		$error_msg = explode('<br />', $error_msg);
		return $error_msg[0].'<br />'. __('Wrong temporary code. Check your email to gain the code.', 'security-malware-firewall');
	}
	
	// Block message
	if(!empty($spbc_login_error_msg)){
		$error_msg = explode('<br />', $error_msg);
		return $error_msg[0].'<br />'.$spbc_login_error_msg;
	}
	return $error_msg;
}

// Adds a record to failed logins.
function spbc_add_issue($username, $password, $attempts, $new_issue = false) {
	
	// Reset the data to avaoid PHP issues.
	if (!isset($attempts) || !count($attempts)) {
		$attempts = array();
	}
	
	if (isset($attempts[$username]['first_issue']) && time() - $attempts[$username]['first_issue'] > SPBC_CALC_PERIOD) {
		$new_issue = true;
		unset($attempts[$username]);
	}
	
	$update_option = false;
	if ($new_issue) {
		$attempts[$username]['attempts'] = 1;
		$attempts[$username]['first_issue'] = time();
		$attempts[$username]['passwords'][] = md5($password);
		$update_option = true;
	} else {
		
		// Increase attempts only if new password failed.
		if (!in_array(md5($password), $attempts[$username]['passwords'])) {
			$attempts[$username]['attempts']++;
			$attempts[$username]['passwords'][] = md5($password);
			$update_option = true;
		}
	}
	
	if ($update_option) {
		update_option(SPBC_LOGIN_ATTEMPTS , $attempts);
		spbc_auth_log(array(
			'username' => $username,
			'event' => 'auth_failed'
		));
	}
	
	return null;
}

//
// The function logs any attempt to log in the WordPress backend.
//
function spbc_auth_log($params = null){
	
	global $wpdb;
	
	$params_default = array(
		'username'     => null,
		'event'        => null,
		'page'         => null,
		'page_time'    => null,
		'roles'        => null,
		'blog_id'      => (SPBC_WPMS ? get_current_blog_id() : null),
		'user_agent'   => null,
		'browser_sign' => null,
	);
	$params = array_merge($params_default, $params);
	
	// Cutting to 1024 symbols
	$params['user_agent'] = is_string($params['user_agent'])
		? substr($params['user_agent'], 0, 1024)
		: $params['user_agent'];
	
	$auth_ip = SpbcHelper::ip__get(array('real'));
	
	// To fix issue with NULL values for not NULL field.
	$blog_id = isset($params['blog_id']) && $params['blog_id'] !== null ? $params['blog_id'] : 1;
	
	$values = array(
		'datetime'     => date('Y-m-d H:i:s'),
		'user_login'   => $params['username'],
		'event'        => $params['event'],
		'auth_ip'      => $auth_ip,
		'page'         => $params['page'],
		'page_time'    => $params['page_time'],
		'blog_id'      => $blog_id,
		'role'         => $params['roles'],
		'user_agent'   => $params['user_agent'],
		'browser_sign' => $params['browser_sign'],
	);
	
	$result = $wpdb->insert(
		SPBC_TBL_SECURITY_LOG,
		$values
	);
	
	$inserted_id = $wpdb->insert_id;
	
	return $inserted_id;
}

//
// Sorts some data.
//
function spbc_usort_desc($a, $b) {
	return $b->datetime_ts - $a->datetime_ts;
}

//
// Function to get the countries by IPs list.
//
function spbc_get_countries_by_ips($ips_data = '') {
	global $api_url;
	
	$ips_c = array();
	
	if ($ips_data === '')
		return $ips_c;
	
	$result = SpbcAPI::method__ip_info($ips_data);
	
	if (empty($result['error'])) {
		
		foreach ($result as $ip_dec => $v2) {
			
			if (isset($v2['country_code']))
				$ips_c[$ip_dec]['country_code'] = $v2['country_code'];
			if (isset($v2['country_name']))
				$ips_c[$ip_dec]['country_name'] = $v2['country_name'];
			
		}
	}
	
	return $ips_c;
}

/**
 * Gets and write new signatures in lcoal database
 *
 * @global SpbcState $spbc
 * @global WPDB $wpdb
 * @return bool
 */
function spbc_scanner__signatures_update()
{
	global $spbc, $wpdb;
	
	$latest_signature = $wpdb->get_results('SELECT submitted FROM '. SPBC_TBL_SCAN_SIGNATURES .' ORDER BY submitted DESC LIMIT 1;', OBJECT);
	$latest_signature = !empty($latest_signature) ? $latest_signature[0]->submitted : 1;
	
	$result = SpbcScaner::get_hashes__signature($latest_signature);
	
	if(empty($result['error'])){
		
		$wpdb->query('DELETE FROM '. SPBC_TBL_SCAN_SIGNATURES .' WHERE 1;');
		
		$sql_head = 'INSERT INTO ' . SPBC_TBL_SCAN_SIGNATURES . '(`id`, `name`, `body`, `type`, `attack_type`, `submitted`, `cci`) VALUES ';
		$sql_data = array();
		
		foreach ($result as $signature) {
			
			$tmp = implode(
				',',
				array_map(function($elem){
					return SpbcHelper::db__prepare_param( stripslashes( $elem ) );
				}, $signature)
			);
			
			$sql_data[] = "($tmp)";
		}
		
		$wpdb->query( $sql_head . implode(',', $sql_data) .';' );
		
		$spbc->data['scanner']['last_signature_update'] = current_time('timestamp');
		$spbc->data['scanner']['signature_count'] = count( $result );
		$spbc->save('data');
		
	}elseif($result['error'] === 'UP_TO_DATE'){
		$out = array(
			'success' => 'UP_TO_DATE',
		);
	}else
		$out = $result;
	
	return empty($out) ? true : $out;
}

//
//	Sendings Security FireWall logs
//
function spbc_send_firewall_logs($api_key = false){
	
	global $spbc;
	
	$api_key = !empty($api_key) ? $api_key : $spbc->settings['spbc_key'];
	
	if(!empty($api_key)){

		FireWall::set_db_handler( new \CleantalkSP\SpbctWp\FireWall\FireWall_database() );
		$result = FireWall::send_logs($api_key);
		
		if(empty($result['error'])){
			$spbc->data['last_firewall_send'] = current_time('timestamp');
			$spbc->data['last_firewall_send_count'] = $result;
			$spbc->save('data');
			return $result;
		}else{
			return $result;
		}
	}
	
	return array(
		'error' => 'KEY_EMPTY'
	);
}

/**
 * Updating Security FireWall data
 *
 * @param bool $immediate
 * @param bool $api_key
 *
 * @return array|bool|int|mixed|string|string[]
 */
function spbc_security_firewall_update($immediate = false, $api_key = false){
	
	global $spbc;
	
	// Prevent start another update at a time
	if(
	    ! \CleantalkSP\Variables\Get::get('firewall_updating_id') &&
		$spbc->data['firewall_updating_id'] &&
	    time() - $spbc->data['firewall_updating_last_start'] < 60
	){
		return true;
	}
	
	// Check if the update performs right now. Blocks remote calls with different ID
	if( \CleantalkSP\Variables\Get::get('firewall_updating_id') &&
	    \CleantalkSP\Variables\Get::get('firewall_updating_id') !== $spbc->data['firewall_updating_id']
	) {
		return array( 'error' => 'FIREWALL_IS_UPDATING' );
	}
	
	// Set new update ID
	if( ! $spbc->data['firewall_updating_id'] || time() - $spbc->data['firewall_updating_last_start'] > 300 ){
		$spbc->data['firewall_updating_id'] = md5( rand( 0, 100000 ) );
		$spbc->data['firewall_updating_last_start'] = time();
		$spbc->save( 'data' );
	}
	
	$api_key = !empty($api_key) ? $api_key : $spbc->settings['spbc_key'];
	
	if(!empty($api_key)){
		
		$multifile_url     = isset($_GET['multifile_url'])    ? urldecode( $_GET['multifile_url'] )    : null;
		$url_count         = isset($_GET['url_count'])        ? urldecode( $_GET['url_count'] )        : null;
		$current_file_num  = isset($_GET['current_file_num']) ? urldecode( $_GET['current_file_num'] ) : null;
		
		// Get files URLs
		if( ! $multifile_url ) {
			
			//Reset previous entries count
			$spbc->data['firewall_entries'] = 0;
			$spbc->save('data');
			
			FireWall::set_db_handler( new \CleantalkSP\SpbctWp\FireWall\FireWall_database() );
			$result = FireWall::firewall_update__get_multifiles( $api_key );
			
			if( ! $spbc->doing_cron )
				$spbc->error_toggle( ! empty( $result['error'] ), 'firewall_update', ( ! empty( $result['error'] ) ? $result['error'] : '' ) );
			
			if( empty( $result['error'] ) ){
				
				$result__rc_check_website = \CleantalkSP\SpbctWp\Helper::http__request(
					get_option('siteurl'),
					array(
						'spbc_remote_call_token'  => md5( $api_key ),
						'spbc_remote_call_action' => 'update_security_firewall__write_base',
						'plugin_name'             => 'spbc',
						'test'                    => 'test',
					),
					array('get')
				);
				
				if( empty( $result__rc_check_website['error'] ) ){
					
					if ( $result__rc_check_website === 'OK' ){
						
						\CleantalkSP\SpbctWp\Helper::http__request(
							get_option( 'siteurl' ),
							array(
								'spbc_remote_call_token'  => md5( $api_key ),
								'spbc_remote_call_action' => 'update_security_firewall__write_base',
								'plugin_name'             => 'spbc',
								
								// Additional params
								'multifile_url'           => $result['multifile_url'],
								'url_count'               => count( $result['file_urls'] ),
								'current_file_num'        => 0,
								'firewall_updating_id'    => $spbc->data['firewall_updating_id'],
							),
							array( 'get', 'async' )
						);
						
						return true;
						
					}else
						return array( 'error' => 'WRONG_SITE_RESPONSE ACTION: update_security_firewall RESPONSE: ' . htmlspecialchars( substr(
								! is_string( $result__rc_check_website )
									? print_r( $result__rc_check_website, true )
									: $result__rc_check_website,
								0,
								400
							)));
				}else
					return array( 'error' => 'WRONG_SITE_RESPONSE ACTION: update_security_firewall ERROR: ' . $result__rc_check_website['error'] );
			}else
				return $result;
			
		// Writing to database
		}elseif( $current_file_num < $url_count ){
			
			$url_file_to_wrtie = str_replace( 'multifiles', $current_file_num, $multifile_url );
			
			FireWall::set_db_handler( new \CleantalkSP\SpbctWp\FireWall\FireWall_database() );
			$result = FireWall::firewall_update__write_to_db( $url_file_to_wrtie );
			
			if( empty($result['error']) && is_int($result) ) {
				
				//Increment firewall entries
				$spbc->data['firewall_entries'] += $result;
				$spbc->save( 'data' );
				
				$result__rc_check_website = \CleantalkSP\SpbctWp\Helper::http__request(
					get_option('siteurl'),
					array(
						'spbc_remote_call_token'  => md5( $api_key ),
						'spbc_remote_call_action' => 'check_website',
						'plugin_name'             => 'spbc',
					),
					array('get')
				);
				
				if( empty( $result__rc_check_website['error'] ) ) {
					
					if ( $result__rc_check_website === 'OK' ) {

						\CleantalkSP\SpbctWp\Helper::http__request(
							get_option( 'siteurl' ),
							array(
								'spbc_remote_call_token'  => md5( $api_key ),
								'spbc_remote_call_action' => 'update_security_firewall__write_base',
								'plugin_name'             => 'spbc',
								
								// Additional params
								'multifile_url'           => $multifile_url,
								'url_count'               => $url_count,
								'current_file_num'        => ++ $current_file_num,
								'firewall_updating_id'    => $spbc->data['firewall_updating_id'],
							),
							array( 'get', 'async' )
						);
						
						return true;
						
					}else
						return array( 'error' => 'WRONG_SITE_RESPONSE ACTION: update_security_firewall__write_base RESPONSE: ' . htmlspecialchars( substr(
							! is_string( $result__rc_check_website )
								? print_r( $result__rc_check_website, true )
								: $result__rc_check_website,
							0,
							400
							)));
				}else
					return array( 'error' => 'WRONG_SITE_RESPONSE ACTION: update_security_firewall__write_base ERROR: ' . $result__rc_check_website['error'] );
			}else
				return $result;
			
		// End of updating
		}else{
			
			FireWall::set_db_handler( new \CleantalkSP\SpbctWp\FireWall\FireWall_database() );
			$result = FireWall::firewall_update__write_to_db__exclusions();
			
			if( empty( $result['error'] ) && is_int($result) ) {
				
				//Increment firewall entries
				$spbc->data['firewall_entries'] += $result;
				$spbc->save( 'data' );
				
				//Files array is empty update sfw stats
				$spbc->data['last_firewall_updated'] = current_time('timestamp');
				$spbc->data['firewall_updating_id'] = null;
				$spbc->save('data');
				
				$spbc->error_delete( 'firewall_update', true );
				$spbc->error_delete( 'firewall_update', 'save_data', 'cron');
				
			}else
				return array('error' => 'FW: EXCLUSIONS: ' . $result['error'] );
		}
	}else
		return array('error' => 'KEY_EMPTY');
}

//
//	Drop Security FireWall data
//
function spbc_security_firewall_drop(){
	
	global $wpdb;
	
	$result = $wpdb->query('DELETE FROM `'. SPBC_TBL_FIREWALL_DATA .'`;');
	
	if($result !== false){
		return true;
	}else{
		return array('error' => 'DELETE_ERROR');
	}
}

function spbc_update(){
	
	global $wp_version;
	
	//Upgrade params
	$plugin      = 'security-malware-firewall/security-malware-firewall.php';
	$plugin_slug = 'security-malware-firewall';
	$title 	     = __('Update Plugin');
	$nonce 	     = 'upgrade-plugin_' . $plugin;
	$url 	     = 'update.php?action=upgrade-plugin&plugin=' . urlencode( $plugin );
	
	$prev_version = SPBC_VERSION;
	
	require_once( ABSPATH . 'wp-admin/includes/plugin.php' );
	require_once( ABSPATH . 'wp-admin/includes/class-wp-upgrader.php' );
	require_once( ABSPATH . 'wp-admin/includes/file.php' );
	require_once( ABSPATH . 'wp-admin/includes/misc.php' );
	
	require_once( SPBC_PLUGIN_DIR . 'lib/CleantalkSP/SpbctWp/SpbcUpgrader.php' );
	
	if (version_compare(PHP_VERSION, '5.6.0') >= 0 && version_compare($wp_version, '5.3') >= 0){
		include_once( SPBC_PLUGIN_DIR . 'lib/CleantalkSP/SpbctWp/SpbcUpgraderSkin.php' );
		$upgrader = new SpbcUpgrader( new SpbcUpgraderSkin( compact('title', 'nonce', 'url', 'plugin') ) );
	}else{
		include_once( SPBC_PLUGIN_DIR . 'lib/CleantalkSP/SpbctWp/SpbcUpgraderSkin_Deprecated.php' );
		$upgrader = new SpbcUpgrader( new SpbcUpgraderSkin_Deprecated( compact('title', 'nonce', 'url', 'plugin') ) );
	}
	
	$upgrader->upgrade($plugin);
	
	if($upgrader->spbc_result === 'OK'){
		
		$result = activate_plugins( $plugin );
		
		if(is_wp_error($result))
			die('FAIL '. json_encode(array('error' => 'COULD_NOT_ACTIVATE', 'wp_error' => $result->get_error_message())));
		if($result === false)
			die('FAIL '. json_encode(array('error' => 'COULD_NOT_ACTIVATE')));
		
		$httpResponseCode = SpbcHelper::http__request__get_response_code(get_option('siteurl'));
		
		if( $httpResponseCode != 200 ){
			
			// Rollback
			$rollback = new SpbcUpgrader( new SpbcUpgraderSkin( compact('title', 'nonce', 'url', 'plugin_slug', 'prev_version') ) );
			$rollback->rollback($plugin);
			
			$response = array(
				'error'           => 'BAD_HTTP_CODE',
				'http_code'       => $httpResponseCode,
				'output'          => substr(SpbcHelper::http__request__get_content(get_option('siteurl')), 0, 900),
				'rollback_result' => $rollback->spbc_result,
			);
			
			http_response_code(503);
			die('FAIL '.json_encode($response));
		}
		
		$plugin_data = get_plugin_data(__FILE__);
		$spbc_agent = 'wordpress-security-'.str_replace('.', '', $plugin_data['Version']);
		
		die('OK '.json_encode(array('agent' => $spbc_agent)));
		
	}else{
		die('FAIL '. json_encode(array('error' => $upgrader->spbc_result)));
	}
}

function spbc_update_postmeta_links($post_ID, $post = null, $update = null){
	delete_post_meta($post_ID, 'spbc_links_checked');
}

function spbc_update_postmeta_links__by_comment($id, $comment){
	$comment = get_comment($id);
	spbc_update_postmeta_links($comment->comment_post_ID);
}

// Install MU-plugin
function spbc_mu_plugin__install(){
	
	// If WPMU_PLUGIN_DIR is not exists -> create it
	if(!is_dir(WPMU_PLUGIN_DIR))
		mkdir(WPMU_PLUGIN_DIR);
	
	// Get data from info file and write it to new plugin file
	$file = '<?php' . PHP_EOL . file_get_contents(SPBC_PLUGIN_DIR . '/install/security-malware-firewall-mu.php');
	return @file_put_contents(WPMU_PLUGIN_DIR . '/0security-malware-firewall-mu.php', $file) ? true : false;
}

// Uninstall MU-plugin
function spbc_mu_plugin__uninstall(){
	if(file_exists(WPMU_PLUGIN_DIR . '/0security-malware-firewall-mu.php'))
		return unlink(WPMU_PLUGIN_DIR . '/0security-malware-firewall-mu.php') ? true : false;
	else
		return false;
}

function spbc_is_user_logged_in(){
	if(count($_COOKIE)){
		foreach($_COOKIE as $key => $val){
			if(preg_match('/wordpress_logged_in/', $key)){
				return true;
			}
		} unset($key, $val);
	}
	return false;
}

//Function to send logs
function spbc_send_logs($api_key = null){
	
	global $spbc, $wpdb;
	
	if($api_key == null){
		if(SPBC_WPMS && !is_main_site() && !$spbc->allow_custom_key)
			$api_key = $spbc->network_settings['spbc_key'];
		else
			$api_key = $spbc->settings['spbc_key'];
	}
	
	$rows = $wpdb->get_results("SELECT id, datetime, user_login, page, page_time, event, auth_ip, role, user_agent, browser_sign
		FROM ". SPBC_TBL_SECURITY_LOG
	                           .(SPBC_WPMS ? " WHERE blog_id = ".get_current_blog_id() : '')
	                           ." ORDER BY datetime DESC"
	                           ." LIMIT ".SPBC_SELECT_LIMIT.";");
	
	$rows_count = count($rows);
	
	if ($rows_count){
		
		foreach ($rows as $record) {
			$data[] = array(
				'log_id' => 		strval($record->id),
				'datetime' => 	    strval($record->datetime),
				'user_log' =>       strval($record->user_login),
				'event' => 		    strval($record->event),
				'auth_ip' => 	    strpos(':', $record->auth_ip) === false ? (int)sprintf('%u', ip2long($record->auth_ip)) : (string)$record->auth_ip,
				'page_url' => 		strval($record->page),
				'event_runtime' => 	strval($record->page_time),
				'role' => 	        strval($record->role),
			);
			
			// Adding user agent and browser sign if it's login event
			if(in_array(strval($record->event), array( 'login', 'login_2fa', 'login_new_device', 'logout', ))){
				$data[] = array_merge(
					array_pop($data),
					array(
						'user_agent' => $record->user_agent,
						'browser_signature' => $record->browser_sign,
					)
				);
			}
		}
		
		$result = SpbcAPI::method__security_logs($api_key, $data);
		
		if(empty($result['error'])){
			
			//Clear local table if it's ok.
			if($result['rows'] == $rows_count){
				
				if(SPBC_WPMS){
					$wpdb->query('DELETE
						FROM ' . SPBC_TBL_SECURITY_LOG.
					             (empty($spbc->allow_custom_key) ? '' : ' WHERE blog_id = '.get_current_blog_id())
					);
				}else{
					$wpdb->query('DELETE FROM '. SPBC_TBL_SECURITY_LOG);
				}
				$result = $rows_count;
				
			}else{
				$result = array(
					'error' => sprintf(__('Sent: %d. Confirmed receiving of %d rows.', 'security-malware-firewall'), $rows_count, intval($result['rows']))
				);
			}
		}
	}else{
		$result = array(
			'error' => 'NO_LOGS_TO_SEND'
		);
	}
	
	global $spbc_cron;
	if(!empty($spbc_cron)){
		if(empty($result['error'])){
			$spbc->data['logs_last_sent'] = current_time('timestamp');
			$spbc->data['last_sent_events_count'] = $result;
		}
	}
	
	return $result;
}

// The functions check to check an account
// Execute only via cron (on the main blog)
function spbc_access_key_notices($spbc_key = null){
	
	global $spbc;
	
	if($spbc->key_is_ok){
		
		if(empty($spbc_key)){
			$spbc_key = SPBC_WPMS && !is_main_site() && !$spbc->allow_custom_key
				? (!empty($spbc->network_settings['spbc_key']) ? $spbc->network_settings['spbc_key'] : false)
				: (!empty($spbc->settings['spbc_key']) ? $spbc->settings['spbc_key'] : false);
		}
		
		if($spbc_key){
			
			$result = SpbcAPI::method__notice_paid_till($spbc_key, preg_replace('/http[s]?:\/\//', '', get_option('siteurl'), 1), 'security');
			
			if(empty($result['error'])){
				
				if( $result['valid'] ){
					
					$spbc->data['notice_show']	      = $result['show_notice'];
					$spbc->data['notice_renew']       = $result['renew'];
					$spbc->data['notice_trial']       = $result['trial'];
					$spbc->data['notice_auto_update'] = isset($result['show_auto_update_notice']) ? $result['show_auto_update_notice'] : 0;
					$spbc->data['service_id']         = $result['service_id'];
					$spbc->data['moderate']	          = $result['moderate'];
					$spbc->data['auto_update_app ']   = isset($result['auto_update_app']) ? $result['auto_update_app'] : 0;
					$spbc->data['license_trial']      = isset($result['license_trial']) ? $result['license_trial'] : 0;
					$spbc->data['account_name_ob']    = isset($result['account_name_ob']) ? $result['account_name_ob'] : '';
					
					$spbc->save('data');
					
					if($spbc->data['notice_renew'] == 1)
						SpbcCron::updateTask('access_key_notices', 'spbc_access_key_notices', 3600,  time()+3500);
					if($spbc->data['notice_trial'] == 0)
						SpbcCron::updateTask('access_key_notices', 'spbc_access_key_notices', 86400, time()+86400);
					
					return true;
					
				}else
					return array('error' =>'KEY_IS_NOT_VALID');
			}else
				return $result;
		}else{
			return array('error' =>'KEY_IS_EMPTY');
		}
	}else
		return array('error' =>'KEY_IS_NOT_OK');
}

function spbc_PHP_logs__detect_EOL_type($file, $eol_type = null){
	
	if(file_exists($file)){
		
		if(is_readable($file)){
			
			if(filesize($file)){
				
				$fd = @fopen($file, 'r');
				
				if($fd){
					
					$string = fgets($fd);
					$eols = array(
						"\n\r",
						"\r\n",
						"\n",
						"\r",
					);
					$cur_cnt = 0;
					foreach($eols as $eol){
						$count = substr_count($string, $eol);
						if($count > $cur_cnt){
							$cur_cnt = $count;
							$eol_type = $eol;
						}
					}
				}
			}
		}
	}
	
	return $eol_type;
}

function spbc_PHP_logs__collect($last_log_sent) {
	
	$logs = array();
	$start_timestamp = time();
	
	
	// Try to get log from wp-content/debug/log if default file is not accessible
	$file = ini_get('error_log');
	$file = file_exists($file) && is_readable($file)
		? $file
		: WP_CONTENT_DIR . '/debug.log';
	
	if(file_exists($file)){
		
		if(is_readable($file)){
			
			// Return if file is empty
			if(!filesize($file))
				return array();
			
			$fd = @fopen($file, 'rb');
			
			if($fd){
				
				$eol = spbc_PHP_logs__detect_EOL_type($file);
				
				for(
					// Initialization
					$fsize = filesize($file),  $offset = 1024*5, $position = $fsize - $offset,
					$max_log_size = 1024*1024*1, $max_read_size = 1024*1024*4,
					$log_size = 0, $read = 0,
					$log_count = 0;
					// Conditions
					$log_size < $max_log_size && // Max usefull data
					$offset === 1024*5 &&        // End of file
					$read < $max_read_size &&    // Max read depth
					$log_count < 3500 &&
					time() < $start_timestamp + 25;
					// Iteartion adjustments
					$position -= $offset
				){
					$offset   = $position < 0 ? $offset + $position : $offset;
					$position = $position < 0 ? 0                   : $position;
					
					// Set pointer to $it * $offset from the EOF. Or 0 if it's negative.
					fseek($fd, $position);
					
					// Read $offset bytes
					$it_logs = fread($fd, $offset);
					
					// Clean to first EOL, splitting to array by PHP_EOL.
					if($position != 0){
						$position_adjustment = strpos($it_logs, $eol);
						$position += $position_adjustment + 1;
						$it_logs = substr($it_logs, $position_adjustment);
					}
					
					$read += strlen($it_logs);
					$it_logs = explode($eol, $it_logs);
					
					// Filtering and parsing
					foreach($it_logs as $log_line){
						if(spbc_PHP_logs__filter($log_line, $last_log_sent)){
							$log_size += strlen($log_line);
							$log_count++;
							$parsed_log_line = spbc_PHP_logs__parse_line($log_line);
							if($parsed_log_line)
								$logs[] = $parsed_log_line;
						}
					}
				}
				
				return $logs;
				
			}else
				return array('error' =>'COULDNT_OPEN_LOG_FILE');
		}else
			return array('error' =>'LOG_FILE_IS_UNACCESSIBLE');
	}else
		return array('error' =>'LOG_FILE_NOT_EXISTS');
}

function spbc_PHP_logs__filter($line, $php_logs_last_sent) {
	
	$line = trim($line);
	
	if(!empty($line)){
		preg_match('/^\[(.*?\s\d\d:\d\d:\d\d.*?)]/', $line, $matches);
		if(isset($matches[1]) && strtotime($matches[1]) >= $php_logs_last_sent){
			if(preg_match('/^\[(.*?)\]\s+PHP\s(Warning|Fatal|Notice|Parse)/', $line)){
			
			}else
				$line = false;
		}else
			$line = false;
	}else
		$line = false;
	
	return $line;
}

function spbc_PHP_logs__parse_line($line) {
	if(preg_match('/^\[(.*?)\]\s((.*?):\s+(.+))$/', $line, $matches)){
		return array(
			date('Y-m-d H:i:s', strtotime($matches[1])),
			$matches[2],
		);
	}
}

function spbc_PHP_logs__send() {
	
	global $spbc;
	
	if( empty( $spbc->settings['backend_logs_enable'] ) || empty($spbc->settings['spbc_key']) )
		return true;
	
	$logs = spbc_PHP_logs__collect($spbc->data['last_php_log_sent']);
	
	if(empty($logs['error'])){
		
		if(!empty($logs)){
			
			$result = SpbcAPI::method__security_backend_logs($spbc->settings['spbc_key'], $logs);
			
			if(empty($result['error'])){
				if(isset($result['total_logs_found'])){
					if($result['total_logs_found'] == count($logs)){
						$spbc->data['last_php_log_sent'] = time();
						$spbc->data['last_php_log_amount'] = $result['total_logs_found'];
						$spbc->save('data');
						return true;
					}else
						return array('error' => 'LOGS_COUNT_DOES_NOT_MATCH');
				}else
					return array('error' => 'LOGS_COUNT_IS_EMPTY');
			}else
				return $result;
		}else
			return true;
	}else
		return $logs;
	
	return true;
}

function spbc_check_ajax_referer($action = -1, $query_arg = false, $die = true){
	if(function_exists('check_ajax_referer')){
		check_ajax_referer($action, $query_arg, $die);
	}
}

function spbc_test_connection(){
	$url_to_test = array(
		'https://apix1.cleantalk.org',
		'https://apix2.cleantalk.org',
		'https://apix3.cleantalk.org',
	);
	
	foreach($url_to_test as $url){
		$start = microtime(true);
		$result = SpbcHelper::http__request__get_content($url);
		$exec_time = microtime(true) - $start;
		$out[$url] = array(
			'result' => $result,
			'exec_time' => $exec_time,
			'error' => !empty($result['error']) ? $result['error']	: 'OK',
		) ;
	}
	return $out;
}

function spbc_sync(){
	
	spbc_check_ajax_referer('spbc_secret_nonce', 'security');
	
	global $spbc;
	
	// If key provided by super admin
	if ( $spbc->allow_custom_key || is_main_site() ) {
		
		// Checking account status
		$result = SpbcAPI::method__notice_paid_till(
			$spbc->settings['spbc_key'],
			preg_replace( '/http[s]?:\/\//', '', get_option( 'siteurl' ), 1 ), // Site URL
			'security'
		);

		// Passed without errors
		if ( empty( $result['error'] ) ) {
			
			// Key is valid
			if ( $result['valid'] ) {
				
				if ( isset( $result['user_token'] ) ) {
					$spbc->data['user_token'] = $result['user_token'];
				}
				$spbc->data['notice_show']      = $result['show_notice'];
				$spbc->data['notice_renew']     = $result['renew'];
				$spbc->data['notice_trial']     = $result['trial'];
				$spbc->data['auto_update_app']  = isset( $result['show_auto_update_notice'] ) ? $result['show_auto_update_notice'] : 0;
				$spbc->data['service_id']       = $result['service_id'];
				$spbc->data['moderate']         = $result['moderate'];
				$spbc->data['auto_update_app '] = isset( $result['auto_update_app'] ) ? $result['auto_update_app'] : 0;
				$spbc->data['license_trial']    = isset( $result['license_trial'] ) ? $result['license_trial'] : 0;
				$spbc->data['account_name_ob']  = isset( $result['account_name_ob'] ) ? $result['account_name_ob'] : '';
				
			} else {
				$spbc->data['key_is_ok'] = false;
				$spbc->error_add( 'apikey', sprintf( __( 'Key is not valid. Key: %s.', 'security-malware-firewall' ), $spbc->settings['spbc_key'] ) );
			}
			
		} else {
			$spbc->data['key_is_ok'] = false;
			$spbc->error_add( 'apikey', $result );
		}
	}
	
	// Sending logs.
	$result = spbc_send_logs($spbc->settings['spbc_key']);
	if(empty($result['error'])){
		$spbc->data['logs_last_sent'] = current_time('timestamp');
		$spbc->data['last_sent_events_count'] = $result;
		$spbc->error_delete('send_logs');
	}else{
		$spbc->error_add('send_logs', $result);
	}

	//Reset last call of update_sec_fw
	$spbc->remote_calls['update_security_firewall']['last_call'] = 0;
	$spbc->save('remote_calls');
	
	// Updating FW
	$result = spbc_security_firewall_update(true, $spbc->settings['spbc_key']);
	if(empty($result['error'])){
		$spbc->data['last_firewall_updated'] = current_time('timestamp');
		$spbc->data['firewall_entries'] = $result;
		$spbc->error_delete('firewall_update');
	}else{
		$spbc->error_add('firewall_update', $result);
	}
	
	// Sending FW logs
	$result = spbc_send_firewall_logs($spbc->settings['spbc_key']);
	if(empty($result['error'])){
		$spbc->data['last_firewall_send'] = current_time('timestamp');
		$spbc->data['last_firewall_send_count'] = $result;
		$spbc->error_delete('send_firewall_logs');
	}else{
		$spbc->error_add('send_firewall_logs', $result);
	}
	
	// If key provided by super admin
	if ( is_main_site() ){
		// Updating signtaures
		$result = spbc_scanner__signatures_update();
		empty($result['error'])
			? $spbc->error_delete('scanner_update_signatures', 'save')
			: $spbc->error_add('scanner_update_signatures', $result);
	}
	
	$spbc->save('data');
	
	die( json_encode( array( 'success' => true ) ) );
}

// The functions sends daily reports about attempts to login.
function spbc_send_daily_report($skip_data_rotation = false) {
	
	if(!function_exists('wp_mail')){
		add_action('plugins_loaded', 'spbc_send_daily_report');
		return;
	}
	
	global $spbc, $wpdb, $spbc_tpl;
	
	//If key is not ok, send daily report!
	if( ! $spbc->key_is_ok ){
		
		include_once(SPBC_PLUGIN_DIR . 'templates/spbc_send_daily_report.php');
		
		// Hours
		$report_interval = 24 * 7;
		
		$admin_email = get_option('admin_email');
		if (!$admin_email) {
			error_log(sprintf('%s: can\'t send the Daily report because of empty Admin email. File: %s, line %d.',
				SPBC_NAME,
				__FILE__,
				__LINE__
			));
			return false;
		}
		
		$sql = sprintf('SELECT id,datetime,user_login,event,auth_ip,page,page_time
			FROM %s WHERE datetime between now() - interval %d hour and now();',
			SPBC_TBL_SECURITY_LOG,
			$report_interval
		);
		$rows = $wpdb->get_results($sql);
		foreach ($rows as $k => $v) {
			if (isset($v->datetime))
				$v->datetime_ts = strtotime($v->datetime);
			$rows[$k] = $v;
		}
		usort($rows, "spbc_usort_desc");
		
		$record_datetime = time();
		$events = array();
		$auth_failed_events = array();
		$invalid_username_events = array();
		$auth_failed_count = 0;
		$invalid_username_count = 0;
		$ips_data = '';
		foreach ($rows as $record) {
			if (strtotime($record->datetime) > $record_datetime) {
				$record_datetime = strtotime($record->datetime);
			}
			$events[$record->event][$record->user_login][] = array(
				'datetime' => $record->datetime,
				'auth_ip' => $record->auth_ip,
				'user_login' => $record->user_login,
				'page' => ($record->page ? $record->page : '-'),
				'page_time' => ($record->page_time ? $record->page_time : 'Unknown')
			);
			
			switch ($record->event) {
				case 'auth_failed':
					$auth_failed_events[$record->user_login][$record->auth_ip] = array(
						'attempts' => isset($auth_failed_events[$record->user_login][$record->auth_ip]['attempts']) ? $auth_failed_events[$record->user_login][$record->auth_ip]['attempts'] + 1 : 1,
						'auth_ip' => $record->auth_ip,
						'user_login' => $record->user_login
					);
					$auth_failed_count++;
					break;
				case 'invalid_username':
					$invalid_username_events[$record->user_login][$record->auth_ip] = array(
						'attempts' => isset($invalid_username_events[$record->user_login][$record->auth_ip]['attempts']) ? $invalid_username_events[$record->user_login][$record->auth_ip]['attempts'] + 1 : 1,
						'auth_ip' => $record->auth_ip,
						'user_login' => $record->user_login
					);
					$invalid_username_count++;
					break;
			}
			if ($ips_data != '') {
				$ips_data .= ',';
			}
			$ips_data .= $record->auth_ip;
		}
		
		$ips_c = spbc_get_countries_by_ips($ips_data);
		
		$event_part = '';
		$auth_failed_part = sprintf("<p style=\"color: #666;\">%s</p>",
			_("0 brute force attacks have been made for past day.")
		);
		if ($auth_failed_count) {
			foreach ($auth_failed_events as $e) {
				$ip_part = '';
				foreach ($e as $ip) {
					$country_part = spbc_report_country_part($ips_c, $ip['auth_ip']);
					$ip_part .= sprintf("<a href=\"https://cleantalk.org/blacklists/%s\">%s</a>, #%d, %s<br />",
						$ip['auth_ip'],
						$ip['auth_ip'],
						$ip['attempts'],
						$country_part
					);
				}
				$event_part .= sprintf($spbc_tpl['event_part_tpl'],
					$ip['user_login'],
					$ip_part
				);
			}
			$auth_failed_part = sprintf($spbc_tpl['auth_failed_part'],
				$event_part
			);
		}
		
		$invalid_username_part= sprintf("<p style=\"color: #666;\">%s</p>",
			_('0 brute force attacks have been made for past day.')
		);
		
		if ($invalid_username_count) {
			foreach ($invalid_username_events as $e) {
				$ip_part = '';
				foreach ($e as $ip) {
					$country_part = spbc_report_country_part($ips_c, $ip['auth_ip']);
					$ip_part .= sprintf("<a href=\"https://cleantalk.org/blacklists/%s\">%s</a>, #%d, %s<br />",
						$ip['auth_ip'],
						$ip['auth_ip'],
						$ip['attempts'],
						$country_part
					);
				}
				$event_part .= sprintf($spbc_tpl['event_part_tpl'],
					$ip['user_login'],
					$ip_part
				);
			}
			$invalid_username_part = sprintf($spbc_tpl['auth_failed_part'],
				$event_part
			);
		}
		
		$logins_part = sprintf("<p style=\"color: #666;\">%s</p>",
			_('0 users have been logged in for past day.')
		);
		if (isset($events['login']) && count($events['login'])) {
			$event_part = '';
			foreach ($events['login'] as $user_login => $e) {
				$l_part = '';
				foreach ($e as $e2) {
					$country_part = spbc_report_country_part($ips_c, $e2['auth_ip']);
					$l_part .= sprintf("%s, <a href=\"https://cleantalk.org/blacklists/%s\">%s</a>, %s<br />",
						date("M d Y H:i:s", strtotime($e2['datetime'])),
						$e2['auth_ip'],
						$e2['auth_ip'],
						$country_part
					);
				}
				$event_part .= sprintf($spbc_tpl['event_part_tpl'],
					$user_login,
					$l_part
				);
			}
			$logins_part = sprintf($spbc_tpl['logins_part_tpl'],
				$event_part
			);
		}
		
		$title_main_part = _('Daily security report');
		$subject = sprintf('%s %s',
			parse_url(get_option('siteurl'),PHP_URL_HOST),
			$title_main_part
		);
		
		$message_anounce = sprintf(_('%s brute force attacks or failed logins, %d successful logins.'),
			number_format($auth_failed_count + $invalid_username_count, 0, ',', ' '),
			isset($events['login']) ? count($events['login']) : 0
		);
		
		
		$message = sprintf($spbc_tpl['message_tpl'],
			$spbc_tpl['message_style'],
			$title_main_part,
			$message_anounce,
			$auth_failed_part,
			$invalid_username_part,
			$logins_part,
			SPBC_NAME
		);
		
		
		$headers = array('Content-Type: text/html; charset=UTF-8');
		wp_mail(
			$admin_email,
			$subject,
			$message,
			$headers
		);
		
		if (!$skip_data_rotation) {
			$sql = sprintf("delete from %s where datetime <= '%s';",
				SPBC_TBL_SECURITY_LOG,
				date("Y-m-d H:i:s", $record_datetime)
			);
			$wpdb->query($sql);
		};
	}
	
	return null;
}