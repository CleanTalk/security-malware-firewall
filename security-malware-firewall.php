<?php
/*
Plugin Name: Security by CleanTalk 
Plugin URI: https://wordpress.org/plugins/security-malware-firewall/ 
Description: The plugin temporary restricts attempts to login to WordPress backend. The restriction is rising for a few seconds if an account failed to login.  
Author: CleanTalk Security
Version: 2.17
Author URI: https://cleantalk.org
Text Domain: security-malware-firewall
Domain Path: /i18n
*/

// Prevent direct call
if(!defined('WPINC')) die('Not allowed!');

// Common params
define('SPBC_NAME',    'Security by CleanTalk');
define('SPBC_VERSION', '2.17');
define('SPBC_AGENT',   'wordpress-security-217');
define('SPBC_API_URL', 'https://api.cleantalk.org');        //Api URL
define('SPBC_PATH',             plugins_url('', __FILE__)); //HTTP path.   Plugin root folder without '/'.
define('SPBC_PLUGIN_DIR',       plugin_dir_path(__FILE__)); //System path. Plugin root folder with '/'.
define('SPBC_PLUGIN_BASE_NAME', plugin_basename(__FILE__)); //Plugin base name.
define('SPBC_CASERT_PATH',      file_exists(ABSPATH.WPINC.'/certificates/ca-bundle.crt') ? ABSPATH.WPINC.'/certificates/ca-bundle.crt' : ''); // SSL Serttificate path

// Options names
define('SPBC_LOGIN_ATTEMPTS',   'spbc_login_attempts');   //Option name with login attempts.
define('SPBC_DATA',             'spbc_data');             //Option name with different plugin data.
define('SPBC_SETTINGS',         'spbc_settings');         //Option name with plugin settings.
define('SPBC_NETWORK_SETTINGS', 'spbc_network_settings'); //Option name with plugin network settings.
define('SPBC_DEBUG',            'spbc_debug');            //Option name with a debug data. Empty by default.

// Different params
define('SPBC_REMOTE_CALL_SLEEP',    10); //Minimum time between remote call
define('SPBC_LAST_ACTIONS_TO_VIEW', 20); //Nubmer of last actions to show in plugin settings page.

// Auth params
define('SPBC_MAX_FAILS',   '5');    // Limit of failed attempts before restrict access to backend. 
define('SPBC_CALC_PERIOD', '3600'); // Time interval to count failed attempts. 
define('SPBC_SLEEP_USUAL', '3');    // Give a delay before attempts to login.
define('SPBC_SLEEP_LONG',  '10');   // Give a delay before attempts to login.

// DataBase params
global $wpdb;

define('SPBC_TBL_SECURITY_LOG',      $wpdb->base_prefix . 'spbc_auth_logs');     // Table with security logs.
define('SPBC_TBL_FIREWALL_DATA',  $wpdb->base_prefix . 'spbc_firewall_data'); // Table with firewall data.
define('SPBC_TBL_FIREWALL_LOG',   $wpdb->base_prefix . 'spbc_firewall_logs'); // Table with firewall logs.
define('SPBC_TBL_SCAN_FILES',   $wpdb->base_prefix . 'spbc_scan_results');  // Table with scan results.
define('SPBC_TBL_SCAN_LINKS', $wpdb->base_prefix . 'spbc_scan_links_logs');

define('SPBC_SELECT_LIMIT',   5000);                 // Select limit for logs.
define('SPBC_WRITE_LIMIT',    5000);                 // Write limit for firewall data.

// Multisite
define('SPBC_WPMS', (is_multisite() ? true : false)); // WMPS is enabled

// Scanner params for background scanning
define('SPBC_SCAN_SURFACE_AMOUNT',  1000); // Surface scan amount for 1 iteration
define('SPBC_SCAN_SURFACE_PERIOD',  30);   // Surface scan call period
define('SPBC_SCAN_MODIFIED_AMOUNT', 5);    // Deep scan amount for 1 iteration
define('SPBC_SCAN_MODIFIED_PERIOD', 30);   // Deep scan call period
define('SPBC_SCAN_LINKS_AMOUNT', 10);      // Links scan amount for 1 iteration
define('SPBC_SCAN_LINKS_PERIOD', 30);      // Links scan call period

// Needed libraries.
require_once(SPBC_PLUGIN_DIR . 'lib/spbc-php-patch.php');
require_once(SPBC_PLUGIN_DIR . 'lib/SpbcHelper.php');   // Helper   ::SpbcHelper
require_once(SPBC_PLUGIN_DIR . 'lib/SpbcFireWall.php'); // FireWall ::SpbcFireWall
require_once(SPBC_PLUGIN_DIR . 'lib/SpbcCron.php');     // Cron     ::SpbcCron
require_once(SPBC_PLUGIN_DIR . 'lib/SpbcState.php');    // State class

// Scanner libs
require_once(SPBC_PLUGIN_DIR . 'lib/SpbcScaner.php');       // Common analisys
require_once(SPBC_PLUGIN_DIR . 'lib/SpbcScannerLinks.php'); // Outbound links analisys
require_once(SPBC_PLUGIN_DIR . 'lib/SpbcScannerH.php');     // Heuristic analisys

// Misc libs
require_once(SPBC_PLUGIN_DIR . 'lib/SpbcListTable.php'); // Table lib
require_once(SPBC_PLUGIN_DIR . 'inc/spbc-tools.php');   // Different helper functions
require_once(SPBC_PLUGIN_DIR . 'inc/spbc-scanner.php'); 

if(!class_exists('CleantalkTools'))
	require_once(SPBC_PLUGIN_DIR . 'lib/CleantalkTools.php');    // Differnt tools for debug

// ArrayObject with settings and other global varables
global $spbc;
$spbc = new SpbcState('spbc', array('settings', 'data', 'debug', 'installing'), SPBC_WPMS);

// Setting SPBC statuses
$spbc->allow_custom_key = SPBC_WPMS && !empty($spbc->network_settings['allow_custom_key']) ? true : false;

// Different
if(is_main_site() || !empty($spbc->allow_custom_key)){
	
	//Account params
	$spbc->key_is_ok    = !empty($spbc->data['key_is_ok'])       ? 1                              : 0;
	$spbc->user_token   = !empty($spbc->data['user_token'])      ? $spbc->data['user_token']      : '';
	$spbc->service_id   = !empty($spbc->data['service_id'])      ? $spbc->data['service_id']      : 0;
	$spbc->moderate     = !empty($spbc->data['moderate'])        ? $spbc->data['moderate']        : 0;
	$spbc->auto_update  =  isset($spbc->data['auto_update_app']) ? $spbc->data['auto_update_app'] : 0;

	// Notices flags
	$spbc->show_notice        = !empty($spbc->data['notice_show'])         ? 1 : 0;
	$spbc->renew              = !empty($spbc->data['notice_renew'])        ? 1 : 0;
	$spbc->trial              = !empty($spbc->data['notice_trial'])        ? 1 : 0;
	$spbc->notice_auto_update = !empty($spbc->data['notice_auto_update'])  ? 1 : 0;
	$spbc->were_updated       = !empty($spbc->data['notice_were_updated']) ? 1 : 0;
	
}else{
	//Account params
	$spbc->key_is_ok    = (!empty($spbc->network_settings['key_is_ok'])  ? 1 : 0);
	$spbc->user_token   = (!empty($spbc->network_settings['user_token']) ? $spbc->network_settings['user_token'] : '');
	$spbc->service_id   = (!empty($spbc->network_settings['service_id']) ? $spbc->network_settings['service_id'] : 0);
	$spbc->moderate     = (!empty($spbc->network_settings['moderate'])   ? $spbc->network_settings['moderate']   : 0);
	
	// Notices flags
	$spbc->show_notice  = 0;
	$spbc->renew        = 0;
	$spbc->trial        = 0;
	$spbc->were_updated = 0;
}

// Only for lcoal/main site
if(is_main_site()){
	// Scanner
	$spbc->scaner_enabled = true;
	$spbc->scaner_status  = $spbc->moderate                        ? true : false;
	$spbc->scaner_warning = !empty($spbc->data['scaner_warning'])  ? true : false;
	
	// Traffic Control
	$spbc->fw_enabled      = true;
	$spbc->tc_enabled      = !empty($spbc->settings['traffic_control_enabled']) ? true : false;
	$spbc->tc_status       = $spbc->moderate                                    ? true : false;
}else{
	$spbc->scaner_enabled  = false;
	$spbc->fw_enabled      = false;
	$spbc->tc_enabled      = false;
	$spbc->tc_status       = false;
}

// Temporary forbid scanner for WPMS
if(SPBC_WPMS){
	$spbc->scaner_enabled = false;
	$spbc->scaner_status  = false;
	$spbc->scaner_warning = false;
}

// Update plugin's data to current version
spbc_update_actions();

	//First start
	if($spbc->settings && $spbc->key_is_ok){
		
	if(!is_admin() && !defined('DOING_AJAX')){
		
		// Remote calls
		if(isset($_GET['spbc_remote_call_token'], $_GET['spbc_remote_call_action'], $_GET['plugin_name']) && in_array($_GET['plugin_name'], array('security','spbc')))
			spbc_remote_call_perform();
		
	}
	
	if((!is_admin() &&
		!defined('DOING_AJAX')) ||
		(defined('DOING_AJAX') && !empty($_FILES)) 
	){

		// FireWall
		spbc_firewall__check();

	}
	
}

// Logged hooks
register_activation_hook( __FILE__,   'spbc_activation' );
register_deactivation_hook( __FILE__, 'spbc_deactivation' );

// Auth hooks
add_filter('authenticate',   'spbc_authenticate',            20, 3); // Hooks for authentificate
add_action('login_errors',   'spbc_fix_error_messages',      99999); // Filters error message
add_action('wp_logout',      'spbc_wp_logout',               1);    // Hooks for authentificate
add_action('login_footer',   'spbc_login_form_notification', 1);    // Hook for registration form notification
add_action('plugins_loaded', 'spbc_plugin_loaded',           1);    // Main hook

// Posts hooks
add_action('wp_insert_post',    'spbc_update_postmeta_links',             10, 3 );
add_action('wp_insert_comment', 'spbc_update_postmeta_links__by_comment', 10, 2 );

// Cron
global $spbc_cron; // Letting know functions that they are running under spbc_cron
$spbc_cron = new SpbcCron();
$spbc_cron->checkTasks();
if(!empty($spbc_cron->tasks_to_run) && ($spbc->data['cron']['running'] === false || !empty($spbc->data['errors']['cron']))){
	$spbc->data['cron']['running'] = true;
	$spbc->save('data');
	$spbc_cron->runTasks();
	$spbc->data['cron']['running'] = false;
	$spbc->save('data');
}
unset($spbc_cron);

if (is_admin() || is_network_admin()) {
	
	// Async loading for JavaScript
	add_filter('script_loader_tag', 'spbc_admin_add_script_attribute', 10, 3);
	
    require_once(SPBC_PLUGIN_DIR. 'inc/spbc-admin.php');
	require_once(SPBC_PLUGIN_DIR . 'templates/spbc_settings_main.php'); // Templates for settings pgae

	add_action('admin_init',            'spbc_activation_redirect', 1); // Redirect after activation
    add_action('admin_init',            'spbc_admin_init', 1, 1);       // Main admin hook
    add_action('admin_menu',            'spbc_admin_add_page');         // Admin pages
	add_action('network_admin_menu',    'spbc_admin_add_page');         // Network admin pages
	add_action('admin_enqueue_scripts', 'spbc_enqueue_scripts');        // Scripts
    
	if(!defined( 'DOING_AJAX' )){
		add_action('admin_notices',         'spbc_admin_notice_message');
		add_action('network_admin_notices', 'spbc_admin_notice_message');
	}
	
	// Customize row with the plugin on plugins list page.
    if((isset($pagenow) && $pagenow == 'plugins.php') || @strpos($_SERVER['REQUEST_URI'],'plugins.php')!==false) {
		add_filter('plugin_action_links_' . SPBC_PLUGIN_BASE_NAME,               'spbc_plugin_action_links', 10, 2);
		add_filter('network_admin_plugin_action_links_' . SPBC_PLUGIN_BASE_NAME, 'spbc_plugin_action_links', 10, 2);
		add_filter('plugin_row_meta',                                            'spbc_plugin_links_meta',   10, 2);
    }
	
}

function spbc_update_actions(){
	
	global $spbc;
	
	//Update logic
	$current_version = $spbc->data['plugin_version'];
	
	if($current_version != SPBC_VERSION){
		if(is_main_site()){
			require_once(SPBC_PLUGIN_DIR . 'inc/spbc-updater.php');
			spbc_run_update_actions($current_version, SPBC_VERSION);
		}
		$spbc->data['notice_were_updated'] = (isset($spbc->data['plugin_version']) ? true : false); //Flag - plugin were updated
		$spbc->data['plugin_version'] = SPBC_VERSION;
		$spbc->save('data');
		$spbc->save('settings'); // Saving default settings
	}
}

function spbc_remote_call_perform(){
	
	global $spbc;
	
	// Comparing with cleantalk's IP
	$spbc_remote_ip = SpbcHelper::ip_get(array('real'));
	
	if($spbc_remote_ip !== false){
		
		$resolved = gethostbyaddr($spbc_remote_ip);
		$self_called = $spbc_remote_ip == $_SERVER['SERVER_ADDR'] ? true : false;
		
		if($resolved !== false){
			
			if(preg_match('/cleantalk\.org$/', $resolved) === 1 || $resolved === 'back' || $self_called){
				
				if(!isset($spbc->data['last_remote_call']) || (isset($spbc->data['last_remote_call']) && time() - $spbc->data['last_remote_call'] > SPBC_REMOTE_CALL_SLEEP)){
					
					$spbc->data['last_remote_call'] = time();
					$spbc->save('data');
					
					if($_GET['spbc_remote_call_token'] == md5($spbc->settings['spbc_key'])){
						
						// Update FireWall data
						if($_GET['spbc_remote_call_action'] == 'update_security_firewall'){
							$result = spbc_security_firewall_update($spbc->settings['spbc_key'], true);
							die(empty($result['error']) ? 'OK' : 'FAIL '.json_encode(array('error' => $result['error_string'])));
							
						// Close renew banner
						}elseif($_GET['spbc_remote_call_action'] == 'close_renew_banner'){
							$spbc->data['notice_show'] = 0;
							$spbc->save('data');
							// Updating cron task
							SpbcCron::updateTask('access_key_notices', 'spbc_access_key_notices', 86400);
							die('OK');
						
						// Drop FireWall data
						}elseif($_GET['spbc_remote_call_action'] == 'drop_security_firewall'){
							$result = spbc_security_firewall_drop();
							die(empty($result['error']) ? 'OK' : 'FAIL '.json_encode(array('error' => $result['error_string'])));
						
						// Update plugin
						}elseif($_GET['spbc_remote_call_action'] == 'update_plugin'){
							add_action('template_redirect', 'spbc_update', 1);
						
						// Download qurantine file
						}elseif($_GET['spbc_remote_call_action'] == 'q_download'){
							$result = spbc_scanner_file_download(true, $_GET['file_id']);
							if(empty($result['error'])){
								header('Content-Type: application/octet-stream');
								header('Content-Disposition: attachment; filename='.$result['file_name']);
							}
							die(empty($result['error']) 
								? $result['file_content']
								: 'FAIL '.json_encode(array('error' => $result['error_string'])));
						}else
							die('FAIL '.json_encode(array('error' => 'UNKNOWN_ACTION')));
					}else
						die('FAIL '.json_encode(array('error' => 'WRONG_TOKEN')));
				}else
					die('FAIL '.json_encode(array('error' => 'TOO_MANY_ATTEMPTS')));
			}else
				die('FAIL '.json_encode(array('error' => 'WRONG_IP')));
		}else
			die('FAIL '.json_encode(array('error' => 'COULDNT_RESOLVE_IP')));
	}else
		die('FAIL '.json_encode(array('error' => 'COULDNT_RECONIZE_IP')));
}

function spbc_firewall__check(){
	
	global $spbc;
	
	$firewall = new SpbcFireWall(array(
		'tc_enabled'     => $spbc->settings['traffic_control_enabled'],
		'tc_limit'       => $spbc->settings['traffic_control_autoblock_amount'],
		'logged_in'      => spbc_is_user_logged_in(),
		'waf_enabled'    => $spbc->settings['waf_enabled'],
		'waf_xss_check'  => $spbc->settings['waf_xss_check'],
		'waf_sql_check'  => $spbc->settings['waf_sql_check'],
		'waf_file_check' => $spbc->settings['waf_file_check'],
	));
	$firewall->ip_array    = (array)SpbcFireWall::ip_get(array('real'));
	
	// Skip the check
	// Set skip test cookie
	if(!empty($_GET['access'])){
		$apbct_settings = get_option('cleantalk_settings');
		$apbct_key = !empty($apbct_settings['apikey']) ? $apbct_settings['apikey'] : false;
		if(($_GET['access'] === $spbc->settings['spbc_key'] || ($apbct_key !== false && $_GET['access'] === $apbct_key))){
			setcookie ('spbc_firewall_pass_key', md5($_SERVER['REMOTE_ADDR'].$spbc->settings['spbc_key']), time()+1200, '/');
			setcookie ('ct_sfw_pass_key',        md5($_SERVER['REMOTE_ADDR'].$apbct_key),                  time()+1200, '/');
			return;
		}
	}
	
	//Pass the ckeck if cookie is set.
	foreach($firewall->ip_array as $spbc_cur_ip){
		if(isset($_COOKIE['spbc_firewall_pass_key']) && $_COOKIE['spbc_firewall_pass_key'] == md5($spbc_cur_ip.$spbc->settings['spbc_key']))
			return;
	}
	
	$firewall->ip_check();
	$firewall->waf_test();
	
	// Blacklisted in DB
	if(strpos($firewall->result, 'DENY') !== false){
		$firewall->update_logs($firewall->blocked_ip, $firewall->result);
		$firewall->_die($spbc->service_id, $firewall->result, $firewall->waf_result);
	// Whitelisted in DB
	}elseif(strpos($firewall->result, 'PASS') !== false){ 
		$firewall->update_logs($firewall->passed_ip, $firewall->result);
		if(!empty($spbc->settings['set_cookies'])){
			setcookie ('spbc_firewall_pass_key', md5($firewall->passed_ip.$spbc->settings['spbc_key']), 300, '/');
		}
	}
}

// Plugin activation
function spbc_activation() {
	
    global $wpdb;
	
    $sqls[] = 'CREATE TABLE IF NOT EXISTS '. SPBC_TBL_SECURITY_LOG .' (
		`id` int(11) NOT NULL AUTO_INCREMENT,
		`datetime` datetime NOT NULL,
		`user_login` varchar(60) NOT NULL,
		`event` varchar(32) NOT NULL,
		`page` VARCHAR(500) NULL,
		`page_time` VARCHAR(10) NULL,
		`blog_id` int(11) NOT NULL,
		`auth_ip` VARCHAR(50) DEFAULT NULL,
		`role` varchar(64) DEFAULT NULL,
		PRIMARY KEY (`id`),
		KEY `datetime` (`datetime`,`event`)
		) ENGINE=MyISAM  DEFAULT CHARSET=latin1 AUTO_INCREMENT=1;';
    
	$sqls[] = "CREATE TABLE IF NOT EXISTS ". SPBC_TBL_FIREWALL_DATA ." (
		`spbc_network_1` int(10) unsigned NOT NULL DEFAULT '0',
		`spbc_network_2` int(10) unsigned NOT NULL DEFAULT '0',
		`spbc_network_3` int(10) unsigned NOT NULL DEFAULT '0',
		`spbc_network_4` int(10) unsigned NOT NULL DEFAULT '0',
		`spbc_mask_1` int(10) unsigned NOT NULL DEFAULT '0',
		`spbc_mask_2` int(10) unsigned NOT NULL DEFAULT '0',
		`spbc_mask_3` int(10) unsigned NOT NULL DEFAULT '0',
		`spbc_mask_4` int(10) unsigned NOT NULL DEFAULT '0',
		`status` TINYINT(1) NULL,
		`ipv6` TINYINT(1) NOT NULL DEFAULT '0',
		INDEX (`spbc_network_1`, `spbc_network_2`, `spbc_network_3`, `spbc_network_4`,
		`spbc_mask_1`, `spbc_mask_2`, `spbc_mask_3`, `spbc_mask_4`)
		) ENGINE = MYISAM ;";
				
	$sqls[] = "CREATE TABLE IF NOT EXISTS ". SPBC_TBL_FIREWALL_LOG ." (
		`entry_id` VARCHAR(40) NOT NULL,
		`ip_entry` VARCHAR(50) NULL, 
		`status` ENUM('PASS','PASS_BY_TRUSTED_NETWORK','PASS_BY_WHITELIST','DENY','DENY_BY_NETWORK','DENY_BY_DOS','DENY_BY_WAF_XSS','DENY_BY_WAF_SQL','DENY_BY_WAF_FILE') NULL,
		`requests` INT NULL,
		`page_url` VARCHAR(4096) NULL,
		`request_method` VARCHAR(5) NULL,
		`x_forwarded_for` VARCHAR(15) NULL,
		`http_user_agent` VARCHAR(300) NULL,
		`entry_timestamp` INT NOT NULL , 
		PRIMARY KEY (`entry_id`)) 
		ENGINE = MYISAM;";
	
	$sqls[] = "CREATE TABLE IF NOT EXISTS ". SPBC_TBL_SCAN_FILES ." (
		`path` VARCHAR(1024) NOT NULL,
		`size` INT(10) NOT NULL,
		`perms` INT(4) NOT NULL,
		`mtime` INT(11) NOT NULL,
		`source` ENUM('CORE', 'PLUGIN') NOT NULL DEFAULT 'CORE',
		`checked` ENUM('NO','YES') NOT NULL DEFAULT 'NO',
		`status` ENUM('UNKNOWN','OK','APROVED','MODIFIED','INFECTED','QUARANTINED') NOT NULL DEFAULT 'UNKNOWN',
		`severity` ENUM('CRITICAL', 'DANGER', 'SUSPICIOUS', 'NONE') NULL DEFAULT NULL,
		`weak_spots` VARCHAR(1024) NULL DEFAULT NULL,
		`difference` VARCHAR(1024) NULL DEFAULT NULL,
		`last_sent` INT(11) NOT NULL,
		`fast_hash` VARCHAR(32) NULL DEFAULT NULL,
		`full_hash` VARCHAR(32) NULL DEFAULT NULL,
		`real_full_hash` VARCHAR(32) NULL DEFAULT NULL,
		`q_status` ENUM('UNKNOWN','OK','APROVED','MODIFIED','INFECTED','QUARANTINED') NULL DEFAULT NULL,
		`q_path` VARCHAR(1024) NULL DEFAULT NULL,
		`q_time` INT(11) NULL DEFAULT NULL,
		UNIQUE (`fast_hash`)
	) ENGINE = MYISAM;";
	
	$sqls[] = 'CREATE TABLE IF NOT EXISTS '. SPBC_TBL_SCAN_LINKS .' (
		`link_id` INT(11) NOT NULL AUTO_INCREMENT,
		`scan_id` INT(11) NOT NULL,
		`domain` TINYTEXT NOT NULL,
		`link` VARCHAR(2048) NOT NULL,
		`link_text` VARCHAR(2048) NOT NULL,
		`page_url` VARCHAR(2048) NOT NULL,
		`spam_active` TINYINT(1) NULL,
		PRIMARY KEY (`link_id`),
		INDEX `spam_active` (`spam_active`),
		INDEX `scan_id` (`scan_id`),
		INDEX `domain` (`domain`(40))
		) ENGINE = MYISAM;';
	
	$wpdb->show_errors = false;
	foreach($sqls as $key => $sql){
		$result = $wpdb->query($sql);
		if($result === false){
			$errors[] = "Failed.\nQuery: {$wpdb->last_query}\nError: {$wpdb->last_error}";
		}
	}
	$wpdb->show_errors = true;
	
	if(!empty($errors)){
		spbc_log($errors);
	}

	//Cron jobs	
	SpbcCron::addTask('send_logs',            'spbc_send_logs',                3600,  time()+1800);
	SpbcCron::addTask('send_report',          'spbc_send_daily_report',        86400, time()+43200);
	SpbcCron::addTask('firewall_update',      'spbc_security_firewall_update', 86400, time()+43200);
	SpbcCron::addTask('send_firewall_logs',   'spbc_send_firewall_logs',       3600,  time()+1800);
	SpbcCron::addTask('access_key_notices',   'spbc_access_key_notices',       3600,  time()+3500);
	SpbcCron::addTask('perform_scan_wrapper', 'spbc_perform_scan_wrapper',     86400, time()+43200);
	
	spbc_mu_plugin__install();
	
	add_option('spbc_activation_redirect', (is_network_admin() ? 'settings.php?page=spbc' : 'options-general.php?page=spbc'));
}

//
// Function for redirect to settings
//
function spbc_activation_redirect(){
	
	$settings_rediect = get_option('spbc_activation_redirect', false);
	
	if($settings_rediect && !isset($_GET['activate-multi'])){
		delete_option('spbc_activation_redirect');
		wp_redirect($settings_rediect);
	}
}

//
// A code during plugin deactivation.
//
function spbc_deactivation(){
	
	global $spbc;
	
	unregister_setting(SPBC_SETTINGS, SPBC_SETTINGS);
	
	delete_option('spbc_cron'); // Deleting cron entries
	
	spbc_mu_plugin__uninstall();
	
	//Complete deactivation		
	if(!empty($spbc->settings['complete_deactivation'])){

		//For WPMS
		if(SPBC_WPMS){
			//Deleting network options from wp_sitemeta.
			delete_site_option(SPBC_NETWORK_SETTINGS);
			//Get all sites and delete all option from it.
			$sites =  get_sites();
			foreach($sites as $site){
				delete_blog_option($site -> blog_id, SPBC_SETTINGS);
				delete_blog_option($site -> blog_id, SPBC_DATA);
				delete_blog_option($site -> blog_id, SPBC_LOGIN_ATTEMPTS);
			} unset($site, $sites);	
		//For non WPMS
		}else{
			delete_option(SPBC_NETWORK_SETTINGS);
			delete_option(SPBC_SETTINGS);
			delete_option(SPBC_DATA);
			delete_option(SPBC_DEBUG);
			delete_option(SPBC_LOGIN_ATTEMPTS);
		}
		
		//Deleting all tables
		global $wpdb;		
		$wpdb->query('DROP TABLE '. SPBC_TBL_SECURITY_LOG);
		$wpdb->query('DROP TABLE '. SPBC_TBL_FIREWALL_DATA);
		$wpdb->query('DROP TABLE '. SPBC_TBL_FIREWALL_LOG);
		$wpdb->query('DROP TABLE '. SPBC_TBL_SCAN_FILES);
		$wpdb->query('DROP TABLE '. SPBC_TBL_SCAN_LINKS);
		
		// Deleting scan links results
		$wpdb->query(
			$wpdb->prepare(
				"DELETE FROM {$wpdb->postmeta}
				WHERE meta_key = %s",
				'spbc_links_checked'
			) 
		);
	}
}

//
// Misc functions to test the plugin.
//
function spbc_plugin_loaded() {
		
	if(is_admin() || is_network_admin()){
		$dir = plugin_basename( dirname( __FILE__ ) ) . '/i18n';
		$loaded = load_plugin_textdomain('security-malware-firewall', false, $dir);
	}
	
	// For testing
    if (isset($_GET['spbc_test_daily_report']))
        spbc_send_daily_report(true); 
}

/*
 * Initiate session
*/
function spbc_init_session() {

    $session_id = session_id(); 
    if(empty($session_id) && !headers_sent()) {
        $result = @session_start();
        if(!$result){
            session_regenerate_id(true);
            @session_start(); 
        }
    }
	
    return;
}

//
// Adding notification to registration form
//
function spbc_login_form_notification(){
	
	global $pagenow, $spbc;
	
	if($pagenow == 'wp-login.php' && empty($_GET['action'])){ //Return if it's not a registration page.
		
		$show_notification = (!empty($spbc->settings['show_link_in_login_form']) ? true : false);
		
		if($show_notification)
			echo "<div style='position: absolute; bottom: 20px; right: 20px;'>"
				."<p style='text-align: right;'>"
					.__('Brute Force Protection by', 'security-malware-firewall')."&nbsp;<a rel='nofollow' href='https://wordpress.org/plugins/security-malware-firewall/' target='_blank'>"
						."<img style='vertical-align: bottom;' src='".SPBC_PATH."/images/logo_small.png'></a>"
						."<a rel='nofollow' href='https://wordpress.org/plugins/security-malware-firewall/' target='_blank'>".__('CleanTalk Security', 'security-malware-firewall')."</a>"
				.".</p>"
				."<p style='text-align: right;'>".__('All attempts are logged.', 'security-malware-firewall')."</p>
			</div>";
	}
	return null;
}

//
// Test an attempt to get authed in WordPress backend.
//
function spbc_authenticate($user, $username, $password){
    
	global $spbc;
	
	if(is_wp_error($user)){

		$err_codes = $user->get_error_codes();
		// Passwords brute force.
		if (in_array( 'incorrect_password', $err_codes )){
			
			$sleep_timeout = SPBC_SLEEP_USUAL;
            $spbc_login_attempts = get_option( SPBC_LOGIN_ATTEMPTS );
			
            if (is_array($spbc_login_attempts)) {
                
                if (isset($spbc_login_attempts[$username])) {
					
                    if ($spbc_login_attempts[$username]['attempts'] >= SPBC_MAX_FAILS) {
						
                        spbc_add_issue($username, $password, $spbc_login_attempts);
						$sleep_timeout = SPBC_SLEEP_LONG;
						
                    } else {
                        spbc_add_issue($username, $password, $spbc_login_attempts);
                    }
                } else {
                    spbc_add_issue($username, $password, $spbc_login_attempts, true);
                }
            } else {
                spbc_add_issue($username, $password, (array)$spbc_login_attempts, true);
            }
			
			sleep ($sleep_timeout);
			
			global $spbc_login_error_msg;
			$spbc_login_error_msg = sprintf(__('<br />Authorization attempt has been banned for %d seconds. %s.' ), 
				$sleep_timeout,
				SPBC_NAME
			);
			$user->add('spbc_bf_timeout', $spbc_login_error_msg);
        }
        
		// Usernames brute force.
		if (in_array( 'invalid_username', $err_codes )) {
			$user = spbc_log_issue_common(
				$username,
				'invalid_username',
				SPBC_SLEEP_USUAL,
				$user
			);
        }
   		
		// Emails brute force.
		if (in_array( 'invalid_email', $err_codes )) {
			$user = spbc_log_issue_common(
				$username,
				'invalid_email',
				SPBC_SLEEP_USUAL,
				$user
			);
        }
    }
    
    // The user is logged in.
	if (isset($user->ID) && $user->ID > 0) {
		$roles = null;
		if (is_array($user->roles)) {
			$roles = $user->roles[0]; // Takes only first role.
		}
        spbc_auth_log(array(
            'username' => $username,
			'event' => 'login',
			'roles' => $roles
        ));
		
		// Sends logs to get notify about superuser login.
		$result = spbc_send_logs();
		if(empty($result['error'])){
			$spbc->error_delete('send_logs');
			$spbc->data['logs_last_sent'] = current_time('timestamp');
			$spbc->data['last_sent_events_count'] = $result;
			$spbc->save('data');
		}else{
			$spbc->error_add('send_logs', $result);
		}
	}

    return $user;
}

//
// Logs a logout event
//
function spbc_wp_logout() {
    $user = wp_get_current_user();

    // The user is logged out.
    if (isset($user->ID) && $user->ID > 0) {
		$roles = null;
		if (is_array($user->roles)) {
			$roles = $user->roles[0]; // Takes only first role.
		}
        spbc_auth_log(array(
            'username' => $user->get('user_login'), 
			'event'    => 'logout',
			'roles'    => $roles
        ));
    }

    return null;
}

//
// Logs an issue.
//
function spbc_log_issue_common($username, $event, $sleep_timeout, $user = null) {
	spbc_auth_log(array(
		'username' => $username,
		'event' => $event, 
	));
	sleep ($sleep_timeout);

    if(is_wp_error($user)) {
		global $spbc_login_error_msg;
		$spbc_login_error_msg = sprintf(
			__('<br />Authorization attempt has been banned for %d seconds to prevent unauthorized access. %s.' ), 
			$sleep_timeout,
			SPBC_NAME
		);
		$user->add('spbc_bf_timeout', $spbc_login_error_msg);
	}	
	return $user;
}

function spbc_fix_error_messages($error_msg){
	global $spbc_login_error_msg;
	if(!empty($spbc_login_error_msg)){
		$error_msg = explode('<br />', $error_msg);
		return $error_msg[0].'<br />'.$spbc_login_error_msg;
	}
}

// Adds a record to failed logins.
function spbc_add_issue($username, $password, $attempts, $new_issue = false) {
    
    // Reset the data to avaoid PHP issues.
    if (!isset($attempts) || !count($attempts)) {
        $attempts = array();
    }
    
    if (isset($attempts[$username]['first_issue']) && time() - $attempts[$username]['first_issue'] > SPBC_CALC_PERIOD) {
        $new_issue = true;
        unset($attempts[$username]);
    }

    $update_option = false;
    if ($new_issue) {
        $attempts[$username]['attempts'] = 1;
        $attempts[$username]['first_issue'] = time();
        $attempts[$username]['passwords'][] = md5($password);
        $update_option = true;
    } else {

        // Increase attempts only if new password failed.
        if (!in_array(md5($password), $attempts[$username]['passwords'])) {
            $attempts[$username]['attempts']++;
            $attempts[$username]['passwords'][] = md5($password);
            $update_option = true;
        }
    }
    
    if ($update_option) {
        update_option(SPBC_LOGIN_ATTEMPTS , $attempts);
        spbc_auth_log(array(
            'username' => $username,
            'event' => 'auth_failed'
        ));
    }

    return null;
}

//
// The function logs any attempt to log in the WordPress backend.
//
function spbc_auth_log($params = null){
	
    global $wpdb;
    
    $params_default = array(
        'username'  => null,
        'event'     => null,
		'page'      => null,
		'page_time' => null,
		'roles'     => null,
		'blog_id'   => (SPBC_WPMS ? get_current_blog_id() : null)
    );
    $params = array_merge($params_default, $params);
	
	$auth_ip = SpbcHelper::ip_get(array('real'));
	
    // To fix issue with NULL values for not NULL field.
    $blog_id = isset($params['blog_id']) && $params['blog_id'] !== null ? $params['blog_id'] : 1;

    $values = array(
        'datetime'   => date('Y-m-d H:i:s'),
        'user_login' => $params['username'],
        'event'      => $params['event'],
        'auth_ip'    => $auth_ip,
		'page'       => $params['page'],
		'page_time'  => $params['page_time'],
		'blog_id'    => $blog_id, 
		'role'       => $params['roles'] 
    );
    $result = $wpdb->insert(
        SPBC_TBL_SECURITY_LOG,
        $values
    );
	
	$inserted_id = $wpdb->insert_id;
	
    return $inserted_id;
}

//
// Sorts some data.
//
function spbc_usort_desc($a, $b) {
    return $b->datetime_ts - $a->datetime_ts;
};

//
// Function to get the countries by IPs list.
//
function spbc_get_countries_by_ips($ips_data = '') {
    global $api_url;

    $ips_c = array();
    
    if ($ips_data === '')
        return $ips_c;
    
	$result = SpbcHelper::api_method__ip_info($ips_data);
	
	if (empty($result['error'])) {
		
		foreach ($result as $ip_dec => $v2) {
			
			if (isset($v2['country_code']))
				$ips_c[$ip_dec]['country_code'] = $v2['country_code']; 
			if (isset($v2['country_name']))
				$ips_c[$ip_dec]['country_name'] = $v2['country_name']; 
			
		}
	}

    return $ips_c;
}

//
//	Sendings Security FireWall logs
//
function spbc_send_firewall_logs($api_key = false){
	
    global $spbc;
	
	$api_key = !empty($api_key) ? $api_key : $spbc->settings['spbc_key'];
	
	if(!empty($api_key)){
	
		$result = SpbcFireWall::send_logs($api_key);
		
		if(empty($result['error'])){
			$spbc->data['last_firewall_send'] = current_time('timestamp');
			$spbc->data['last_firewall_send_count'] = $result;
			$spbc->save('data');
			return $result;
		}else{
			return $result;	
		}
	}
	
	return array(
		'error' => true,
		'error_string' => 'FW_DISABLED'
	);	
}

//
//	Updating Security FireWall data
//
function spbc_security_firewall_update($api_key = false, $immediate = false){
	
	global $spbc;
		
	$api_key = !empty($api_key) ? $api_key : $spbc->settings['spbc_key'];

	if(!empty($api_key)){
		
		$result = SpbcFireWall::firewall_update($api_key, isset($_GET['file_url']) ? $_GET['file_url'] : null, $immediate);
		
		if(empty($result['error']) && is_int($result)){
			$spbc->data['last_firewall_updated'] = current_time('timestamp');
			$spbc->data['firewall_entries'] = $result;
			$spbc->save('data');
		}
		return $result;
	}
	
	return array('error' => true, 'error_string' => 'FW_DISABLED');
}

//
//	Drop Security FireWall data
//
function spbc_security_firewall_drop(){
	
	global $wpdb;
	
	$result = $wpdb->query('DELETE FROM `'. SPBC_TBL_FIREWALL_DATA .'`;');
	
	if($result !== false){
		return true;
	}else{
		return array('error' => true, 'error_string' => 'DELETE_ERROR');	
	}
}

function spbc_update(){
	
	//global $spbc;
	
	//Upgrade params
	$plugin      = 'security-malware-firewall/security-malware-firewall.php';
	$plugin_slug = 'security-malware-firewall';
	$title 	     = __('Update Plugin');
	$nonce 	     = 'upgrade-plugin_' . $plugin;
	$url 	     = 'update.php?action=upgrade-plugin&plugin=' . urlencode( $plugin );
	
	$prev_version = SPBC_VERSION;
	
	require_once( ABSPATH . 'wp-admin/includes/plugin.php' );
	require_once( ABSPATH . 'wp-admin/includes/class-wp-upgrader.php' );
	require_once( ABSPATH . 'wp-admin/includes/file.php' );
	require_once( ABSPATH . 'wp-admin/includes/misc.php' );
	
	require_once( SPBC_PLUGIN_DIR . 'lib/SpbcUpgrader.php' );
	require_once( SPBC_PLUGIN_DIR . 'lib/SpbcUpgraderSkin.php' );
	
	$upgrader = new SpbcUpgrader( new SpbcUpgraderSkin( compact('title', 'nonce', 'url', 'plugin') ) );
    $upgrader->upgrade($plugin);
		
	if($upgrader->spbc_result === 'OK'){
				
		$result = activate_plugins( $plugin );
		
		if(is_wp_error($result))
			die('FAIL '. json_encode(array('error' => 'COULD_NOT_ACTIVATE', 'wp_error' => $result->get_error_message())));
		if($result === false)
			die('FAIL '. json_encode(array('error' => 'COULD_NOT_ACTIVATE')));
				
		$urlHeaders = get_headers(get_option('siteurl'));
		
		if( strpos($urlHeaders[0], '200') === false ){
						
			// Rollback
			$rollback = new SpbcUpgrader( new SpbcUpgraderSkin( compact('title', 'nonce', 'url', 'plugin_slug', 'prev_version') ) );
			$rollback->rollback($plugin);
			
			$response = array(
				'error'           => 'BAD_HTTP_CODE',
				'http_code'       => $urlHeaders[0],
				'output'          => substr(file_get_contents(get_option('siteurl')), 0, 4000),
				'rollback_result' => $rollback->spbc_result,
			);
			
			die('FAIL '.json_encode($response));
		}
		
		$plugin_data = get_plugin_data(__FILE__);
		$spbc_agent = 'wordpress-security-'.str_replace('.', '', $plugin_data['Version']);
		
		die('OK '.json_encode(array('agent' => $spbc_agent)));

	}else{
		die('FAIL '. json_encode(array('error' => $upgrader->spbc_result)));
	}
}

function spbc_update_postmeta_links($post_ID, $post = null, $update = null){
	delete_post_meta($post_ID, 'spbc_links_checked');
}

function spbc_update_postmeta_links__by_comment($id, $comment){
	$comment = get_comment($id);
	spbc_update_postmeta_links($comment->comment_post_ID);
}

// Install MU-plugin
function spbc_mu_plugin__install(){
	$file = '<?php' . PHP_EOL . file_get_contents(SPBC_PLUGIN_DIR . '/install/security-malware-firewall-mu.php');
	return @file_put_contents(WPMU_PLUGIN_DIR . '/security-malware-firewall-mu.php', $file) ? true : false;
}

// Uninstall MU-plugin
function spbc_mu_plugin__uninstall(){
	if(file_exists(WPMU_PLUGIN_DIR . '/security-malware-firewall-mu.php'))
		return unlink(WPMU_PLUGIN_DIR . '/security-malware-firewall-mu.php') ? true : false;
	else
		return false;
}

function spbc_is_user_logged_in(){
	if(count($_COOKIE)){
		foreach($_COOKIE as $key => $val){
			if(preg_match("/wordpress_logged_in/", $key)){
				return true;
			}       
		} unset($key, $val);
	}
	return false;
}