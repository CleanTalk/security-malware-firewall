<?php

//
// Do updates in SQL database after plugin update.
//
function spbc_run_update_actions ($current_version, $new_version) {
    global $wpdb;
	
   $spbc_auth_logs_table = $wpdb->prefix . SPBC_LOG_TABLE;
    	
	$current_version = explode('.', $current_version);
	$new_version = explode('.', $new_version);
		
	if(intval($current_version[0]) == 1){
		if(isset($current_version[1]) && intval($current_version[1]) < 4){
			$sql = "ALTER TABLE `$spbc_auth_logs_table` 
				CHANGE `event`
				`event` VARCHAR(32) CHARACTER SET latin1 COLLATE latin1_swedish_ci NOT NULL;";
			$wpdb->query($sql);
		}
		if(isset($current_version[1]) && intval($current_version[1]) < 5){
			$sql = "ALTER TABLE `$spbc_auth_logs_table`
				ADD COLUMN `page` VARCHAR(500) NULL AFTER `event`,
				ADD COLUMN `page_time` VARCHAR(10) NULL AFTER `page`;";
			$wpdb->query($sql);
		}
		if(isset($current_version[1]) && intval($current_version[1]) == 5){
			if(!isset($current_version[2])){ // == 0
				$sql = "ALTER TABLE `$spbc_auth_logs_table`
					ADD COLUMN `page` VARCHAR(500) NULL AFTER `event`,
					ADD COLUMN `page_time` VARCHAR(10) NULL AFTER `page`;";
				$wpdb->query($sql);
			}
		}
	}

    return null;
}

//
// Returns country part for emails
//
function spbc_report_country_part($ips_c = null, $ip) {
    
    if (isset($ips_c[$ip]['country_code'])) {
		
        $country_code = strtolower($ips_c[$ip]['country_code']);
		$country_name = (isset($ips_c[$ip]['country_name']) ? $ips_c[$ip]['country_name'] : '-');
		
        $country_part = sprintf('<img src="https://cleantalk.org/images/flags/%s.png" alt="%s" />&nbsp;%s',
            $country_code,
            $country_code,
            $country_name
        );
    }else{
		$country_part = '-';
	}

    return $country_part;
}

function spbc_getAutoKey($email, $host, $platform){
	$request=Array();
	$request['method_name'] = 'get_api_key'; 
	$request['email'] = $email;
	$request['website'] = $host;
	$request['platform'] = $platform;
	$url='https://api.cleantalk.org';
	$result=spbc_sendRawRequest($url,$request);
	return $result;
}

//
// Sends a HTTP request.
//
function spbc_sendRawRequest($url,$data,$isJSON=false,$timeout=3)
{
	$result=null;
	if(!$isJSON){
		$data=http_build_query($data);
		$data=str_replace("&amp;", "&", $data);
	}else{
		$data= json_encode($data);
	}
	
	$curl_exec=false;
	
	if (function_exists('curl_init') && function_exists('json_decode')){
	
		$ch = curl_init();
		curl_setopt($ch, CURLOPT_URL, $url);
		curl_setopt($ch, CURLOPT_TIMEOUT, $timeout);
		curl_setopt($ch, CURLOPT_POST, true);
		curl_setopt($ch, CURLOPT_POSTFIELDS, $data);
		
		// receive server response ...
		curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
		// resolve 'Expect: 100-continue' issue
		curl_setopt($ch, CURLOPT_HTTPHEADER, array('Expect:'));
		
		curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
		curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);
		
		$result = @curl_exec($ch);
		
		if($result!==false)
			$curl_exec=true;
		
		@curl_close($ch);
	}
	
	if(!$curl_exec){
		$opts = array(
		    'http'=>array(
		        'method' => "POST",
		        'timeout'=> $timeout,
		        'content' => $data
            )
		);
		$context = stream_context_create($opts);
		$result = @file_get_contents($url, 0, $context);
	}
	
	return $result;
}

?>
