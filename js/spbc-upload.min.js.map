{"version":3,"file":"spbc-upload.min.js","sources":["spbc-upload.js"],"sourcesContent":["let spbcErrorMsgCount = 0;\r\n\r\njQuery(document).ready(function() {\r\n    // Count error messages each 100ms\r\n    setTimeout(spbcCheckNewFiles, 1000);\r\n});\r\n\r\n/**\r\n * Check blocked file and display error message about it\r\n */\r\nfunction spbcCheckNewFiles() {\r\n    // If their more messages than were, fire AJAX request to get data\r\n    if (spbcErrorMsgCount < spbcGetErrorMsgs().length) {\r\n        spbcErrorMsgCount = spbcGetErrorMsgs().length;\r\n        spbcGetLatestBlockedFile();\r\n        spbcErrorMsgCount = spbcErrorMsgCount - 1;\r\n        // If their fewer messages than were, recount\r\n    } else if (spbcErrorMsgCount > spbcGetErrorMsgs().length) {\r\n        spbcErrorMsgCount = spbcGetErrorMsgs().length;\r\n    }\r\n    setTimeout(spbcCheckNewFiles, 1000);\r\n}\r\n\r\n/**\r\n * Array of the appear errors notices on the page\r\n *\r\n * @return {{length}|*|jQuery|HTMLElement|*[]}\r\n */\r\nfunction spbcGetErrorMsgs() {\r\n    let mediaError = jQuery('#media-upload-error .error');\r\n    let uploadError = jQuery('.upload-error-message');\r\n    if (mediaError.length) {\r\n        return mediaError;\r\n    } else if (uploadError.length) {\r\n        return uploadError;\r\n    } else {\r\n        return [];\r\n    }\r\n}\r\n\r\n/**\r\n * Fires AJAX request to get more info about the block\r\n */\r\nfunction spbcGetLatestBlockedFile() {\r\n    let data = {action: 'spbc_check_file_block', timestamp: spbcTimestamp()};\r\n    let params = {callback: spbcCheckFileBlockCallback};\r\n    let obj = spbcGetErrorMsgs().first();\r\n    spbcSendAJAXRequest(data, params, obj);\r\n}\r\n\r\n/**\r\n * Callback. Sets correct error message with details\r\n *\r\n * @param {obj|string} result\r\n * @param {obj} data\r\n * @param {obj} params\r\n * @param {obj} obj\r\n */\r\nfunction spbcCheckFileBlockCallback(result, data, params, obj) {\r\n    if (result.blocked) {\r\n        let pattern = result.pattern.CRITICAL || result.pattern.DANGER || result.pattern.SUSPICIOUS;\r\n        obj.html(result.warning + '<br>' + result.pattern_title + ' ' + pattern);\r\n    }\r\n}\r\n"],"names":["let","spbcErrorMsgCount","spbcCheckNewFiles","spbcGetErrorMsgs","length","spbcGetLatestBlockedFile","setTimeout","mediaError","jQuery","uploadError","data","action","timestamp","spbcTimestamp","params","callback","spbcCheckFileBlockCallback","obj","first","spbcSendAJAXRequest","result","pattern","blocked","CRITICAL","DANGER","SUSPICIOUS","html","warning","pattern_title","document","ready"],"mappings":"AAAAA,IAAIC,kBAAoB,EAUxB,SAASC,oBAEDD,kBAAoBE,iBAAiB,EAAEC,QACvCH,kBAAoBE,iBAAiB,EAAEC,OACvCC,yBAAyB,EACzBJ,mBAAwC,GAEjCA,kBAAoBE,iBAAiB,EAAEC,SAC9CH,kBAAoBE,iBAAiB,EAAEC,QAE3CE,WAAWJ,kBAAmB,GAAI,CACtC,CAOA,SAASC,mBACLH,IAAIO,EAAaC,OAAO,4BAA4B,EAChDC,EAAcD,OAAO,uBAAuB,EAChD,OAAID,EAAWH,OACJG,EACAE,EAAYL,OACZK,EAEA,EAEf,CAKA,SAASJ,2BACLL,IAAIU,EAAO,CAACC,OAAQ,wBAAyBC,UAAWC,cAAc,CAAC,EACnEC,EAAS,CAACC,SAAUC,0BAA0B,EAC9CC,EAAMd,iBAAiB,EAAEe,MAAM,EACnCC,oBAAoBT,EAAMI,EAAQG,CAAG,CACzC,CAUA,SAASD,2BAA2BI,EAAQV,EAAMI,EAAQG,GACtD,IACQI,EADJD,EAAOE,UACHD,EAAUD,EAAOC,QAAQE,UAAYH,EAAOC,QAAQG,QAAUJ,EAAOC,QAAQI,WACjFR,EAAIS,KAAKN,EAAOO,QAAU,OAASP,EAAOQ,cAAgB,IAAMP,CAAO,EAE/E,CA7DAb,OAAOqB,QAAQ,EAAEC,MAAM,WAEnBxB,WAAWJ,kBAAmB,GAAI,CACtC,CAAC"}