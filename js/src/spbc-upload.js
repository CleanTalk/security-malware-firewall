let spbcErrorMsgCount = 0;

jQuery(document).ready(function() {
    // Count error messages each 100ms
    setTimeout(spbcCheckNewFiles, 1000);
});

/**
 * Check blocked file and display error message about it
 */
function spbcCheckNewFiles() {
    // If their more messages than were, fire AJAX request to get data
    if (spbcErrorMsgCount < spbcGetErrorMsgs().length) {
        spbcErrorMsgCount = spbcGetErrorMsgs().length;
        spbcGetLatestBlockedFile();
        spbcErrorMsgCount = spbcErrorMsgCount - 1;
        // If their fewer messages than were, recount
    } else if (spbcErrorMsgCount > spbcGetErrorMsgs().length) {
        spbcErrorMsgCount = spbcGetErrorMsgs().length;
    }
    setTimeout(spbcCheckNewFiles, 1000);
}

/**
 * Array of the appear errors notices on the page
 *
 * @return {{length}|*|jQuery|HTMLElement|*[]}
 */
function spbcGetErrorMsgs() {
    let mediaError = jQuery('#media-upload-error .error');
    let uploadError = jQuery('.upload-error-message');
    if (mediaError.length) {
        return mediaError;
    } else if (uploadError.length) {
        return uploadError;
    } else {
        return [];
    }
}

/**
 * Fires AJAX request to get more info about the block
 */
function spbcGetLatestBlockedFile() {
    let data = {action: 'spbc_check_file_block', timestamp: spbcTimestamp()};
    let params = {callback: spbcCheckFileBlockCallback};
    let obj = spbcGetErrorMsgs().first();
    spbcSendAJAXRequest(data, params, obj);
}

/**
 * Callback. Sets correct error message with details
 *
 * @param {obj|string} result
 * @param {obj} data
 * @param {obj} params
 * @param {obj} obj
 */
function spbcCheckFileBlockCallback(result, data, params, obj) {
    if (result.blocked) {
        let pattern = result.pattern.CRITICAL || result.pattern.DANGER || result.pattern.SUSPICIOUS;
        obj.html(result.warning + '<br>' + result.pattern_title + ' ' + pattern);
    }
}