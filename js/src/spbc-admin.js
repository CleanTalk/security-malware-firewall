/**
 * Get Google Qr Code
 *
 * @return {object}
 */
function spbcGetGoogleQrCode() {
    let data = {};
    let res = {};
    data.security = spbcSettings.ajax_nonce;
    data.action = 'spbc_get_google_qr_code';

    jQuery.ajax({
        type: 'POST',
        async: false,
        url: spbcSettings.ajaxurl,
        data: data,
        success: function(result) {
            res = result;
        },
    });
    return res;
}

/**
 * Check Google Code
 */
function spbcCheckGoogleCode() {
    let data = {};
    data.security = spbcSettings.ajax_nonce;
    data.action = 'spbc_check_google_code';
    data.code = jQuery('#spbct-google-qr-code input').val();

    jQuery.ajax({
        type: 'POST',
        async: false,
        url: spbcSettings.ajaxurl,
        data: data,
        success: function(result) {
            if (result.success) {
                jQuery('#spbct-google-qr-code').dialog( 'close' );
                document.location.reload();
            } else {
                alert(result.data);
            }
        },
    });
}

/**
 * Disable Google 2fa
 *
 * @param {string} element
 */
function spbcDisableG2fa( element ) {
    let data = {};
    data.security = spbcSettings.ajax_nonce;
    data.action = 'spbc_disable_google_2fa';
    data.user_id = jQuery(element).data('user-id');

    jQuery.ajax({
        type: 'POST',
        async: false,
        url: spbcSettings.ajaxurl,
        data: data,
        success: function(result) {
            if (result.success) {
                document.location.reload();
            } else {
                alert(result.data);
            }
        },
    });
}

/**
 * Check Vulnerability
 *
 * @param {array} list
 * @param {string} type
 */
function spbcCheckVulnerability(list, type = 'install') {
    let data = {};
    data.security = spbcSettings.ajax_nonce;
    data.action = type === 'install' ? 'spbc_check_vulnerability_install' : 'spbc_check_vulnerability_list';
    data.list = list;

    jQuery.ajax({
        type: 'POST',
        async: false,
        url: spbcSettings.ajaxurl,
        data: data,
        success: function(result) {
            if (result.success) {
                if (type === 'install') {
                    spbcCheckVulnerabilityInstallRender(result.list, result.msg);
                }
                if (type === 'list') {
                    spbcCheckVulnerabilityListRender(result.list);
                }
            } else {
                console.log(result);
            }
        },
    });
}

/**
 * Check Vulnerability List Render
 *
 * @param {object} list
 * @param {string} msg
 */
function spbcCheckVulnerabilityListRender(list) {
    let card;
    let badge;

    list.forEach((el) => {
        badge = document.createElement('div');
        badge.classList.add('notice', 'notice-error', 'error-message');
        badge.innerHTML = el.msg;
        card = document.querySelector('.themes .theme[data-slug=' + el.slug + ']');
        if (card) {
            card.appendChild(badge);
        }
    });
}

/**
 * Check Vulnerability Install Render
 *
 * @param {object} list
 * @param {string} msg
 */
function spbcCheckVulnerabilityInstallRender(list, msg) {
    let card;

    let badge = document.createElement('div');
    badge.classList.add('notice');
    badge.innerHTML = '<p>' + msg + '</p>';

    list.forEach((el) => {
        card = document.querySelector('.theme-id-container .theme-actions a[data-slug=' + el + ']');
        if (card) {
            card.parentNode.parentNode.parentNode.appendChild(badge);
        }
    });
}

jQuery(document).ready(function() {
    if (window.location.href.indexOf('themes.php') > -1 && spbcSettings.vulnerabilityShowList) {
        let slugsState = [];
        let slugs = [];
        let slugsNodes;
        let version;

        setInterval(function() {
            slugsNodes = document.querySelectorAll('.themes .theme[data-slug]');

            if (slugsNodes.length > 0) {
                slugs = [];
                slugsNodes.forEach(function(el) {
                    version = el.querySelector('img').src ?
                        el.querySelector('img').src.match(/ver=([\d\.]+)/)[1] :
                        null;
                    slugs.push({'slug': el.dataset.slug, 'version': version});
                });
            }

            if (JSON.stringify(slugs) != JSON.stringify(slugsState)) {
                slugsState = slugs;
                spbcCheckVulnerability(slugs, 'list');
            }
        }, 500);
    }

    if (window.location.href.indexOf('theme-install.php') > -1 && spbcSettings.vulnerabilityShowInstall) {
        let slugsState = [];
        let slugs = [];
        let slugsNodes;

        setInterval(function() {
            slugsNodes = document.querySelectorAll('.theme-id-container .theme-actions a[data-slug]');

            if (slugsNodes.length > 0) {
                slugs = [];
                slugsNodes.forEach(function(el) {
                    slugs.push(el.dataset.slug);
                });
            }

            if (JSON.stringify(slugs) != JSON.stringify(slugsState)) {
                slugsState = slugs;
                spbcCheckVulnerability(slugs);
            }
        }, 500);
    }

    // Auto update banner close handler
    jQuery('.spbc_update_notice').on('click', 'button', function() {
        spbcSetCookie('spbc_update_banner_closed', 1, 86400 * 30);
    });

    // Enable G2FA from user profile page
    jQuery(document).on('click', '#spbc-g2fa-enable', function(e) {
        e.preventDefault();
        let spbcGoogleQrCode = spbcGetGoogleQrCode();

        if ( spbcGoogleQrCode.success ) {
            let qrCodeDiv = jQuery('#spbct-google-qr-code-img');
            qrCodeDiv.html(spbcGoogleQrCode.data.img + '<p>' + spbcGoogleQrCode.data.code + '</p>');
            jQuery('#spbct-google-qr-code input').val('');
            jQuery('#spbct-google-qr-code').dialog({
                modal: true,
                title: 'Google authenticator activation',
                buttons: {
                    Cancel: function() {
                        jQuery( this ).dialog( 'close' );
                    },
                    Ok: function() {
                        spbcCheckGoogleCode();
                    },
                },
                draggable: false,
                resizable: false,
            });
        } else {
            alert(spbcGetGoogleQrCode.data);
        }
    });

    // Disable G2FA from user profile page
    jQuery(document).on('click', '#spbc-g2fa-disable', function(e) {
        e.preventDefault();
        if ( confirm( 'Are you sure?' ) ) {
            spbcDisableG2fa( this );
        }
    });

    let refreshUserOnlineCounter = function( result, data, params ) {
        setTimeout(function() {
            if ( result !== null ) {
                jQuery('.spbc-admin_bar--user_counter').html(result.count);
                if ( result.count <= 3 ) {
                    jQuery('#wp-admin-bar-spbc_admin_bar__online_admins').show();
                    jQuery('.spbc-admin_bar--online_admins').html(result.users.join(', '));
                } else {
                    jQuery('#wp-admin-bar-spbc_admin_bar__online_admins').hide();
                }
            }
            spbcSendAJAXRequest( data, params );
        }, 15000 );
    };

    if ( +spbcSettings.admin_bar__admins_online_counter === 1 ) {
        refreshUserOnlineCounter(null, {action: 'spbc_get_authorized_admins'}, {callback: refreshUserOnlineCounter});
    }

    // Dismiss admin banner
    jQuery('body').on('click', '.spbct-notice-dismiss-link', function(e) {
        jQuery(e.target).siblings('.notice-dismiss').click();
    });
    jQuery('body').on('click', '.spbc-notice .notice-dismiss', function(e) {
        const bannerId = jQuery(e.target).parent('.notice').attr('id');
        if ( bannerId ) {
            let elem = '<div id="spbct-notice-dismiss-success" class="notice notice-success is-dismissible"><p>'+
                spbcSettings.spbctNoticeDismissSuccess+
                '</p></div>';
            spbcSendAJAXRequest({'action': 'spbc_dismiss_banner', 'banner_id': bannerId}, {});
            jQuery(e.target)
                .parent('.notice')
                .after(elem);
            setTimeout(function() {
                jQuery('#spbct-notice-dismiss-success').fadeOut();
            }, 2000);
        }
    });

    if (+spbcSettings.needToWhitelist === 1) {
        spbcSendAJAXRequest( {'action': 'spbc_private_list_add'}, {'callback': null} );
    }

    let ringContainer = document.createElement('div');
    ringContainer.className = 'spbc_ring-container';
    ringContainer.style.top = '0px';
    ringContainer.style.right = '70px';
    let ringRing = document.createElement('div');
    ringRing.className = 'spbc_ringring';
    let circle = document.createElement('div');
    circle.className = 'spbc_circle';

    ringContainer.appendChild(ringRing);
    ringContainer.appendChild(circle);

    let settings = document.querySelector('#menu-settings');
    if (settings) {
        settings.appendChild(ringContainer);
    }
});

/**
 * Summary Show CDN Checker Table
 */
function spbcSummaryShowCDNCheckerTable() {/* eslint-disable-line no-unused-vars */
    event.preventDefault();
    let table = document.getElementById('spbc_stats_cdn_checker_table');
    if (typeof (table) !== 'undefined') {
        if (table.style.display === 'block') {
            table.style.display = 'none';
        } else {
            table.style.display = 'block';
        }
    }
}
