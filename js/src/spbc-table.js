let spbcBulkAction = null;
const noConfirmActions = spbcGetNoConfirmActions(spbcPublic);

/**
 * Reloads scanner accordion and set all the listeners
 * @param {string|null} interactControlTab ajaxResult If is set, will use this var as interactivity data.
 * @param {string|null} updateText
 */
function spbcReloadAccordion(interactControlTab = null, updateText = '') {
    spbcSendAJAXRequest(
        {action: 'spbc_scanner_tab__reload_accordion'},
        {
            notJson: true,
            callback: function(result, data, params, obj) {
                jQuery(obj).accordion('destroy');
                jQuery(obj).html(result);
                jQuery(obj).accordion({
                    header: 'h3',
                    heightStyle: 'content',
                    collapsible: true,
                    active: false,
                });
                spbcTblBulkActionsListen();
                spbcTblRowActionsListen();
                spbcTblPaginationListen();
                spbcTblSortListen();
                spbcStartShowHide();
                if (interactControlTab !== null && updateText !== null) {
                    interactScannerTab(interactControlTab, updateText);
                }
            },
        },
        jQuery('#spbc_scan_accordion'),
    );
}

/**
 * Open refreshed tab after scanner reload.
 * @param {string} controlTab
 * @param {string} updateText
 */
function interactScannerTab(controlTab, updateText) {
    let refreshControlTabSelector;
    let headerSelector;
    let headerUpdateStatus;

    if (
        typeof(controlTab) !== 'string' ||
        controlTab === '' ||
        typeof(updateText) !== 'string' ||
        updateText === ''
    ) {
        return;
    }

    // init refresh controlled tabs
    refreshControlTabSelector = jQuery('#spbc_scan_accordion div[refresh_control_tab="' + controlTab + '"]')[0];

    // init header to click
    headerSelector = 'h3[aria-controls=spbc_scan_accordion_tab_' + controlTab + ']';
    headerSelector = jQuery(headerSelector)[0];

    if (
        typeof(refreshControlTabSelector) === 'undefined' ||
        typeof(headerSelector) === 'undefined'
    ) {
        return;
    }

    // show  updated caption
    jQuery('<div class="spbc_accordion_header_caption__update_status"></div>')
        .appendTo(headerSelector);
    headerUpdateStatus = jQuery('.spbc_accordion_header_caption__update_status');
    jQuery('<div class="spbc_accordion_header_caption__updated">' + updateText + '</div>')
        .appendTo(headerUpdateStatus);

    // do click to open tab
    headerSelector.click();

    // highlight header
    refreshControlTabSelector.setAttribute(
        'class',
        'ui-accordion-header ui-corner-top ui-state-default ui-accordion-icons ui-accordion-header-active',
    );

    // hide all actions on partial reload
    jQuery('.row-actions').hide();
}

/**
 * Table bulk actions
 */
function spbcTblBulkActionsListen() {
    jQuery('.tbl-bulk_actions-all--apply')
        .off('click')
        .on('click', function() {
            // @ToDo perhaps spbcScanner.active is not defined anywhere.
            //  check this and implement `active` status in the right place
            if ( spbcScanner.active ) {
                alert(spbcTableLocalize.scannerIsActive);
                return;
            }

            let self = jQuery(this);
            let allowedBulkActions = [
                'approve',
                'disapprove',
                'send',
                'check_analysis_status',
                'approve_page',
                'disapprove_page',
                'cure',
                'delete_from_analysis_log',
            ];
            let action = self.siblings('select').children()[self.siblings('select').first()[0].selectedIndex].value;

            if ( allowedBulkActions.indexOf( action ) !== -1 ) {
                if (!noConfirmActions.any.includes(action)) {
                    if (!confirm(spbcTable.warning_bulk)) {
                        return;
                    }
                }
                let data = {
                    action: 'spbc_tbl-action--bulk',
                    add_action: action,
                    status: self.parents('.tbl-root').attr('type'),
                };

                if (action === 'cure') {
                    const selectedItems = self.closest('#spbc_tbl__scanner_cure_log').find('.cb-select');
                    let selectedIds = [];

                    selectedItems.each(function(index, element) {
                        const elementId = jQuery(element).val();
                        selectedIds.push(elementId);
                    });
                    data.selectedIds = selectedIds;
                }

                if (action === 'delete_from_analysis_log') {
                    const selectedItems = self.closest('#spbc_tbl__scanner_analysis_log').find('.cb-select');
                    let fileIds = [];

                    selectedItems.each(function(index, element) {
                        const elementId = jQuery(element).val();
                        fileIds.push(elementId);
                    });
                    data.file_ids = fileIds;
                }

                let params = {
                    button: this,
                    spinner: self.children('.tbl-preloader--small'),
                    callback: function(out) {
                        spbcReloadAccordion();
                        if ( action === 'check_analysis_status' && typeof out !== 'undefined') {
                            let html = '<p> Analysis status updated.' +
                                ' Total: ' + out.counters.total +
                                ', updated: ' + out.counters.updated +
                                ', skipped: ' + out.counters.skipped +
                                ', failed: ' + out.counters.failed +
                                ', queued: ' + out.counters.queued +
                                '</p>';
                            spbcModal.open().put( html );
                        }
                        if ( action === 'send' && typeof out !== 'undefined') {
                            let html = '<p> Files have been sent: ' +
                                out.files_sent_counter +
                                '</p>';
                            spbcModal.open().put(html);
                        }
                    },
                    errorOutput: function( errorText, comment ) {
                        if ( comment ) {
                            errorText = errorText + '<br>Additional information:<br>' + comment;
                        }
                        spbcModal.open().putError( errorText );
                    },
                    timeout: 60000,
                };

                spbcSendAJAXRequest(data, params);
            } else {
                alert('This action is not supported for all files yet =(');
            }
        });

    jQuery('.tbl-bulk_actions--apply')
        .off('click')
        .on('click', function(e) {
            let self = spbcBulkAction || jQuery(this);
            spbcBulkAction = self;
            let action = self.siblings('select').children()[self.siblings('select').first()[0].selectedIndex].value;

            if (!spbcBulkAction && !noConfirmActions.any.includes(action) && !confirm(spbcTable.warning_bulk)) {
                return;
            }

            if (action === 'cure') {
                spbcScannerCureSelected(jQuery(this));
                return;
            }

            if (action === 'delete_from_analysis_log') {
                spbcScannerAnalysisLogDeleteFromLog(jQuery(this));
                return;
            }

            if (action === 'allow' || action === 'ban') {
                let sendAction = action === 'ban' ? 'deny' : action;
                let items = self.parents('.tbl-root').find('.cb-select:checked');
                if (items) {
                    self.children('.tbl-preloader--small').show();
                    items.each(function() {
                        let ip = jQuery(this).parents('tr').find('.tbl-row_action--'+action).data('ip');
                        spbcSecLogsFilterIp(ip, sendAction, true);
                        jQuery(this).prop('checked', false);
                    });
                }
                self.children('.tbl-preloader--small').hide();
                let msg = action === 'allow' ? 'Allowed' : 'Banned';
                let html = '<p> Success. Selected IPs have been ' +
                    msg +
                    '. Changes will be applied within 10 minutes.' +
                    '</p>';
                spbcModal.open().put( html );
                setTimeout(spbcReloadAccordion, 1900);

                return;
            }

            if ( action !== '-1' && self.parents('.tbl-root').find('.cb-select').is(':checked') ) {
                self.children('.tbl-preloader--small').show();
                // eslint-disable-next-line max-len
                if (self.parents('.tbl-root').find('.cb-select:checked').first().parents('tr').find('.tbl-row_action--'+action)[0]) {
                    self
                        .parents('.tbl-root')
                        .find('.cb-select:checked')
                        .first()
                        .parents('tr')
                        .find('.tbl-row_action--'+action)
                        .click();
                    self.parents('.tbl-root').find('.cb-select:checked').first().prop('checked', false);
                } else {
                    self.parents('.tbl-root').find('.cb-select:checked').first().prop('checked', false);
                    self.click();
                }
            } else {
                self.children('.tbl-preloader--small').hide();
                spbcBulkAction = null;
                if ( action === 'check_analysis_status' || action === 'disapprove' ) {
                    let html = '<p> All available files are updated.' + '</p>';
                    spbcModal.open().put( html );
                }
                if ( action === 'send') {
                    let html = '<p> All available files are sent.' + '</p>';
                    spbcModal.open().put( html );
                }
                setTimeout(spbcReloadAccordion, 1900);
            }
            // reset spbcBulkAction if action is restricted
            if (noConfirmActions.restricted.includes(action)) {
                spbcBulkAction = null;
            }
        });
}

/**
 * Cure selected files
 * @param {obj} current
 */
function spbcScannerCureSelected(current) {
    const selectedItems = current.closest('#spbc_tbl__scanner_cure_log').find('.cb-select:checked');
    let selectedIds = [];

    if (selectedItems.length === 0) {
        alert('Please, select elements.');
    }

    selectedItems.each(function(index, element) {
        const elementId = jQuery(element).val();
        selectedIds.push(elementId);
    });

    const data = {
        action: 'spbc_cure_selected',
        security: spbcSettings.ajax_nonce,
        selectedIds: selectedIds,
    };
    jQuery.ajax({
        type: 'POST',
        url: spbcSettings.ajaxurl,
        data: data,
        beforeSend: function() {
            current
                .closest('#spbc_tbl__scanner_cure_log')
                .find('.tbl-button---white_blue .tbl-preloader--in_button')
                .show();
        },
        success: function(result) {
            current
                .closest('#spbc_tbl__scanner_cure_log')
                .find('.tbl-button---white_blue .tbl-preloader--in_button')
                .hide();
            if (result.success) {
                spbcModal.open().put(result.data);
                document.addEventListener('spbcModalClosed', function( e ) {
                    document.location.reload();
                });
            } else {
                spbcModal.open().putError(result.data);
            }
        },
    });
}

/**
 * Table row actions
 */
function spbcTblRowActionsListen() {
    jQuery('.tbl-row_action--ajax')
        .off('click')
        .on('click', function() {
            if ( spbcScanner.active ) {
                alert(spbcTableLocalize.scannerIsActive);
                return;
            }
            let self = jQuery(this);
            let data = {
                action: 'spbc_tbl-action--row',
                add_action: self.attr('row-action'),
                id: self.parents('.row-actions').attr('uid'),
                cols: self.parents('.row-actions').attr('cols_amount'),
                page_url: self.parent().attr('uid'),
                page_id: self.parent().attr('page_id'),
            };
            let params = {
                callback: spbcTblRowActionsCallback,
                errorOutput: function(msg) {
                    spbcModal.open().putError( msg );
                },
                spinner: self.parent().siblings('.tbl-preloader--tiny'),
            };

            let fileName = self.parent().parent()[0].firstChild.innerHTML;
            let confirmationHeader = spbcTable['warning_h_'+self.attr('row-action')] || spbcTable.warning_default;
            let confirmationText = spbcTable['warning_t_'+self.attr('row-action')] || '';
            // init row actions with no confirm required
            if ( spbcBulkAction || noConfirmActions.any.includes(data.add_action) ) {
                // do not request user confirmation if the action is excluded or if it is a bulk action
                spbcSendAJAXRequest(data, params, self.parents('tr'));
            } else {
                // do request confirmation otherwise
                spbcModal.open().confirm(confirmationHeader, confirmationText, fileName, (confirmed) => {
                    if (confirmed) {
                        spbcSendAJAXRequest(data, params, self.parents('tr'));
                    }
                });
            }
        });
}

/**
 * Row actions with no confirm required.
 * @param {object} spbcPublic Global localized SPBC object
 * @return {{}}
 */
function spbcGetNoConfirmActions(spbcPublic) {
    let noConfirmActionsEmpty = {
        'any': [],
        'restricted': [],
        'defaults': [],
    };
    let noConfirmActions = noConfirmActionsEmpty;
    try {
        if ( typeof spbcPublic !== 'undefined' && spbcPublic.hasOwnProperty('no_confirm_row_actions')) {
            noConfirmActions = JSON.parse(spbcPublic.no_confirm_row_actions);
        }
        if (
            typeof noConfirmActions.any.includes !== 'function' ||
            typeof noConfirmActions.restricted.includes !== 'function' ||
            typeof noConfirmActions.defaults.includes !== 'function'
        ) {
            noConfirmActions = noConfirmActionsEmpty;
        }
    } catch (e) {
        noConfirmActions = noConfirmActionsEmpty;
    }
    return noConfirmActions;
}

/**
 * Callback for table row actions
 *
 * @param {obj|string} result
 * @param {obj} data
 * @param {obj} params
 * @param {obj} obj
 */
function spbcTblRowActionsCallback(result, data, params, obj) {
    if (result.color) {
        obj.css({background: result.background, color: result.color});
    }
    if (result.html) {
        obj.parent().parent().parent().prepend(result.html);
        setTimeout(function() {
            obj.fadeOut(300);
        }, 1500);
        if ( ! spbcBulkAction) {
            setTimeout(spbcReloadAccordion, 1900);
        }
    }

    if (
        data.add_action === 'copy_file_info'
    ) {
        if (result.success === true && result.data.file_info) {
            window.
                prompt('Copy the file info below and send it to support@cleantalk.org: ', result.data.file_info);
        } else {
            let errorText = (typeof result.data.error !== 'undefined') ?
                result.data.error :
                'Unknown copy_file_info error';
            spbcModal.open().putError( errorText );
        }
    }

    if (result.temp_html) {
        let tmp=obj.html();
        obj.html(result.temp_html);
        if (result.updated_template !== undefined) {
            let updatedType = result.updated_template_type;
            let template = result.updated_template;
            let rowsInTemplate = jQuery(template).find('.wp-list-table tbody tr');
            let countRowInTemplate = rowsInTemplate.length;
            let targetTab = jQuery('[aria-controls="spbc_scan_accordion_tab_' + updatedType + '"]');

            if (targetTab.length > 0) {
                let table = jQuery('#spbc_tbl__scanner_' + updatedType);
                // Count files in header
                jQuery('.spbc_bad_type_count.' + updatedType + '_counter').text(countRowInTemplate);
                // Count rows in table
                let countExistingRows = table.find('.wp-list-table tbody tr').length;
                table.remove();
                jQuery('#spbc_scan_accordion_tab_' + updatedType).append(template);
                // Marked new rows
                jQuery(jQuery('#spbc_scan_accordion_tab_' + updatedType)
                    .find('.wp-list-table tbody tr'))
                    .each(function(index, element) {
                        if (++index > countExistingRows) {
                            jQuery(element).css('outline', '1px solid green');
                        }
                    });
                targetTab.click();
            } else {
                if (updatedType === 'analysis_log') {
                    // eslint-disable-next-line max-len
                    let tabHeaderTemplate = '<h3 class="ui-accordion-header ui-corner-top ui-state-default ui-accordion-icons ui-accordion-header-collapsed ui-corner-all" role="tab" id="ui-id-2" aria-controls="spbc_scan_accordion_tab_analysis_log" aria-selected="false" aria-expanded="false" tabindex="-1"><span class="ui-accordion-header-icon ui-icon ui-icon-triangle-1-e"></span><a href="#">Analysis Log (<span class="spbc_bad_type_count analysis_log_counter">' + countRowInTemplate + '</span>)</a></h3>';
                    // eslint-disable-next-line max-len
                    let tabBodyTemplate = '<div id="spbc_scan_accordion_tab_analysis_log" class="ui-accordion-content ui-corner-bottom ui-helper-reset ui-widget-content" aria-labelledby="ui-id-2" role="tabpanel" aria-hidden="true" style="display: none;"><p class="spbc_hint">Files sent for analysis.</p><div id="spbc_tbl__scanner_analysis_log" type="analysis_log" class="tbl-root">' +
                        template +
                        '</div>';
                    jQuery('#spbc_scan_accordion_tab_critical').after(tabHeaderTemplate + tabBodyTemplate);
                    targetTab.click();
                }
            }
        }
        setTimeout(function() {
            obj
                .html(tmp)
                .css({background: 'inherit'})
                .find('.column-primary .row-actions .tbl-row_action--' + data.add_action)
                .remove();
            spbcTblBulkActionsListen();
            spbcTblRowActionsListen();
            spbcStartShowHide();
        }, 5000);
    }
    if (spbcBulkAction) {
        spbcBulkAction.click();
    }
}

/**
 * Table pagination actions
 */
function spbcTblPaginationListen() {
    let data = {action: 'spbc_tbl-pagination'};
    let params = {callback: spbcTblPaginationCallback, notJson: true};
    jQuery('.tbl-pagination--button').on('click', function() {
        jQuery(this).parents('.tbl-root').find('.tbl-pagination--button').attr('disabled', 'disabled');
    });
    jQuery('.tbl-pagination--go').on('click', function() {
        let self = jQuery(this);
        let obj = self.parents('.tbl-root');
        data.page = self.siblings('.tbl-pagination--curr_page').val();
        data.type = obj.attr('type');
        params.spinner = self.siblings('.tbl-preloader--small');
        spbcSendAJAXRequest(data, params, obj);
    });
    jQuery('.tbl-pagination--prev').on('click', function() {
        let self = jQuery(this);
        let obj = self.parents('.tbl-root');
        data.page = self.parents('.tbl-pagination--wrapper').attr('prev_page');
        data.type = obj.attr('type');
        params.spinner = self.siblings('.tbl-preloader--small');
        spbcSendAJAXRequest(data, params, obj);
    });
    jQuery('.tbl-pagination--next').on('click', function() {
        let self = jQuery(this);
        let obj = self.parents('.tbl-root');
        data.page = self.parents('.tbl-pagination--wrapper').attr('next_page');
        data.type = obj.attr('type');
        params.spinner = self.siblings('.tbl-preloader--small');
        spbcSendAJAXRequest(data, params, obj);
    });
    jQuery('.tbl-pagination--end').on('click', function() {
        let self = jQuery(this);
        let obj = self.parents('.tbl-root');
        data.page = self.parents('.tbl-pagination--wrapper').attr('last_page');
        data.type = obj.attr('type');
        params.spinner = self.siblings('.tbl-preloader--small');
        spbcSendAJAXRequest(data, params, obj);
    });
    jQuery('.tbl-pagination--start').on('click', function() {
        let self = jQuery(this);
        let obj = self.parents('.tbl-root');
        data.page = 1;
        data.type = obj.attr('type');
        params.spinner = self.siblings('.tbl-preloader--small');
        spbcSendAJAXRequest(data, params, obj);
    });
}

/**
 * Callback for Table pagination actions
 *
 * @param {obj|string} result
 * @param {obj} data
 * @param {obj} params
 * @param {obj} obj
 */
function spbcTblPaginationCallback(result, data, params, obj) {
    jQuery(obj)
        .html(result)
        .find('.tbl-pagination--button').removeAttr('disabled');
    spbcTblBulkActionsListen();
    spbcTblRowActionsListen();
    spbcTblPaginationListen();
    spbcTblSortListen();
    spbcStartShowHide();
}

/**
 * Table sort actions
 */
function spbcTblSortListen() {
    let params = {callback: spbcTblSortCallback, notJson: true};
    jQuery('.tbl-column-sortable').on('click', function(e) {
        if (e.target.classList.contains('tbl-sorting_indicator')) {
            let self = jQuery(this);
            let obj = self.parents('.tbl-root');
            let domain = obj.attr('type') == 'links'? jQuery('#spbc_tbl__scanner__outbound_links b').html(): '';
            let data = {
                action: 'spbc_tbl-sort',
                order_by: self.attr('id'),
                order: self.attr('sort_direction'),
                type: obj.attr('type'),
                domain: domain,
            };
            spbcSendAJAXRequest(data, params, obj);
        }
    });
}

/**
 * Callback for Table sort actions
 *
 * @param {obj|string} result
 * @param {obj} data
 * @param {obj} params
 * @param {obj} obj
 */
function spbcTblSortCallback(result, data, params, obj) {
    jQuery(obj).html(result);
    spbcTblBulkActionsListen();
    spbcTblRowActionsListen();
    spbcTblPaginationListen();
    spbcTblSortListen();
}

jQuery(document).ready(function() {
    // Table. Row actions handler
    spbcTblBulkActionsListen();
    spbcTblRowActionsListen();
    spbcTblPaginationListen();
    spbcTblSortListen();
    spbcUpdateEstimatedTime();
});

/**
 * Switching table handler
 * Using by inline php code
 *
 * @param {obj} obj
 * @param {obj} table
 *
 */
function spbcScannerSwitchTable(obj, table) {/* eslint-disable-line no-unused-vars */
    let _obj = jQuery(obj);
    let domain = _obj.parents('.row-actions').attr('uid');
    let data = {action: 'spbc_tbl-switch', type: table, domain: domain};
    let params = {callback: spbcTblPaginationCallback, notJson: true};
    spbcSendAJAXRequest(data, params, _obj.parents('.tbl-root'));
}

/**
 * Open/close table rows handler
 * Using by inline php code
 *
 * @param {string} blockId
 * @param {string} columnKey
 */
function spbcShowHideRows(blockId, columnKey) {/* eslint-disable-line no-unused-vars */
    let className = '.' + columnKey + '_block_' + blockId;
    let block = jQuery(className);
    if (block.hasClass('mob_table_active')) {
        block.removeClass('mob_table_active');
    } else {
        block.addClass('mob_table_active');
    }
}

/**
 * Update estimated time
 */
function spbcUpdateEstimatedTime() {
    spbcUpdateTables();
    setInterval(() => {
        spbcUpdateTables();
    }, 60000);
}

/**
 * Update tables
 * @param {obj} tab
 * @param {obj} params
 */
function spbcUpdateTables(tab, params) {
    // todo params is always not provided!
    let tabName = 'scanner';
    let data = {
        action: 'spbc_settings__draw_elements',
        tab_name: tabName,
        security: spbcSettings.ajax_nonce,
    };
    let currentParams = {
        callback: spbcViewUpdateEstimatedTime,
        notJson: true,
        additional: params || null,
    };
    spbcSendAJAXRequest( data, currentParams, tab );
}

/**
 * Update estimated time
 * @param {string} result
 */
function spbcViewUpdateEstimatedTime(result) {
    // todo the function unsafely trust the result, needs to validate
    const parser = new DOMParser();
    const newTables = parser.parseFromString(result, 'text/html');
    // todo validate if selector is valid
    const newAnalysisRows = newTables.querySelectorAll('#spbc_tbl__scanner_analysis_log tbody tr');
    // todo validate if selector is valid
    const currentAnalysisRows = document.querySelectorAll('#spbc_tbl__scanner_analysis_log tbody tr');
    // todo what this was for?
    let newLastUpdateTime = newTables.querySelector('#spbc_last_update_time');
    if (newLastUpdateTime) {
        newLastUpdateTime = newLastUpdateTime.innerText;
    }

    currentAnalysisRows.forEach((currentRow) => {
        if (currentRow.querySelector('.pscan_estimated_execution_time').innerText === 'Done') {
            return;
        }

        let status = '';
        let time = '';
        let comment = '';
        let text = '';
        newAnalysisRows.forEach((newRow) => {
            currentAnalysisRows.forEach((currentRow) => {
                // validate selector result
                if (currentRow.querySelector('.spbcFullText') !== null) {
                    text = currentRow.querySelector('.spbcFullText').innerText;
                }
                if (newRow.querySelector('.spbcFullText').innerText === text) {
                    // todo all the selectors data is not protected against null values!
                    status = newRow.querySelector('.pscan_status').innerHTML;
                    currentRow.querySelector('.pscan_status').innerHTML = status;
                    time = newRow.querySelector('.pscan_estimated_execution_time').innerHTML;
                    currentRow.querySelector('.pscan_estimated_execution_time').innerHTML = time;
                    comment = newRow.querySelector('.analysis_comment').innerHTML;
                    currentRow.querySelector('.analysis_comment').innerHTML = comment;
                }
            });
        });
    });

    spbcUpdatePscanCloudAnalysisInfo();
}

/**
 * Update psacn cloud analysis info
 */
function spbcUpdatePscanCloudAnalysisInfo() {
    let data = {
        action: 'spbc_analysyis_files_stats__get_html',
        sub_action: 'give_me_html',
        security: spbcSettings.ajax_nonce,
    };

    let params = {
        callback: spbcViweUpdateAnalysisInfo,
        notJson: true,
    };

    spbcSendAJAXRequest(data, params);
}

/**
 * Update analysis info
 * @param {string} result
 */
function spbcViweUpdateAnalysisInfo(result) {
    let info = document.getElementById('spbc_analysis_files_stats');

    if (info) {
        info.innerHTML = result;
    }
}
