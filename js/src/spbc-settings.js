// Printf for JS
String.prototype.printf = function(){
    var formatted = this;
    for( var arg in arguments ) {
        var before_formatted = formatted.substring(0, formatted.indexOf("%s", 0));
        var after_formatted  = formatted.substring(formatted.indexOf("%s", 0)+2, formatted.length);
        formatted = before_formatted + arguments[arg] + after_formatted;
    }
    return formatted;
};

// Switching tabs
function spbc_switchTab(tab, params){

	var tab_name = tab.classList[1].replace('spbc_tab_nav-', '')
	jQuery('.spbc_tab_nav').removeClass('spbc_tab_nav--active');
	jQuery('.spbc_tab').removeClass('spbc_tab--active');
	jQuery(tab).addClass('spbc_tab_nav--active');
	jQuery('.spbc_tab-'+tab_name).addClass('spbc_tab--active');

	if(!jQuery(tab).data('loaded')){
		var data = {
			action: 'spbc_settings__draw_elements',
			tab_name: tab_name,
			security: spbcSettings.ajax_nonce
		};
		var params = {
			callback: spbc_draw_settings_callback,
			notJson: true,
            additional: params || null,
		};
		spbc_sendAJAXRequest( data, params, tab );
	}else if(params && params.action){
        switch (params.action){
            case 'highlight':
                spbcHighlightElement(params.target, params.times);
                break;
            case 'click':
                setTimeout(function(){
                    jQuery('#'+params.additional.target).click();
                }, 500);
                break;
        }
	}
}

function spbc_draw_settings_callback(result, data, params, obj){

	jQuery(obj).data('loaded', true);
	jQuery('.spbc_tab-'+data.tab_name).replaceWith(result);
	var tab = jQuery('.spbc_tab-'+data.tab_name);
	tab.addClass('spbc_tab--active');

	jQuery(document).off( 'click', '.spbc_long_description__show');
	jQuery(document).on('click', '.spbc_long_description__show', function(){
		self = jQuery(this);
		spbc_settings__show_description(self, self.attr('setting'));
	});

	if(params.additional){
	    switch (params.additional.action) {
            case 'highlight':
		        spbcHighlightElement(params.additional.target, params.additional.times);
                break;
            case 'click':
                setTimeout(function(){
		            jQuery('#'+params.additional.target).click();
                }, 500);
                break;
        }
    }

	jQuery(tab).on('click', '.spbc_hint-send_'+data.tab_name, function(){
			jQuery('.spbc_hint-send_'+data.tab_name).hide();
		spbc_sendAJAXRequest(
			{action: 'spbc_send_'+data.tab_name, tab_name: data.tab_name},
			{callback: spbc_send_logs_callback}
		);
	});
}

function spbc_send_logs_callback(result, data, params, obj){
	jQuery('.spbc_tab_nav-'+data.tab_name).data('loaded', false);
	spbc_switchTab(document.getElementsByClassName('spbc_tab_nav-'+data.tab_name)[0]);
}

// Settings dependences
function spbcSettingsDependenciesbyId(settingsIDs, enable){

	if(typeof settingsIDs === 'string'){
		tmp = [];
		tmp.push(settingsIDs);
		settingsIDs = tmp;
	}

	enable = typeof enable === 'undefined' ? null : +enable;

	settingsIDs.forEach(function(settingID, i, arr){

		var elem = document.getElementById('spbc_setting_'+settingID),
            do_disable = function(){elem.setAttribute('disabled', 'disabled');},
            do_enable  = function(){elem.removeAttribute('disabled');};

        if(enable !== null) // Set
            enable === 1 ? do_enable() : do_disable();
        else // Switch
            elem.getAttribute('disabled') === null ? do_disable() : do_enable();

	});
}

/**
 * Recursive in case children found!
 *
 * Settings dependencies
 *
 */
function spbcSettingsDependencies(settingNames, enable){

	// Cast settingNames to array
	settingNames = typeof settingNames === 'string' ? settingNames.split(',') : settingNames;
	enable       = typeof enable === 'undefined' ? +event.target.checked : +enable;

	settingNames.forEach(function(settingName, i, arr){

		document.getElementsByName('spbc_settings['+settingName+']')
			.forEach(function( elem, i, arr ){

				var	do_disable = function(){elem.setAttribute('disabled', 'disabled');},
					do_enable  = function(){elem.removeAttribute('disabled');};
				if(enable !== null) // Set
					enable === 1 ? do_enable() : do_disable();
				else // Switch
					elem.getAttribute('disabled') === null ? do_disable() : do_enable();

				var children = elem.getAttribute('children');
				if( children !== null ){
					spbcSettingsDependencies(children, enable && elem.checked);
				}
			});
	});
}

function spbc_settings__show_description(label, setting_id){
	
	var remove_desc_func = function(e){
		if(typeof e === 'undefined' || ((jQuery(e.target).parent('.spbc_long_desc').length == 0 || jQuery(e.target).hasClass('spbc_long_desc__cancel')) && !jQuery(e.target).hasClass('spbc_long_description__show'))){
			jQuery('.spbc_long_desc').remove();
			jQuery(document).off('click', remove_desc_func);
		}
	};
	
	remove_desc_func();
	
	label.after("<div id='spbc_long_desc__"+setting_id+"' class='spbc_long_desc'></div>");
	var obj = jQuery('#spbc_long_desc__'+setting_id);
	obj.append("<i class='icon-spin1 animate-spin'></i>")
		.append("<div class='spbc_long_desc__angle'></div>")
		.css({
			top: label.position().top - 5,
			left: label.position().left + 25
		});
	
	
	spbc_sendAJAXRequest(
		{action: 'spbc_settings__get_description', setting_id: setting_id},
		{
			spinner: obj.children('img'),
			callback: function(result, data, params, obj){
								
				obj.empty()
					.append("<div class='spbc_long_desc__angle'></div>")
					.append("<i class='spbc_long_desc__cancel icon-cancel'></i>")
					.append("<h3 class='spbc_long_desc__title'>"+result.title+"</h3>")
					.append("<p>"+result.desc+"</p>");
				
				jQuery(document).on('click', remove_desc_func);
			}
		},
		obj
	);
}

// Shows/hides full text
function spbcStartShowHide(){
	jQuery('.spbcShortText')
		.off('mouseover' )
		.on('mouseover', function(){ jQuery(this).next().show(); })
		.off('mouseout' )
		.on('mouseout',   function(){ jQuery(this).next().hide();  });
	jQuery('.spbcFullText')
		.off('mouseout' )
		.on('mouseout',   function(){ jQuery(this).hide();  })
		.off('mouseover' )
		.on('mouseover', function(){ jQuery(this).show(); })
}

// Generate and save confirmation code
function spbctGenerateConfirmationCode() {

	var data = {};
	var res = {};
	res.success = false;
	data.security = spbcSettings.ajax_nonce;
	data.action = 'spbc_generate_confirmation_code';

	jQuery.ajax({
		type: "POST",
		async: false,
		url: spbcSettings.ajaxurl,
		data: data,
		success: function(result){
			if(result.success) {
				res.success = true;
			} else {
				res.text = result.data;
			}
		},
	});
	return res;
}
// Check confirmation code
function spbctCheckConfirmationCode( radioButton, timeout, timer ) {

	var element = radioButton;
	var data = {};
	data.security = spbcSettings.ajax_nonce;
	data.action = 'spbc_check_confirmation_code';
	data.code = jQuery('#confirmation-code input').val();

	jQuery.ajax({
		type: "POST",
		async: false,
		url: spbcSettings.ajaxurl,
		data: data,
		success: function(result){
			if(result.success) {
				jQuery('[name *= 2fa__enable]').attr("checked", "");
				element.checked = true;
				jQuery('#spbc_setting_2fa__roles').removeAttr('disabled');
				jQuery('#spbc_setting_2fa__roles > option:first').attr('selected','selected');
				clearTimeout( timeout );
				timer.remove();
				jQuery('#confirmation-code').dialog( "close" );
			} else {
				alert('Code verification failed!');
			}
		},
	});

}

/**
 * Checking current account status for renew notice
 */
function spbc_banner_check() {
	var bannerChecker = setInterval( function() {
		spbc_sendAJAXRequest(
			{action: 'spbc_settings__check_renew_banner'},
			{
				callback: function(result, data, params, obj){
					if (result.close_renew_banner) {
						if (jQuery('#spbc_renew_notice').length)
							jQuery('#spbc_renew_notice').hide('slow');
						if (jQuery('#spbc_trial_notice').length)
							jQuery('#spbc_trial_notice').hide('slow');
						clearInterval(bannerChecker);
					}									
				}
			}
		);
	}, 60000);
}

jQuery(document).ready(function(){
	
	jQuery('#spbc_gdpr_open_modal').on('click', function(){
		jQuery('#gdpr_dialog').dialog({
			modal:true, 
			show: true,
			position: { my: "center", at: "center", of: window },
			width: +(jQuery('#wpbody').width() / 100 * 70), // 70% of #wpbody
			height: 'auto',
			title: 'GDPR compliance',
			draggable: false,
			resizable: false,
			closeText: "Close",
		});
	});

	// Checking email receiving possibility for activation 2FA
	jQuery(document).on('click', '[name*=fa__enable]:not([value=0]),#confirmation-code--resend', function(e){

		e.preventDefault();

		jQuery('#confirmation-code--resend').attr('disabled', 'disabled')
			.append('<div class="circle circle--small -animation--circle -animation--30s "><div class="circle-inner"></div></div>');
		var enableResend = setTimeout(function(){
			jQuery('#confirmation-code--resend').removeAttr('disabled');
			jQuery('#confirmation-code--resend>.circle').remove();
		}, 30000);

		var res = spbctGenerateConfirmationCode();
		if( res.success ) {
			jQuery('#confirmation-code input').val('');
			jQuery('#confirmation-code').dialog({
				modal: true,
				title: 'Confirmation code',
				width: 310,
				buttons: {
					Cancel: function() {
						jQuery( this ).dialog( "close" );
						clearTimeout( enableResend );
						jQuery('#confirmation-code--resend>.circle').remove();
					},
					Ok: function() {
						spbctCheckConfirmationCode(e.target, enableResend, jQuery('#confirmation-code--resend>.circle'));
					}
				},
				draggable: false,
				resizable: false,
			});
		} else {
			alert(res.text);
		}
	});
	
	if (jQuery('#spbc_renew_notice').length || jQuery('#spbc_trial_notice').length) {
		spbc_banner_check();
	}

	// Sync button
	jQuery('#spbc_button__sync').on('click', function(){
		spbc_sendAJAXRequest(
			{action: 'spbc_sync'},
			{
				timeout: 25000,
				button: document.getElementById('spbc_button__sync' ),
				spinner: jQuery('#spbc_button__sync .spbc_preloader_button' ),
				callback: function(result, data, params, obj){
					jQuery('#spbc_button__sync .spbc_success').show(300);
					setTimeout(function(){jQuery('#spbc_button__sync .spbc_success').hide(300);}, 2000);
					if(result.reload)
						document.location.reload();
				}
			}
		);
	});

	if( spbcSettings.key_changed ){
		jQuery('#spbc_button__sync').click();
	}

	// Get Key Auto button
	jQuery(document).on('click', '#spbc_setting_get_key_auto', function(){
		spbc_sendAJAXRequest(
			{action: 'spbc_get_key_auto'},
			{
				timeout: 25000,
				button: document.getElementById('spbc_setting_get_key_auto' ),
				spinner: jQuery('#spbc_setting_get_key_auto .spbc_preloader_button' ),
				callback: function(result, data, params, obj){
					jQuery('#spbc_setting_get_key_auto .spbc_success').show(300);
					setTimeout(function(){jQuery('#spbc_setting_get_key_auto .spbc_success').hide(300);}, 2000);
					if(result.reload)
						document.location.reload();
					if(result.getTemplates) {
						spbcModal.loaded = result.getTemplates;
						spbcModal.open();
						document.addEventListener("spbcModalClosed", function( e ) {
							document.location.reload();
						});
					}
				}
			}
		);
	});

	// Import settings
	jQuery( document ).on('click', '#spbc_settings_templates_import_button', function(){
		jQuery('#spbc-ajax-result').remove();
		var optionSelected = jQuery('option:selected', jQuery('#spbc_settings_templates_import'));
		var templateNameInput = jQuery('#spbc_settings_templates_import_name');
		templateNameInput.css('border-color', 'inherit');
		if( typeof optionSelected.data('id') === "undefined" ) {
			console.log( 'Attribute "data-id" not set for the option.' );
			return;
		}
		var data = {
			'template_id' : optionSelected.data('id'),
			'template_name' : optionSelected.data('name'),
			'settings' : optionSelected.data('settings')
		};
		var button = this;
		spbc_sendAJAXRequest(
			{action: 'spbc_settings_templates_import', data: data},
			{
				timeout: 25000,
				button: button,
				spinner: jQuery('#spbc_settings_templates_import_button .spbc_preloader_button' ),
				callback: function(result, data, params, obj){
					if(result.success) {
						jQuery( "<p id='spbc-ajax-result' class='success'>" + result.data + "</p>" ).insertAfter( jQuery(button) );
						jQuery('#spbc_settings_templates_import_button .spbc_success').show(300);
						setTimeout(function(){jQuery('#spbc_settings_templates_import_button .spbc_success').hide(300);}, 2000);
						document.addEventListener("spbcModalClosed", function( e ) {
							document.location.reload();
						});
						setTimeout(function(){spbcModal.close()}, 2000);
					} else {
						jQuery( "<p id='spbc-ajax-result' class='error'>" + result.data + "</p>" ).insertAfter( jQuery(button) );
					}
				}
			}
		);
	});

	// Export settings
	jQuery( document ).on('click', '#spbc_settings_templates_export_button', function(){
		jQuery('#spbc-ajax-result').remove();
		var optionSelected = jQuery('option:selected', jQuery('#spbc_settings_templates_export'));
		var templateNameInput = jQuery('#spbc_settings_templates_export_name');
		templateNameInput.css('border-color', 'inherit');
		if( typeof optionSelected.data('id') === "undefined" ) {
			console.log( 'Attribute "data-id" not set for the option.' );
			return;
		}
		if( optionSelected.data('id') === 'new_template' ) {
			var templateName = templateNameInput.val();
			if( templateName === '' ) {
				templateNameInput.css('border-color', 'red');
				return;
			}
			var data = {
				'template_name' : templateName
			}
		} else {
			var data = {
				'template_id' : optionSelected.data('id')
			}
		}
		var button = this;
		spbc_sendAJAXRequest(
			{action: 'spbc_settings_templates_export', data: data},
			{
				timeout: 25000,
				button: button,
				spinner: jQuery('#spbc_settings_templates_export_button .spbc_preloader_button' ),
				callback: function(result, data, params, obj){
					if(result.success) {
						jQuery( "<p id='spbc-ajax-result' class='success'>" + result.data + "</p>" ).insertAfter( jQuery(button) );
						jQuery('#spbc_settings_templates_export_button .spbc_success').show(300);
						setTimeout(function(){jQuery('#spbc_settings_templates_export_button .spbc_success').hide(300);}, 2000);
						document.addEventListener("spbcModalClosed", function( e ) {
							document.location.reload();
						});
						setTimeout(function(){spbcModal.close()}, 2000);
					} else {
						jQuery( "<p id='spbc-ajax-result' class='error'>" + result.data + "</p>" ).insertAfter( jQuery(button) );
					}
				}
			}
		);
	});

	// Reset settings
	jQuery( document ).on('click', '#spbc_settings_templates_reset_button', function(){
		var button = this;
		spbc_sendAJAXRequest(
			{action: 'spbc_settings_templates_reset'},
			{
				timeout: 25000,
				button: button,
				spinner: jQuery('#spbc_settings_templates_reset_button .spbc_preloader_button' ),
				callback: function(result, data, params, obj){
					if(result.success) {
						jQuery( "<p id='spbc-ajax-result' class='success'>" + result.data + "</p>" ).insertAfter( jQuery(button) );
						jQuery('#spbc_settings_templates_reset_button .spbc_success').show(300);
						setTimeout(function(){jQuery('#spbc_settings_templates_reset_button .spbc_success').hide(300);}, 2000);
						document.addEventListener("spbcModalClosed", function( e ) {
							document.location.reload();
						});
						setTimeout(function(){spbcModal.close()}, 2000);
					} else {
						jQuery( "<p id='spbc-ajax-result' class='error'>" + result.data + "</p>" ).insertAfter( jQuery(button) );
					}
				}
			}
		);
	});

	jQuery(document).on('change', '#spbc_settings_templates_export',function(){
		var optionSelected = jQuery("option:selected", this);
		if ( optionSelected.data("id") === 'new_template' ) {
			jQuery(this).parent().parent().find('#spbc_settings_templates_export_name').show();
		} else {
			jQuery(this).parent().parent().find('#spbc_settings_templates_export_name').hide();
		}
	});

	//* TAB_CONTROL
	
		jQuery('.spbc_tab_nav-summary').data('loaded', true); // Summary tab loaded by default
		jQuery('.spbc_tabs_nav_wrapper').on('click', '.spbc_tab_nav', function(event){
			spbc_switchTab(event.currentTarget);
		});
		
		// Get additional params
        var params = {
            target: location.search.match(/spbc_target=(\S*?)(&|$)/) ? location.search.match(/spbc_target=(\S*?)(&|$)/)[1] : null,
            action: location.search.match(/spbc_action=(\S*?)(&|$)/) ? location.search.match(/spbc_action=(\S*?)(&|$)/)[1] : null,
            times: location.search.match(/spbc_times=(\S*?)(&|$)/)   ? location.search.match(/spbc_times=(\S*?)(&|$)/)[1]  : 3,
        };
        // Legacy support
        params.target = location.search.match(/spbc_highlight=(\S*?)(&|$)/) ? location.search.match(/spbc_highlight=(\S*?)(&|$)/)[1] : params.target;
        params.action = location.search.search(/spbc_highlight=(\S*?)(&|$)/) != -1
            ? 'highlight'
            : params.action;

		// Get open tab form query
		var spbc_tab = document.getElementsByClassName('spbc_tab_nav-' + (location.search.match(/spbc_tab=(\S*?)(&|$)/) ? location.search.match(/spbc_tab=(\S*?)(&|$)/)[1] : ''))[0] || null;

		// TAB SWITCHING
		// Switch by URL
		if(spbc_tab){

		// Switch to DEBUG
		}else if( +spbcSettings.debug ){
			spbc_tab = document.getElementsByClassName('spbc_tab_nav-debug')[0];
		// Switch by DEFAULT
		}else if( +spbcSettings.wpms && !+spbcSettings.is_main_site){
			spbc_tab = document.getElementsByClassName('spbc_tab_nav-security_log')[0];
		// Switch if KEY IS BAD
		}else if( +spbcSettings.key_is_ok ){
			// spbc_tab = document.getElementsByClassName('spbc_tab_nav-summary')[0];
			spbc_tab = document.getElementsByClassName('spbc_tab_nav-scanner')[0]; 
		// Switch if KEY IS BAD
		}else{
			spbc_tab = document.getElementsByClassName('spbc_tab_nav-settings_general')[0];
			params = {
			    target: 'spbc_key',
                action: 'highlight',
                times: 3,
            };
		}
		
		// Switch tab
		if(spbc_tab) spbc_switchTab(spbc_tab, params);
		
	//*/ TAB_CONROL END
});