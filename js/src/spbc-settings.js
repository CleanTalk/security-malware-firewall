// Printf for JS
String.prototype.printf = function() { // eslint-disable-line no-extend-native
    let formatted = this;
    /* eslint-disable guard-for-in */
    for ( let arg in arguments ) { // eslint-disable-line prefer-rest-params
        let beforeFormatted = formatted.substring(0, formatted.indexOf('%s', 0));
        let afterFormatted = formatted.substring(formatted.indexOf('%s', 0)+2, formatted.length);
        formatted = beforeFormatted + arguments[arg] + afterFormatted; // eslint-disable-line prefer-rest-params
    }
    return formatted;
};

/**
 * Switching tabs
 *
 * @param {object} tab
 * @param {object} params
 */
function spbcSwitchTab(tab, params) {
    let tabName = tab.classList[1].replace('spbc_tab_nav-', '');

    // update url
    let searchParams = new URLSearchParams(window.location.search);
    searchParams.set('spbc_tab', tabName);
    let hashParam = window.location.hash;
    let newRelativePathQuery = window.location.pathname + '?' + searchParams.toString() + hashParam;

    history.replaceState(null, '', newRelativePathQuery);

    // Hiding a tab 'Backups' if exist
    if (searchParams.get('spbc_tab') !== 'backups') {
        jQuery('.spbc_tab_nav-backups').hide();
    }

    // update active tab
    jQuery('.spbc_tab_nav').removeClass('spbc_tab_nav--active');
    jQuery('.spbc_tab').removeClass('spbc_tab--active');
    jQuery(tab).addClass('spbc_tab_nav--active');
    jQuery('.spbc_tab-' + tabName).addClass('spbc_tab--active');

    if (!jQuery(tab).data('loaded')) {
        let data = {
            action: 'spbc_settings__draw_elements',
            tab_name: tabName,
            security: spbcSettings.ajax_nonce,
        };
        params = {
            callback: spbcDrawSettingsCallback,
            notJson: true,
            additional: params || null,
        };
        spbcSendAJAXRequest( data, params, tab );
    } else if (params && params.action) {
        switch (params.action) {
        case 'highlight':
            spbcHighlightElement(params.target, params.times);
            break;
        case 'click':
            setTimeout(function() {
                jQuery('#'+params.additional.target).click();
            }, 500);
            break;
        }
    }
}

/**
 * Draws settings
 *
 * @param {*} result
 * @param {*} data
 * @param {*} params
 * @param {*} obj
 */
function spbcDrawSettingsCallback(result, data, params, obj) {
    jQuery(obj).data('loaded', true);
    jQuery('.spbc_tab-'+data.tab_name).replaceWith(result);
    let tab = jQuery('.spbc_tab-'+data.tab_name);
    tab.addClass('spbc_tab--active');

    jQuery(document).off( 'click', '.spbc_long_description__show');
    jQuery(document).on('click', '.spbc_long_description__show', function() {
        self = jQuery(this);
        spbcSettingsShowDescription(self, self.attr('setting'));
    });

    jQuery(document).off( 'click', '.spbc_long_recommendation__show');
    jQuery(document).on('click', '.spbc_long_recommendation__show', function() {
        self = jQuery(this);
        spbcSettingsShowRecommendation(self, self.attr('setting'));
    });

    if (params.additional) {
        switch (params.additional.action) {
        case 'highlight':
            spbcHighlightElement(params.additional.target, params.additional.times);
            break;
        case 'click':
            setTimeout(function() {
                jQuery('#'+params.additional.target).click();
            }, 500);
            break;
        }
    }

    jQuery(tab).on('click', '.spbc_hint-send_'+data.tab_name, function() {
        jQuery('.spbc_hint-send_'+data.tab_name).hide();
        spbcSendAJAXRequest(
            {action: 'spbc_send_'+data.tab_name, tab_name: data.tab_name},
            {callback: spbcSendLogsCallback},
        );
    });

    // scroll to anchor
    if (window.location.hash) {
        document.getElementById(window.location.hash.substring(1)).scrollIntoView();
    }

    document.dispatchEvent(
        new CustomEvent( 'spbctTabLoaded', {
            bubbles: true,
            detail: {tab: data.tab_name},
        } ),
    );
}

/**
 * Sends logs
 *
 * @param {*} result
 * @param {*} data
 * @param {*} params
 * @param {*} obj
 */
function spbcSendLogsCallback(result, data, params, obj) {
    jQuery('.spbc_tab_nav-'+data.tab_name).data('loaded', false);
    spbcSwitchTab(document.getElementsByClassName('spbc_tab_nav-'+data.tab_name)[0]);
}

/**
 * Disables/enables settings by ID
 *
 * @param {array} settingsIDs
 * @param {number} enable
 */
function spbcSettingsDependenciesbyId(settingsIDs, enable) { // eslint-disable-line no-unused-vars
    if (typeof settingsIDs === 'string') {
        tmp = [];
        tmp.push(settingsIDs);
        settingsIDs = tmp;
    }

    enable = typeof enable === 'undefined' ? null : +enable;

    settingsIDs.forEach(function(settingID, i, arr) {
        let elem = document.getElementById('spbc_setting_'+settingID);
        let doDisable = function() {
            elem.setAttribute('disabled', 'disabled');
        };
        let doEnable = function() {
            elem.removeAttribute('disabled');
        };

        if (enable !== null) {
            // Set
            enable === 1 ? doEnable() : doDisable();
        } else {
            // Switch
            elem.getAttribute('disabled') === null ? doDisable() : doEnable();
        }
    });
}

/**
 * Recursive in case children found!
 *
 * Settings dependencies
 *
 * @param {array} settingNames
 * @param {number} enable
 */
function spbcSettingsDependencies(settingNames, enable) { // eslint-disable-line no-unused-vars
    // Cast settingNames to array
    settingNames = typeof settingNames === 'string' ? settingNames.split(',') : settingNames;
    enable = typeof enable === 'undefined' ? +event.target.checked : +enable;

    settingNames.forEach(function(settingName, i, arr) {
        document.getElementsByName('spbc_settings['+settingName+']')
            .forEach(function( elem, i, arr ) {
                let doDisable = function() {
                    elem.setAttribute('disabled', 'disabled');
                };
                let doEnable = function() {
                    elem.removeAttribute('disabled');
                };
                if (enable !== null) {
                    // Set
                    enable === 1 ? doEnable() : doDisable();
                } else {
                    // Switch
                    elem.getAttribute('disabled') === null ? doDisable() : doEnable();
                }

                let children = elem.getAttribute('children');
                if ( children !== null ) {
                    spbcSettingsDependencies(children, enable && elem.checked);
                }
            });
    });
}

/**
 * Shows description
 *
 * @param {object} label
 * @param {string} settingId
 */
function spbcSettingsShowDescription(label, settingId) {
    let removeDescFunc = function(e) {
        if (
            typeof e === 'undefined' ||
            (
                jQuery(e.target).parent('.spbc_long_desc').length == 0 ||
                jQuery(e.target).hasClass('spbc_long_desc__cancel')
            ) && !jQuery(e.target).hasClass('spbc_long_description__show')
        ) {
            jQuery('.spbc_long_desc').remove();
            jQuery(document).off('click', removeDescFunc);
        }
    };

    removeDescFunc();

    label.after('<div id=\'spbc_long_desc__'+settingId+'\' class=\'spbc_long_desc\'></div>');
    let obj = jQuery('#spbc_long_desc__'+settingId);
    obj.append('<i class=\'spbc-icon-spin1 animate-spin\'></i>')
        .append('<div class=\'spbc_long_desc__angle_top_left\'></div>')
        .css({
            top: label.position().top + 25,
            left: label.position().left + 5,
        });


    spbcSendAJAXRequest(
        {action: 'spbc_settings__get_description', setting_id: settingId},
        {
            spinner: obj.children('img'),
            callback: function(result, data, params, obj) {
                obj.empty()
                    .append('<div class=\'spbc_long_desc__angle_top_left\'></div>')
                    .append('<i class=\'spbc_long_desc__cancel spbc-icon-cancel\'></i>')
                    .append('<h3 class=\'spbc_long_desc__title\'>'+result.title+'</h3>')
                    .append('<p>'+result.desc+'</p>');

                jQuery(document).on('click', removeDescFunc);
            },
        },
        obj,
    );
}

/**
 * Shows recommendation
 *
 * @param {object} label
 * @param {string} settingId
 */
function spbcSettingsShowRecommendation(label, settingId) {
    let removeRecommendationFunc = function(e) {
        if (
            typeof e === 'undefined' ||
            (
                jQuery(e.target).parent('.spbc_long_desc').length == 0 ||
                jQuery(e.target).hasClass('spbc_long_desc__cancel')
            ) && !jQuery(e.target).hasClass('spbc_long_recommendation__show')
        ) {
            jQuery('.spbc_long_desc').remove();
            jQuery(document).off('click', removeRecommendationFunc);
        }
    };

    removeRecommendationFunc();

    label.after('<div id=\'spbc_long_desc__'+settingId+'\' class=\'spbc_long_desc\'></div>');
    let obj = jQuery('#spbc_long_desc__'+settingId);
    obj.append('<i class=\'spbc-icon-spin1 animate-spin\'></i>')
        .append('<div class=\'spbc_long_desc__angle_top_left\'></div>')
        .css({
            top: label.position().top + 25,
            left: label.position().left + 5,
        });


    spbcSendAJAXRequest(
        {action: 'spbc_settings__get_recommendation', setting_id: settingId},
        {
            spinner: obj.children('img'),
            callback: function(result, data, params, obj) {
                obj.empty()
                    .append('<div class=\'spbc_long_desc__angle_top_left\'></div>')
                    .append('<i class=\'spbc_long_desc__cancel spbc-icon-cancel\'></i>')
                    .append('<h3 class=\'spbc_long_desc__title\' style=\'margin-right: 2em;\'>'+result.title+'</h3>')
                    .append('<p>'+result.desc+'</p>');

                jQuery(document).on('click', removeRecommendationFunc);
            },
        },
        obj,
    );
}

/**
 * Shows/hides full text
 */
function spbcStartShowHide() { // eslint-disable-line no-unused-vars
    jQuery('.spbcShortText')
        .off('mouseover' )
        .on('mouseover', function() {
            jQuery(this).next().show();
        })
        .off('mouseout' )
        .on('mouseout', function() {
            jQuery(this).next().hide();
        });
    jQuery('.spbcFullText')
        .off('mouseout' )
        .on('mouseout', function() {
            jQuery(this).hide();
        })
        .off('mouseover' )
        .on('mouseover', function() {
            jQuery(this).show();
        });
}

/**
 * Generate and save confirmation code
 *
 * @return {object}
 */
function spbctGenerateConfirmationCode() {
    let data = {};
    let res = {};
    res.success = false;
    data.security = spbcSettings.ajax_nonce;
    data.action = 'spbc_generate_confirmation_code';

    jQuery.ajax({
        type: 'POST',
        async: false,
        url: spbcSettings.ajaxurl,
        data: data,
        success: function(result) {
            if (result.success) {
                res.success = true;
            } else {
                res.text = result.data;
            }
        },
    });
    return res;
}

/**
 * Check confirmation code
 *
 * @param {object} radioButton
 * @param {number} timeout
 * @param {object} timer
 */
function spbctCheckConfirmationCode( radioButton, timeout, timer ) {
    let element = radioButton;
    let data = {};
    data.security = spbcSettings.ajax_nonce;
    data.action = 'spbc_check_confirmation_code';
    data.code = jQuery('#confirmation-code input').val();

    jQuery.ajax({
        type: 'POST',
        async: false,
        url: spbcSettings.ajaxurl,
        data: data,
        success: function(result) {
            if (result.success) {
                jQuery('[name *= 2fa__enable]').attr('checked', '');
                element.checked = true;
                jQuery('#spbc_setting_2fa__roles').removeAttr('disabled');
                jQuery('#spbc_setting_2fa__roles > option:first').attr('selected', 'selected');
                clearTimeout( timeout );
                timer.remove();
                jQuery('#confirmation-code').dialog( 'close' );
            } else {
                alert('Code verification failed!');
            }
        },
    });
}

/**
 * Checking current account status for renew notice
 */
function spbcBannerCheck() {
    let bannerChecker = setInterval( function() {
        spbcSendAJAXRequest(
            {action: 'spbc_settings__check_renew_banner'},
            {
                callback: function(result, data, params, obj) {
                    if (result.close_renew_banner) {
                        if (jQuery('#spbc_renew_notice').length) {
                            jQuery('#spbc_renew_notice').hide('slow');
                        }
                        if (jQuery('#spbc_trial_notice').length) {
                            jQuery('#spbc_trial_notice').hide('slow');
                        }
                        clearInterval(bannerChecker);
                    }
                },
            },
        );
    }, 60000);
}

jQuery(document).ready(function() {
    document.dispatchEvent(new CustomEvent('spbctPage', {bubbles: true}));
    document.dispatchEvent(new CustomEvent('spbctPageTabs', {bubbles: true}));
    document.dispatchEvent(new CustomEvent('spbctMobAboutCT', {bubbles: true}));

    jQuery('#spbc_gdpr_open_modal').on('click', function() {
        jQuery('#gdpr_dialog').dialog({
            modal: true,
            show: true,
            position: {my: 'center', at: 'center', of: window},
            width: +(jQuery('#wpbody').width() / 100 * 70), // 70% of #wpbody
            height: 'auto',
            title: 'GDPR compliance',
            draggable: false,
            resizable: false,
            closeText: 'Close',
        });
    });

    // Checking email receiving possibility for activation 2FA
    jQuery(document).on('click', '[name*=fa__enable]:not([value=0]),#confirmation-code--resend', function(e) {
        e.preventDefault();

        let view = '<div class="circle circle--small -animation--circle -animation--30s ">' +
            '<div class="circle-inner"></div></div>';
        jQuery('#confirmation-code--resend').attr('disabled', 'disabled')
            .append(view);
        let enableResend = setTimeout(function() {
            jQuery('#confirmation-code--resend').removeAttr('disabled');
            jQuery('#confirmation-code--resend>.circle').remove();
        }, 30000);

        let res = spbctGenerateConfirmationCode();
        if ( res.success ) {
            jQuery('#confirmation-code input').val('');
            jQuery('#confirmation-code').dialog({
                modal: true,
                title: 'Confirmation code',
                width: 310,
                buttons: {
                    Cancel: function() {
                        jQuery( this ).dialog( 'close' );
                        clearTimeout( enableResend );
                        jQuery('#confirmation-code--resend>.circle').remove();
                    },
                    Ok: function() {
                        let selector = '#confirmation-code--resend>.circle';
                        spbctCheckConfirmationCode(e.target, enableResend, jQuery(selector));
                    },
                },
                draggable: false,
                resizable: false,
            });
        } else {
            alert(res.text);
        }
    });

    if (jQuery('#spbc_renew_notice').length || jQuery('#spbc_trial_notice').length) {
        spbcBannerCheck();
    }

    // Sync button migrated to react

    if ( spbcSettings.key_changed ) {
        jQuery('#spbc_button__sync').click();
    }

    // Get Key Auto button
    jQuery(document).on('click', '#spbc_setting_get_key_auto', function() {
        spbcSendAJAXRequest(
            {action: 'spbc_get_key_auto', ct_admin_timezone: jQuery('#spbc_admin_timezone').val()},
            {
                timeout: 25000,
                button: document.getElementById('spbc_setting_get_key_auto' ),
                spinner: jQuery('#spbc_setting_get_key_auto .spbc_preloader_button' ),
                callback: function(result, data, params, obj) {
                    jQuery('#spbc_setting_get_key_auto .spbc_success').show(300);
                    setTimeout(function() {
                        jQuery('#spbc_setting_get_key_auto .spbc_success').hide(300);
                    }, 2000);
                    if (result.reload) {
                        document.location.reload();
                    }
                    if (result.msg) {
                        spbcModal.open().putError(result.msg);
                    }
                    if (result.getTemplates) {
                        spbcModal.loaded = result.getTemplates;
                        spbcModal.open();
                        document.addEventListener('spbcModalClosed', function( e ) {
                            document.location.reload();
                        });
                    }
                },
            },
        );
    });

    // Import settings
    jQuery( document ).on('click', '#spbc_settings_templates_import_button', function() {
        jQuery('#spbc-ajax-result').remove();
        let optionSelected = jQuery('option:selected', jQuery('#spbc_settings_templates_import'));
        let templateNameInput = jQuery('#spbc_settings_templates_import_name');
        templateNameInput.css('border-color', 'inherit');
        if ( typeof optionSelected.data('id') === 'undefined' ) {
            console.log( 'Attribute "data-id" not set for the option.' );
            return;
        }
        let data = {
            'template_id': optionSelected.data('id'),
            'template_name': optionSelected.data('name'),
            'settings': optionSelected.data('settings'),
        };
        let button = this;
        spbcSendAJAXRequest(
            {action: 'spbc_settings_templates_import', data: data},
            {
                timeout: 25000,
                button: button,
                spinner: jQuery('#spbc_settings_templates_import_button .spbc_preloader_button' ),
                callback: function(result, data, params, obj) {
                    let selector;
                    if (result.success) {
                        selector = '<p id=\'spbc-ajax-result\' class=\'success\'>' + result.data + '</p>';
                        jQuery( selector ).insertAfter( jQuery(button) );
                        jQuery('#spbc_settings_templates_import_button .spbc_success').show(300);
                        setTimeout(function() {
                            jQuery('#spbc_settings_templates_import_button .spbc_success').hide(300);
                        }, 2000);
                        document.addEventListener('spbcModalClosed', function( e ) {
                            document.location.reload();
                        });
                        setTimeout(function() {
                            spbcModal.close();
                        }, 2000);
                    } else {
                        selector = '<p id=\'spbc-ajax-result\' class=\'error\'>' + result.data + '</p>';
                        jQuery( selector ).insertAfter( jQuery(button) );
                    }
                },
            },
        );
    });

    // Export settings
    jQuery( document ).on('click', '#spbc_settings_templates_export_button', function() {
        jQuery('#spbc-ajax-result').remove();
        let optionSelected = jQuery('option:selected', jQuery('#spbc_settings_templates_export'));
        let templateNameInput = jQuery('#spbc_settings_templates_export_name');
        templateNameInput.css('border-color', 'inherit');
        if ( typeof optionSelected.data('id') === 'undefined' ) {
            console.log( 'Attribute "data-id" not set for the option.' );
            return;
        }
        let data;
        if ( optionSelected.data('id') === 'new_template' ) {
            let templateName = templateNameInput.val();
            if ( templateName === '' ) {
                templateNameInput.css('border-color', 'red');
                return;
            }
            data = {
                'template_name': templateName,
            };
        } else {
            data = {
                'template_id': optionSelected.data('id'),
            };
        }
        let button = this;
        spbcSendAJAXRequest(
            {action: 'spbc_settings_templates_export', data: data},
            {
                timeout: 25000,
                button: button,
                spinner: jQuery('#spbc_settings_templates_export_button .spbc_preloader_button' ),
                callback: function(result, data, params, obj) {
                    let selector;
                    if (result.success) {
                        selector = '<p id=\'spbc-ajax-result\' class=\'success\'>' + result.data + '</p>';
                        jQuery( selector ).insertAfter( jQuery(button) );
                        jQuery('#spbc_settings_templates_export_button .spbc_success').show(300);
                        setTimeout(function() {
                            jQuery('#spbc_settings_templates_export_button .spbc_success').hide(300);
                        }, 2000);
                        document.addEventListener('spbcModalClosed', function( e ) {
                            document.location.reload();
                        });
                        setTimeout(function() {
                            spbcModal.close();
                        }, 2000);
                    } else {
                        selector = '<p id=\'spbc-ajax-result\' class=\'error\'>' + result.data + '</p>';
                        jQuery( selector ).insertAfter( jQuery(button) );
                    }
                },
            },
        );
    });

    // Reset settings
    jQuery( document ).on('click', '#spbc_settings_templates_reset_button', function() {
        let button = this;
        spbcSendAJAXRequest(
            {action: 'spbc_settings_templates_reset'},
            {
                timeout: 25000,
                button: button,
                spinner: jQuery('#spbc_settings_templates_reset_button .spbc_preloader_button' ),
                callback: function(result, data, params, obj) {
                    let selector;
                    if (result.success) {
                        selector = '<p id=\'spbc-ajax-result\' class=\'success\'>' + result.data + '</p>';
                        jQuery( selector ).insertAfter( jQuery(button) );
                        jQuery('#spbc_settings_templates_reset_button .spbc_success').show(300);
                        setTimeout(function() {
                            jQuery('#spbc_settings_templates_reset_button .spbc_success').hide(300);
                        }, 2000);
                        document.addEventListener('spbcModalClosed', function( e ) {
                            document.location.reload();
                        });
                        setTimeout(function() {
                            spbcModal.close();
                        }, 2000);
                    } else {
                        selector = '<p id=\'spbc-ajax-result\' class=\'error\'>' + result.data + '</p>';
                        jQuery( selector ).insertAfter( jQuery(button) );
                    }
                },
            },
        );
    });

    jQuery(document).on('change', '#spbc_settings_templates_export', function() {
        let optionSelected = jQuery('option:selected', this);
        if ( optionSelected.data('id') === 'new_template' ) {
            jQuery(this).parent().parent().find('#spbc_settings_templates_export_name').show();
        } else {
            jQuery(this).parent().parent().find('#spbc_settings_templates_export_name').hide();
        }
    });

    //* TAB_CONTROL
    // migrated to react
    //* / REFRESH TAB IF ctrl+F5 END

    /**
     * Change cleantalk account email
     */
    jQuery(document).on('click', '#spbc-change-account-email', function(e) {
        e.preventDefault();

        let $this = jQuery(this);
        let accountEmailField = jQuery('#spbc-account-email');
        let accountEmail = accountEmailField.text();

        spbcToggleClass($this, 'active');

        if ($this.hasClass('active')) {
            $this.text($this.data('save-text'));
            accountEmailField.attr('contenteditable', 'true');
            accountEmailField.focus();
            accountEmailField.on('keydown', function(e) {
                if (e.code === 'Enter') {
                    e.preventDefault();
                }
            });
            accountEmailField.on('input', function(e) {
                if (e.inputType === 'insertParagraph') {
                    e.preventDefault();
                }
            });
        } else {
            spbcSendAJAXRequest(
                {
                    action: 'spbc_update_account_email',
                    accountEmail: accountEmail,
                },
                {
                    timeout: 5000,
                    callback: function(result, data, params, obj) {
                        if (result.success !== undefined && result.success === 'ok') {
                            if (result.manuallyLink !== undefined) {
                                jQuery('#spbc-key-manually-link').attr('href', result.manuallyLink);
                            }
                        }

                        if (result.error !== undefined) {
                            jQuery('#spbc-account-email').css('border-color', 'red');
                        }
                    },
                    errorOutput: function(msg) {
                        spbcModal.loaded = msg;
                        spbcModal.open();
                    },
                },
            );

            accountEmailField.attr('contenteditable', 'false');
            $this.text($this.data('default-text'));
        }
    });

    jQuery(document).on('click', '.spbct_notice-dismiss', function(e) {
        let classListNotice = this.parentElement.classList;
        let classNoticeForClose = classListNotice[classListNotice.length - 1];

        document.querySelectorAll('.' + classNoticeForClose).forEach((element) => {
            element.parentElement.setAttribute('style', 'display:none;');
            spbcSetCookie(classNoticeForClose, 1, 86400 * 30);
        });
    });
});

/**
 * Toggle class for DOM elements
 * @param {Array} arr
 * @param {string} className
 * @return {void}
 */
function spbcToggleClass(arr, className) {
    for (let i=0; i<arr.length; i++) {
        arr[i].classList.toggle(className);
    }
}
