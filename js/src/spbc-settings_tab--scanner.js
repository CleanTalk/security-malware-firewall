function spbc_popup_tip___show(show_icon){

	var tip_title = show_icon.attr('spbc_tip_title') || null;
	var	tip_text  = show_icon.attr('spbc_tip_text')  || null;
	var remove_desc_func = function(e){

		if(
			typeof e === 'undefined' ||
			(
				(jQuery(e.target).parent('.spbc_popup_tip--wrapper').length == 0 || jQuery(e.target).hasClass('spbc_popup_tip--icon---cancel')) &&
				!jQuery(e.target).hasClass('spbc_popup_tip--icon---show')
			)
		){
			jQuery('.spbc_popup_tip--wrapper').hide();
			jQuery(document).off('click', remove_desc_func);
		}
	};

	remove_desc_func();

	show_icon.after("<div class='spbc_popup_tip--wrapper'></div>");

	var obj = jQuery('.spbc_popup_tip--wrapper');

	obj.empty()
		.append("<div class='spbc_popup_tip--angle'></div>")
		.css({
			top: show_icon.position().top - 2,
			left: show_icon.position().left + 25
		});
	obj.append("<i class='spbc_popup_tip--icon---cancel icon-cancel'></i>")
		.append("<h3 class='spbc_popup_tip--title'>" + tip_title + "</h3>")
		.append("<p class='spbc_popup_tip--text'>" + tip_text + "</p>");

	jQuery(document).on('click', remove_desc_func);
	show_icon.parents('tr').on('mouseout', remove_desc_func);
}

function spbc_scanner_button_file_view_event(obj){
	var self = jQuery(obj);
	var data = {
		action: 'spbc_scanner_file_view',
		file_id: self.parents('.row-actions').attr('uid'),
	};
	var params = {
		spinner: self.parent().siblings('.tbl-preloader--tiny'),
		callback: spbc_scannerButtonView_callback,
		errorOutput: function(msg){ spbcModal.open().putError( msg ); },
	};
	spbc_sendAJAXRequest(data, params);
}

/**
 * Delete file from analysis log
 */
function spbc_scanner_analysis_log_delete_from_log(obj) {
	const self = jQuery(obj);
	const data = {
		action: 'spbc_scanner_analysis_log_delete_from_log',
		file_id: self.parents('.row-actions').attr('uid'),
	};
	var params = {
		spinner: self.parent().siblings('.tbl-preloader--tiny'),
		callback: window.location.reload(),
		errorOutput: function(msg){ spbcModal.open().putError( msg ); },
	};
	spbc_sendAJAXRequest(data, params);
}

function spbc_scanner_button_page_view_event(obj){
	var self = jQuery(obj);
	var data = {
		action: 'spbc_scanner_page_view',
		page_url: self.parents('.row-actions').attr('uid'),
	};
	var params = {
		spinner: self.parent().siblings('.tbl-preloader--tiny'),
		callback: spbc_scannerButtonView_callback,
		errorOutput: function(msg){ spbcModal.open().putError( msg ); },
	};

	let wp_wrap = jQuery('#wpwrap')
	let dialog_window = jQuery('#spbc_dialog')

	dialog_window.dialog({
		modal:true,
		title: 'Loading..',
		position: { my: "center top", at: "center top+100px" , of: window },
		width: +(wp_wrap.width() / 100 * 90),
		show: { effect: "blind", duration: 500 },
		draggable: false,
		resizable: false,
		closeText: "X",
		classes: {"ui-dialog": 'spbc---top'},
		open: function(event, ui) {
			event.target.style.overflow = 'auto';
			jQuery('#spbc_dialog').height((document.documentElement.clientHeight) / 100 * 25);
		},
		beforeClose: function(event, ui) {
			document.body.style.overflow = 'auto';
			jQuery('#spbc_dialog').empty();
		},
	})

	dialog_window.append('<img id="spbc_file_view_preloader" alt="Wait for downloading" ' +
		'class="spbc_preloader" ' +
		'src="../../wp-content/plugins/security-malware-firewall/images/preloader2.gif" ' +
		'style="' +
		'display: block; ' +
		'position: absolute; ' +
		'">')

	let spinner = jQuery('#spbc_file_view_preloader')
	let size_multiplier = (wp_wrap.width() * 0.0004)

	spinner.height(128 * size_multiplier)
	spinner.width(128 * size_multiplier)
	spinner.css({left: dialog_window.width()/2 - (128 * size_multiplier / 2)})
	spinner.css({top: dialog_window.height()/2 - (128 * size_multiplier / 2)})

	spbc_sendAJAXRequest(data, params);
}

function spbc_scannerButtonView_callback(result){

	let dialog_window = jQuery('#spbc_dialog')
	dialog_window.empty();

	jQuery('#spbc_file_view_preloader').css({display:'none'})

	let row_template = '<div class="spbc_view_file_row_wrapper"><span class="spbc_view_file_row_num">%s</span><p class="spbc_view_file_row">%s</p><br /></div>';

	for(let row in result.file){
		dialog_window.append(row_template.printf(row, result.file[row]));
	}

	let content_height = Object.keys(result.file).length * 19 < 76 ? 76 : Object.keys(result.file).length * 19,
		visible_height = (document.documentElement.clientHeight) / 100 * 75,
		overflow       = content_height < visible_height ? 'hidden' : 'scroll',
		height         = overflow === 'scroll' ? visible_height : content_height;

	dialog_window.css({
		height: height,
		overflow: overflow
	})

	dialog_window.dialog({
		modal:true,
		title: ('Loaded: ' + result.file_path),
		position: { my: "center top", at: "center top+100px" , of: window },
		width: +(jQuery('#wpwrap').width() / 100 * 90),
		show: { effect: "blind", duration: 500 },
		draggable: true,
		resizable: false,
		closeText: "X",
		classes: {"ui-dialog": 'spbc---top'},
		open: function(event, ui) {
			event.target.style.overflow = overflow;
			jQuery('#spbc_dialog').height(height);
			jQuery('.ui-widget-overlay').on('click', function() {
				jQuery("#spbc_dialog").dialog('close');
			});
		},
		beforeClose: function(event, ui) {
			document.body.style.overflow = 'auto';
			jQuery('#spbc_dialog').empty();
		},
	});

	console.log('FILE_VIEWED');

}

function spbc_scanner_button_file_view_bad_event(obj){
	var self = jQuery(obj);
	var data = {
		action: 'spbc_scanner_file_view',
		file_id: self.parents('.row-actions').attr('uid'),
	};
	var params = {
		spinner: self.parent().siblings('.tbl-preloader--tiny'),
		callback: spbc_scannerButtonViewBadFile_callback,
		errorOutput: function(msg){ spbcModal.open().putError( msg ); },
	};
	spbc_sendAJAXRequest(data, params);
}

function spbc_scanner_button_page_view_bad_event(obj){
	var self = jQuery(obj);
	var data = {
		action: 'spbc_scanner_page_view',
		page_url: self.parent().attr('uid'),
	};
	var params = {
		spinner: self.parent().siblings('.tbl-preloader--tiny'),
		callback: spbc_scannerButtonViewBad_callback,
		errorOutput: function(msg){ spbcModal.open().putError( msg ); },
	};
	spbc_sendAJAXRequest(data, params);
}

function spbc_scannerButtonViewBadFile_callback(result, data, params){

	console.log('FILE_VIEWED_BAD_CODE_FILE');
	console.log(arguments);
	jQuery('#spbc_dialog').empty();

	var row_template     = '<div class="spbc_view_file_row_wrapper"><span class="spbc_view_file_row_num">%s</span><p class="spbc_view_file_row">%s</p><br /></div>',
		row_template_bad = '<div class="spbc_view_file_row_wrapper" style="background: rgba(200,40,40,0.8);"><span class="spbc_view_file_row_num">%s</span><p class="spbc_view_file_row">%s</p><br /></div>',
		str_nums = [];

	result.weak_spots = JSON.parse(result.weak_spots);
	for(let severity in result.weak_spots){
		str_nums = str_nums.concat(Object.keys(result.weak_spots[severity]));
	}
	str_nums = [...new Set(str_nums)].sort(); // Sort bad line

	for(let str_num in str_nums){

		let row = +str_nums[str_num],
			display_depth = 2;

		// Display only existing lines of file
		for(let curr_row = row - display_depth; curr_row <= row + display_depth; curr_row++ ){
			if( typeof result.file[curr_row] !== 'undefined' ){
				jQuery('#spbc_dialog').append((row === curr_row ? row_template_bad : row_template).printf(curr_row, result.file[curr_row]));
			}
		}

		// Placing an empty string between results
		jQuery('#spbc_dialog').append(row_template.    printf('', ''));

	}

	// Removing last empty string
	jQuery('#spbc_dialog div').last().remove();

	let content_height = jQuery('#spbc_dialog div').length * 19 < 76 ? 76 : jQuery('#spbc_dialog div').length * 19,
		visible_height = (document.documentElement.clientHeight) / 100 * 75,
		overflow       = content_height < visible_height ? 'no_scroll' : 'scroll',
		height         = overflow === 'scroll' ? visible_height : content_height;

	jQuery('#spbc_dialog').dialog({
		modal:true,
		title: result.file_path,
		position: { my: "center top", at: "center top+100px" , of: window },
		width: +(jQuery('#wpwrap').width() / 100 * 90),
		show: { effect: "blind", duration: 500 },
		draggable: true,
		resizable: false,
		closeText: "X",
		classes: {"ui-dialog": 'spbc---top'},
		open: function(event, ui) {
			event.target.style.overflow = overflow;
			jQuery('#spbc_dialog').height(height);
			jQuery('.ui-widget-overlay').on('click', function() {
				jQuery("#spbc_dialog").dialog('close');
			});
		},
		beforeClose: function(event, ui) {
			document.body.style.overflow = 'auto';
			jQuery('#spbc_dialog').empty();
		},
	});
}

function spbc_scannerButtonViewBad_callback(result, data, params){

	console.log('FILE_VIEWED_BAD_CODE');

	console.log(arguments);

	let afterClose = () => {};

	if ( result.success == true ) {
		console.log(result);
		var row_template     = '<div class="spbc_view_file_row_wrapper">' +
				'<span class="spbc_view_file_row_num">%s</span>' +
				'<p class="spbc_view_file_row" style="word-break: break-all">%s</p>' +
				'<br /></div>',
			row_template_bad = '<div class="spbc_view_file_row_wrapper" style="background: rgb(200,120,120);">' +
				'<span class="spbc_view_file_row_num">%s</span>' +
				'<p class="spbc_view_file_row" style="word-break: break-all">%s</p>' +
				'<br /></div>',
			str_nums = [];

		result.weak_spots = JSON.parse(result.weak_spots);
		for(let severity in result.weak_spots){
			str_nums = str_nums.concat(Object.keys(result.weak_spots[severity]));
		}

		str_nums = [...new Set(str_nums)].sort(); // Sort bad line
		//get a map of bad strings
		let bad_strings_map = new Map(Object.entries(result.weak_spots.CRITICAL)) //TODO: Probably there can get something else except CRITICAL in the future
		for(let str_num in str_nums){

			let row = +str_nums[str_num],
				display_depth = 2;

			// Display only existing lines of file
			for(let curr_row = row - display_depth; curr_row <= row + display_depth; curr_row++ ){
				if( typeof result.file[curr_row] !== 'undefined' ){
					let is_bad_string = (row === curr_row)
					let unformatted_row
					let highlited_row
					if (is_bad_string){
						unformatted_row = row_template_bad
					} else {
						unformatted_row = row_template
					}
					if (is_bad_string){
						highlited_row = unformatted_row.printf(curr_row, bad_strings_map.get(str_nums[str_num]));
					} else {
						highlited_row = unformatted_row.printf(curr_row, result.file[curr_row]);
					}
					jQuery('#spbc_dialog').append(highlited_row);
				}
			}

			// Placing an empty string between results
			jQuery('#spbc_dialog').append(row_template.    printf('', ''));

			// Removing last empty string
			jQuery('#spbc_dialog div').last().remove();
		}
	} else {
		let wrapperElement = '<div style="margin:40px;text-align:center;">%s</div>'
		jQuery('#spbc_dialog').append(wrapperElement.printf(result.content));
		afterClose = () => {document.location.reload();};
	}

	let content_height = jQuery('#spbc_dialog div').length * 19 < 76 ? 76 : jQuery('#spbc_dialog div').length * 19,
		visible_height = (document.documentElement.clientHeight) / 100 * 75,
		height         = 'auto',
		overflow       = content_height < visible_height ? 'no_scroll' : 'scroll';

	jQuery('#spbc_dialog').dialog({
		modal:true,
		title: result.file_path,
		position: { my: "center top", at: "center top+100px" , of: window },
		width: +(jQuery('#wpwrap').width() / 100 * 90),
		show: { effect: "blind", duration: 500 },
		draggable: true,
		resizable: false,
		closeText: "X",
		classes: {"ui-dialog": 'spbc---top'},
		open: function(event, ui) {
			event.target.style.overflow = overflow;
			jQuery('#spbc_dialog').height(height);
			jQuery('.ui-widget-overlay').on('click', function() {
				jQuery("#spbc_dialog").dialog('close');
			});
		},
		beforeClose: function(event, ui) {
			document.body.style.overflow = 'auto';
			jQuery('#spbc_dialog').empty();
		},
		close: afterClose,
	});
}

function spbc_scanner_button_file_compare_event(obj){
	var self = jQuery(obj);
	var data = {
		action: 'spbc_scanner_file_compare',
		file_id: self.parents('.row-actions').attr('uid'),
	};
	var params = {
		spinner: self.parent().siblings('.tbl-preloader--tiny'),
		callback: spbc_scannerButtonFileCompare_callback,
		errorOutput: function(msg){ spbcModal.open().putError( msg ); },
	};
	spbc_sendAJAXRequest(data, params);
}

function spbc_scannerButtonFileCompare_callback(result, data, params){

	console.log('FILE_COMPARED');

	let row_template = '<div class="spbc_compare_file_row_wrapper"><p class="spbc_compare_file_row">%s</p><span class="spbc_compare_file_row_num">%s</span><p class="spbc_compare_file_row">%s</p><br /></div>';
	let row_template_bad = '<div class="spbc_compare_file_row_wrapper" style="background: rgba(200,40,40,0.8);"><p class="spbc_compare_file_row">%s</p><span class="spbc_compare_file_row_num">%s</span><p class="spbc_compare_file_row">%s</p><br /></div>';

	jQuery('#spbc_dialog').append(row_template.printf('<span class="spbc_compare_file_headings">Modified</span>', 'Line', '<span class="spbc_compare_file_headings">Original</span>'));

	for(var row=1, prev = false, next = false; typeof result.file[row] != 'undefined' || typeof result.file_original[row] != 'undefined'; row++){

		if(typeof result.file[row] == 'undefined')          result.file[row] = '';
		if(typeof result.file_original[row] == 'undefined') result.file_original[row] = '';

		// Display only existing lines of file
		if(result.difference.indexOf(row) != -1){
			for(let display_depth = 2, curr_row = row - display_depth; curr_row <= row + display_depth; curr_row++ ){
				if( typeof result.file[curr_row] !== 'undefined' && typeof result.file_original[row] !== 'undefined') {
					jQuery('#spbc_dialog').append(
						(row === curr_row ? row_template_bad : row_template).printf(
							result.file[curr_row] ? result.file[curr_row] : '',
							curr_row,
							result.file_original[curr_row] ? result.file_original[curr_row] : ''
						)
					);
				}
			}
			jQuery('#spbc_dialog').append(row_template.    printf('', '', ''));
		}
	}

	var content_height = jQuery('#spbc_dialog div').length * 19 + 19,
		visible_height = (document.documentElement.clientHeight) / 100 * 75,
		overflow = content_height < visible_height ? 'no_scroll' : 'scroll',
		height = overflow === 'scroll' ? visible_height : content_height;

	jQuery('#spbc_dialog').dialog({
		modal:true,
		title: result.file_path,
		position: { my: "center top", at: "center top+100px" , of: window },
		width: +(jQuery('#wpwrap').width() / 100 * 90),
		height: height,
		show: { effect: "blind", duration: 500 },
		draggable: true,
		resizable: true,
		closeText: "X",
		classes: {"ui-dialog": 'spbc---top'},
		open: function(event, ui) {
			document.body.style.overflow = 'hidden';
			event.target.style.overflow = overflow;
			jQuery('#spbc_dialog').height(height);
		},
		beforeClose: function(event, ui) {
			document.body.style.overflow = 'auto';
			jQuery('#spbc_dialog').empty();
		}
	});
}

function spbc_scanner__reload_scan_info() {
	jQuery('.spbc_hint__last_scan_title').text(spbcScaner.look_below_for_scan_res);
	const data = {
		action: 'spbc_scanner__last_scan_info'
	};
	const params = {
		callback: (result) => {
			document.getElementById('spbc_scanner__last_scan_info').innerText = result.data;
		}
	};
	spbc_sendAJAXRequest(data, params);
}

/**
 * Show snapshots of file
 * @param obj
 */
function spbc_scanner_file_monitoring_show_current_snapshot(obj)
{
	const self = jQuery(obj);
	const fileId = self.parents('.row-actions').attr('uid');
	const file_name = self.closest('.column-path').find('.title').text();

	// Init and open remodal
	const remodal = jQuery('[data-remodal-id=spbc-file-monitoring-modal]');
	const remodalObject = remodal.remodal();
	remodalObject.open();

	// Ajax request to get data for slider
	let data = {
		action: 'spbc_file_monitoring_show_snapshots',
		file_id: fileId,
		security: spbcSettings.ajax_nonce
	};

	jQuery.ajax({
		type: "POST",
		async: true,
		url: spbcSettings.ajaxurl,
		data: data,
		success: function(result) {
			if (result.success) {
				remodal.find('#spbc-fm-snapshot-list ul').remove();
				remodal.find('#spbc-fm-snapshot-file-name').text(file_name);
				drawSnapshotList(result.data, remodal);
				drawCurrentSnapshot(result.data[0].id, remodal);
			} else {
				// TODO: show errors
			}
		},
	});
}

/**
 *
 * @param data
 * @param remodal
 */
function drawSnapshotList(data, remodal)
{
	let list = '';

	for (let item of data) {
		list += `<li data-spanshot-id="${item.id}">${item.created_at}</li>`;
	}

	let html =
		`<ul>
            ${list}
        </ul>`;

	remodal.find('#spbc-fm-snapshot-list').append(html);
}

function drawCurrentSnapshot(snapshot_id, remodal)
{
	// Ajax request to get data for slider
	let data = {
		action: 'spbc_file_monitoring_show_current_snapshot',
		snapshot_id,
		security: spbcSettings.ajax_nonce
	};

	jQuery.ajax({
		type: "POST",
		async: true,
		url: spbcSettings.ajaxurl,
		data: data,
		beforeSend: function() {
			jQuery('#spbc-file-monitoring-modal-preloader').show();
		},
		success: function(result) {
			if (result.success) {
				remodal.find('#spbc-fm-snapshot-view .wrap').remove();
				remodal.find('[data-spanshot-id').removeClass('active');
				remodal.find('[data-spanshot-id=' + snapshot_id + ']').addClass('active');

				let html =
					`<div class="wrap">
                        <pre>
                            <code>
                                ${result.data.content}
                            </code>
                        </pre>
                    </div>`;

				jQuery('#spbc-file-monitoring-modal-preloader').hide();
				remodal.find('#spbc-fm-snapshot-view').append(html);
				document.querySelectorAll('pre code').forEach((el) => {
					hljs.highlightElement(el);
				});
			} else {
				// TODO: show errors
			}
		},
	});
}

/**
 * Cure file
 * @param obj
 */
function spbc_scanner_button_cure_file_ajax_handler(obj)
{
	const self = jQuery(obj);
	const fileFastHash = self.parents('.row-actions').attr('uid');

	let data = {
		action: 'spbc_file_cure_ajax_action',
		file_fast_hash: fileFastHash,
		security: spbcSettings.ajax_nonce
	};

	jQuery.ajax({
		type: "POST",
		async: true,
		url: spbcSettings.ajaxurl,
		data: data,
		success: function(result) {
			if (result.success) {
				spbcModal.open().put(result.data);
				document.addEventListener("spbcModalClosed", function( e ) {
					document.location.reload();
				});
			} else {
				spbcModal.open().putError(result.data);
			}
		},
	});
}

/**
 * Restore file from backup
 * @param obj
 */
function spbc_scanner_button_restore_from_backup_ajax_handler(obj)
{
	const self = jQuery(obj);
	const fileFastHash = self.parents('.row-actions').attr('uid');

	let data = {
		action: 'spbc_restore_file_from_backup_ajax_action',
		file_fast_hash: fileFastHash,
		security: spbcSettings.ajax_nonce
	};

	jQuery.ajax({
		type: "POST",
		async: true,
		url: spbcSettings.ajaxurl,
		data: data,
		success: function(result) {
			if (result.success) {
				spbcModal.open().put(result.data);
				document.addEventListener("spbcModalClosed", function( e ) {
					document.location.reload();
				});
			} else {
				spbcModal.open().putError(result.data);
			}
		},
	});
}

/**
 * Manual frontend malware sending handler
 *
 * @param url
 */
function spbc_scanner__frontend_malware_send_button(url)
{
	jQuery('#spbc_scanner__frontend_malware_send_button').prop('disabled', true);
	const data = {
		action: 'spbc_scanner_page_send',
		id: url.href
	};

	const params = {
		callback: (result) => {
			jQuery('#spbc_scanner__frontend_malware_send_url').val('')
			spbc_scanner__frontend_malware_send_error(result.data);
			jQuery('#spbc_scanner__frontend_malware_send_button').prop('disabled', false);
		}
	};

	spbc_sendAJAXRequest(data, params);
}

function spbc_scanner__frontend_malware_send_error(text)
{
	jQuery('#spbc_scanner__frontend_malware_send_result').text(text);
	setTimeout(function () {
		jQuery('#spbc_scanner__frontend_malware_send_result').text('');
	}, 3000);
}

jQuery(document).ready(function(){

	// EVENT HADLING
	spbc_tbl__bulk_actions__listen(); // Table. Row bulk handler
	spbc_tbl__row_actions__listen();  // Table. Row actions handler
	spbc_tbl__pagination__listen();   // Table. Pagination handler
	spbc_tbl__sort__listen();         // Table. Sort handler

	spbcStartShowHide();

	// Preparing progressbar
	jQuery('#spbc_scaner_progress_bar').progressbar({
		value: 0,
		create: function( event, ui ) {
			event.target.style.position = 'relative';
			event.target.style.marginBottom = '12px';
		},
		change: function(event, ui){
			jQuery('.spbc_progressbar_counter span').text(jQuery(event.target).progressbar('option', 'value') + ' %');
		},
	});

	// Preparing accordion
	jQuery('#spbc_scan_accordion').accordion({
		header: "h3",
		heightStyle: 'content',
		collapsible: true,
		active: false,
		activate: function( event, ui ) {
			if( ui.oldPanel.length === 0 && ui.oldHeader.length === 0 )
				jQuery("#spbc_scan_accordion").accordion("option", "classes.ui-accordion-content", "ui-corner-bottom spbc-overflow--visible");
		},
		beforeActivate: function( event, ui ) {
			if( ui.oldPanel.length === 1 && ui.oldHeader.length === 1 )
				jQuery("#spbc_scan_accordion").accordion("option", "classes.ui-accordion-content", "ui-corner-bottom");
		}
	});

	// Init scanner plugin
	window.spbc_scanner = new spbcMalwareScanner({
		settings: spbcScaner.settings,
		states: spbcScaner.states,
		button: jQuery('#spbc_perform_scan'),
		spinner: jQuery('#spbc_perform_scan').next(),
		callback: null,
		progress_overall: jQuery('#spbc_scaner_progress_overall'),
		progressbar: jQuery('#spbc_scaner_progress_bar'),
		progressbar_text: jQuery('.spbc_progressbar_counter span'),
		wrapper: document.getElementsByClassName('spbc_unchecked_file_list'),
		warnings: {
			long_scan: jQuery('.spbc_hint_warning__long_scan'),
			outdated:  jQuery('.spbc_hint_warning__outdated')
		}
	});

	jQuery(document).on('click', '.spbc_popup_tip--icon---show', function(){
		spbc_popup_tip___show( jQuery( this ) );
	});

	jQuery('#spbc_perform_scan').on('click', function(){
		jQuery('#spbcscan-results-log-module').remove();
		spbc_scanner.actionControl();

		if (!jQuery(".spbc_log-wrapper .panel-body").length) {
			jQuery(".spbc_log-wrapper").append('<div class="panel-body"></div>');
		}

		jQuery(".spbc_log-wrapper").resizable({
			handles: 'n, s',
			containment: 'document',
		});
	});

	jQuery("#spbcscan-results-log-module").resizable({
		handles: 'n, s',
		containment: 'document',
	});

	//DEBUG
	// Clear table
	jQuery('#spbc_scanner_clear').on('click', function(){

		if( ! confirm('Do you wanna clear the table with file scan results?') )
			return;

		console.log('CLEAR');

		spbc_sendAJAXRequest(
			{ action: 'spbc_scanner_clear', },
			{
				type: 'GET',
				successCallback: function(){ document.location = document.location },
				complete: null,
				errorOutput: null,
				context: this,
				timeout: 40000
			},
		);
	});

	jQuery('#spbc_scanner_save_to_pdf').on('click', function(){
		jQuery.ajax({
			url: spbcSettings.ajaxurl,
			type: 'POST',
			data: {
				action: 'spbc_scanner_save_to_pdf',
				security: spbcSettings.ajax_nonce,
				no_cache: Math.random()
			},
			xhrFields: {
				responseType: 'blob'
			},
			success: function(data) {
				jQuery.ajax({
						url: spbcSettings.ajaxurl,
						type: 'POST',
						data: {
							action: 'spbc_scanner_get_pdf_file_name',
							security: spbcSettings.ajax_nonce,
							no_cache: Math.random()
						},
						xhrFields: {
							responseType: 'text'
						},
						success: function(filename) {
							let blob=new Blob([data]);
							let link=document.createElement('a');
							link.href=window.URL.createObjectURL(blob);
							link.download=filename.data;
							link.click();
						}
					}
				)
			}
		});
	});

	// Select snapshot
	jQuery(document).on('click', '.spbc-fm-snapshot-list [data-spanshot-id]', function() {
		const currentSnapshotId = jQuery(this).data('spanshot-id');
		const activeSnapshotId = jQuery('.spbc-fm-snapshot-list [data-spanshot-id].active').data('spanshot-id');

		if (currentSnapshotId === activeSnapshotId) {
			return;
		}

		const remodal = jQuery('[data-remodal-id=spbc-file-monitoring-modal]');
		drawCurrentSnapshot(currentSnapshotId, remodal)
	});

	/**
	 * Sending frontend malware for analyzing handler
	 */
	jQuery('#spbc_scanner__frontend_malware_send_button').on('click', function(e){
		e.preventDefault();
		const maybeUrl = jQuery('#spbc_scanner__frontend_malware_send_url').val();
		try {
			const url = new URL(maybeUrl);
			return spbc_scanner__frontend_malware_send_button(url);
		} catch (err) {
			const error = 'Provided URL is invalid';
			return spbc_scanner__frontend_malware_send_error(error);
		}
	});
});