/**
 * Show popup tip
 *
 * @param {object} showIcon
 */
function spbcPopupTipShow(showIcon) { // eslint-disable-line no-unused-vars
    let tipTitle = showIcon.attr('spbc_tip_title') || null;
    let tipText = showIcon.attr('spbc_tip_text') || null;
    let removeDescFunc = function(e) {
        if (
            typeof e === 'undefined' ||
            (
                jQuery(e.target).parent('.spbc_popup_tip--wrapper').length == 0 ||
                jQuery(e.target).hasClass('spbc_popup_tip--icon---cancel')
            )
        ) {
            jQuery('.spbc_popup_tip--wrapper').hide();
            jQuery(document).off('click', removeDescFunc);
        }
    };

    removeDescFunc();

    showIcon.after('<div class=\'spbc_popup_tip--wrapper\'></div>');

    let obj = jQuery('.spbc_popup_tip--wrapper');

    obj.empty()
        .append('<div class=\'spbc_popup_tip--angle\'></div>')
        .css({
            top: showIcon.position().top - 2,
            left: showIcon.position().left + 25,
        });
    obj.append('<i class=\'spbc_popup_tip--icon---cancel icon-cancel\'></i>')
        .append('<h3 class=\'spbc_popup_tip--title\'>' + tipTitle + '</h3>')
        .append('<p class=\'spbc_popup_tip--text\'>' + tipText + '</p>');

    jQuery(document).on('click', removeDescFunc);
    showIcon.parents('tr').on('mouseout', removeDescFunc);
}

/**
 * View file in the scanner
 *
 * @param {object} obj
 */
function spbcScannerButtonFileViewEvent(obj) { // eslint-disable-line no-unused-vars
    let self = jQuery(obj);
    let data = {
        action: 'spbc_scanner_file_view',
        file_id: self.parents('.row-actions').attr('uid'),
    };
    let params = {
        spinner: self.parent().siblings('.tbl-preloader--tiny'),
        callback: spbcScannerButtonViewCallback,
        errorOutput: function(msg) {
            spbcModal.open().putError( msg );
        },
    };
    spbcSendAJAXRequest(data, params);
}

/**
 * Delete file from analysis log
 *
 * @param {object} obj
 */
function spbcScannerAnalysisLogDeleteFromLog(obj) { // eslint-disable-line no-unused-vars
    let fileIds = [];
    const self = jQuery(obj);
    let spinner;

    if ( jQuery(obj).hasClass('tbl-row_action') ) {
        fileIds.push(self.parents('.row-actions').attr('uid'));
        spinner = self.parent().siblings('.tbl-preloader--tiny');
    } else {
        const selectedItems = self.closest('#spbc_tbl__scanner_analysis_log').find('.cb-select:checked');
        if (selectedItems.length === 0) {
            alert('Please, select elements.');
            return;
        }

        selectedItems.each(function(index, element) {
            const elementId = jQuery(element).val();
            fileIds.push(elementId);
        });
        spinner = self.children('.tbl-preloader--small');
    }

    const data = {
        action: 'spbc_scanner_analysis_log_delete_from_log',
        file_ids: fileIds,
    };

    let params = {
        spinner: spinner,
        callback: function() {
            window.location.reload();
        },
    };

    spbcSendAJAXRequest(data, params);
}

/**
 * View page in the scanner
 *
 * @param {object} obj
 */
function spbcScannerButtonPageViewEvent(obj) { // eslint-disable-line no-unused-vars
    let self = jQuery(obj);
    let data = {
        action: 'spbc_scanner_page_view',
        page_url: self.parents('.row-actions').attr('uid'),
    };
    let params = {
        spinner: self.parent().siblings('.tbl-preloader--tiny'),
        callback: spbcScannerButtonViewCallback,
        errorOutput: function(msg) {
            spbcModal.open().putError( msg );
        },
    };

    let wpWrap = jQuery('#wpwrap');
    let dialogWindow = jQuery('#spbc_dialog');

    dialogWindow.dialog({
        modal: true,
        title: 'Loading..',
        position: {my: 'center top', at: 'center top+100px', of: window},
        width: +(wpWrap.width() / 100 * 90),
        show: {effect: 'blind', duration: 500},
        draggable: false,
        resizable: false,
        closeText: 'X',
        classes: {'ui-dialog': 'spbc---top'},
        open: function(event, ui) {
            event.target.style.overflow = 'auto';
            jQuery('#spbc_dialog').height((document.documentElement.clientHeight) / 100 * 25);
        },
        beforeClose: function(event, ui) {
            document.body.style.overflow = 'auto';
            jQuery('#spbc_dialog').empty();
        },
    });

    dialogWindow.append('<img id="spbc_file_view_preloader" alt="Wait for downloading" ' +
        'class="spbc_preloader" ' +
        'src="../../wp-content/plugins/security-malware-firewall/images/preloader2.gif" ' +
        'style="' +
        'display: block; ' +
        'position: absolute; ' +
        '">');

    let spinner = jQuery('#spbc_file_view_preloader');
    let sizeMultiplier = (wpWrap.width() * 0.0004);

    spinner.height(128 * sizeMultiplier);
    spinner.width(128 * sizeMultiplier);
    spinner.css({left: dialogWindow.width()/2 - (128 * sizeMultiplier / 2)});
    spinner.css({top: dialogWindow.height()/2 - (128 * sizeMultiplier / 2)});

    spbcSendAJAXRequest(data, params);
}

/**
 * Callback for file view
 *
 * @param {object} result
 */
function spbcScannerButtonViewCallback(result) { // eslint-disable-line no-unused-vars
    let dialogWindow = jQuery('#spbc_dialog');
    dialogWindow.empty();

    jQuery('#spbc_file_view_preloader').css({display: 'none'});

    let rowTemplate = '<div class="spbc_view_file_row_wrapper"><span class="spbc_view_file_row_num">%s</span>';
    rowTemplate += '<p class="spbc_view_file_row">%s</p><br /></div>';

    /* eslint-disable guard-for-in */
    for (let row in result.file) {
        dialogWindow.append(rowTemplate.printf(row, result.file[row]));
    }

    let contentHeight = Object.keys(result.file).length * 19 < 76 ? 76 : Object.keys(result.file).length * 19;
    let visibleHeight = (document.documentElement.clientHeight) / 100 * 75;
    let overflow = contentHeight < visibleHeight ? 'hidden' : 'scroll';
    let height = overflow === 'scroll' ? visibleHeight : contentHeight;

    dialogWindow.css({
        height: height,
        overflow: overflow,
    });

    dialogWindow.dialog({
        modal: true,
        title: ('Loaded: ' + result.file_path),
        position: {my: 'center top', at: 'center top+100px', of: window},
        width: +(jQuery('#wpwrap').width() / 100 * 90),
        show: {effect: 'blind', duration: 500},
        draggable: true,
        resizable: false,
        height: height,
        closeText: 'X',
        classes: {'ui-dialog': 'spbc---top'},
        open: function(event, ui) {
            event.target.style.overflow = overflow;
            jQuery('#spbc_dialog').height(height);
            jQuery('.ui-widget-overlay').on('click', function() {
                jQuery('#spbc_dialog').dialog('close');
            });
        },
        beforeClose: function(event, ui) {
            document.body.style.overflow = 'auto';
            jQuery('#spbc_dialog').empty();
        },
    });

    console.log('FILE_VIEWED');
}

/**
 * Event for file view bad
 *
 * @param {object} obj
 */
function spbcScannerButtonFileViewBadEvent(obj) { // eslint-disable-line no-unused-vars
    let self = jQuery(obj);
    let data = {
        action: 'spbc_scanner_file_view',
        file_id: self.parents('.row-actions').attr('uid'),
    };
    let params = {
        spinner: self.parent().siblings('.tbl-preloader--tiny'),
        callback: spbcScannerButtonViewBadFileCallback,
        errorOutput: function(msg) {
            spbcModal.open().putError( msg );
        },
    };
    spbcSendAJAXRequest(data, params);
}

/**
 * Event for page view bad
 *
 * @param {object} obj
 */
function spbcScannerButtonPageViewBadEvent(obj) { // eslint-disable-line no-unused-vars
    let self = jQuery(obj);
    let data = {
        action: 'spbc_scanner_page_view',
        page_url: self.parent().attr('uid'),
    };
    let params = {
        spinner: self.parent().siblings('.tbl-preloader--tiny'),
        callback: spbcScannerButtonViewBadCallback,
        errorOutput: function(msg) {
            spbcModal.open().putError( msg );
        },
    };
    spbcSendAJAXRequest(data, params);
}

/**
 * Callback for file view bad
 *
 * @param {object} result
 * @param {object} data
 * @param {object} params
 */
function spbcScannerButtonViewBadFileCallback(result, data, params) { // eslint-disable-line no-unused-vars
    console.log('FILE_VIEWED_BAD_CODE_FILE');
    jQuery('#spbc_dialog').empty();

    let rowTemplate = '<div class="spbc_view_file_row_wrapper"><span class="spbc_view_file_row_num">%s</span>';
    rowTemplate += '<p class="spbc_view_file_row">%s</p><br /></div>';
    let rowTemplateBad = '<div class="spbc_view_file_row_wrapper" style="background: rgba(200,40,40,0.8);">';
    rowTemplateBad += '<span class="spbc_view_file_row_num">%s</span>';
    rowTemplateBad += '<p class="spbc_view_file_row">%s</p><br /></div>';
    let severityParts = [];
    let severityPartsSorted = [];
    let severityKeysSorted = [];

    result.weak_spots = JSON.parse(result.weak_spots);
    /* eslint-disable guard-for-in */
    for (let severity in result.weak_spots) {
        severityParts[severity] = Object.keys(result.weak_spots[severity]);
    }

    severityKeysSorted = Object.keys(severityParts).sort();

    /* eslint-disable guard-for-in */
    for (key in severityKeysSorted) {
        severityPartsSorted[severityKeysSorted[key]] = severityParts[severityKeysSorted[key]];
    }

    /* eslint-disable guard-for-in */
    for (let severityPart in severityPartsSorted) {
        let headerName = 'spbc-dialog-row-header-' + severityPart.toLowerCase();
        let headerHtml = '<span id="' + headerName + '" style="text-align: center"><b>';
        headerHtml += severityPart + ' weakspots:</b></span>';
        const dialog = jQuery('#spbc_dialog');

        dialog.append(rowTemplate.printf('', headerHtml));
        dialog.append(rowTemplate. printf('<b>...</b>', '<b>...</b>'));

        let header = dialog.find('#' + headerName);
        header.parent().parent().css('text-align', 'center');
        header.parent().parent().css('border', '1px dotted');
        header.parent().parent().css('background', 'darkgrey');

        /* eslint-disable guard-for-in */
        for (let strNum in severityParts[severityPart]) {
            // Sort bad line
            strNum = [...new Set(strNum)].sort();

            let row = +severityParts[severityPart][strNum];
            let displayDepth = 2;
            let temp;
            // Display only existing lines of file
            for (let currRow = row - displayDepth; currRow <= row + displayDepth; currRow++ ) {
                if ( typeof result.file[currRow] !== 'undefined' ) {
                    temp = row === currRow ? rowTemplateBad : rowTemplate;
                    dialog.append(temp.printf(currRow, result.file[currRow]));
                }
            }

            // Placing an empty string between results
            dialog.append(rowTemplate. printf('<b>...</b>', '<b>...</b>'));
        }
    }

    // Removing last empty string
    jQuery('#spbc_dialog div').last().remove();

    let contentHeight = jQuery('#spbc_dialog div').length * 19 < 76 ? 76 : jQuery('#spbc_dialog div').length * 19;
    let visibleHeight = (document.documentElement.clientHeight) / 100 * 75;
    let overflow = contentHeight < visibleHeight ? 'no_scroll' : 'scroll';
    let height = overflow === 'scroll' ? visibleHeight : contentHeight;

    jQuery('#spbc_dialog').dialog({
        modal: true,
        title: result.file_path,
        position: {my: 'center top', at: 'center top+100px', of: window},
        width: +(jQuery('#wpwrap').width() / 100 * 90),
        show: {effect: 'blind', duration: 500},
        draggable: true,
        resizable: false,
        closeText: 'X',
        classes: {'ui-dialog': 'spbc---top'},
        open: function(event, ui) {
            event.target.style.overflow = overflow;
            jQuery('#spbc_dialog').height(height);
            jQuery('.ui-widget-overlay').on('click', function() {
                jQuery('#spbc_dialog').dialog('close');
            });
        },
        beforeClose: function(event, ui) {
            document.body.style.overflow = 'auto';
            jQuery('#spbc_dialog').empty();
        },
    });
}

/**
 * Callback for file view bad
 *
 * @param {object} result
 * @param {object} data
 * @param {object} params
 */
function spbcScannerButtonViewBadCallback(result, data, params) { // eslint-disable-line no-unused-vars
    console.log('FILE_VIEWED_BAD_CODE');

    let afterClose = () => {};

    if ( result.success == true ) {
        console.log(result);
        let rowTemplate = '<div class="spbc_view_file_row_wrapper">' +
            '<span class="spbc_view_file_row_num">%s</span>' +
            '<p class="spbc_view_file_row" style="word-break: break-all">%s</p>' +
            '<br /></div>';
        let rowTemplateBad = '<div class="spbc_view_file_row_wrapper" style="background: rgb(200,120,120);">' +
            '<span class="spbc_view_file_row_num">%s</span>' +
            '<p class="spbc_view_file_row" style="word-break: break-all">%s</p>' +
            '<br /></div>';
        let strNums = [];

        result.weak_spots = JSON.parse(result.weak_spots);
        /* eslint-disable guard-for-in */
        for (let severity in result.weak_spots) {
            strNums = strNums.concat(Object.keys(result.weak_spots[severity]));
        }

        strNums = [...new Set(strNums)].sort(); // Sort bad line
        // get a map of bad strings
        // TODO: Probably there can get something else except CRITICAL in the future
        let badStringsMap = new Map(Object.entries(result.weak_spots.CRITICAL));
        /* eslint-disable guard-for-in */
        for (let strNum in strNums) {
            if (strNum == 0 && badStringsMap.get(strNums[strNum]).toLowerCase().includes('doctype')) {
                continue;
            }

            let row = +strNums[strNum];
            let displayDepth = 2;

            // Display only existing lines of file
            for (let currRow = row - displayDepth; currRow <= row + displayDepth; currRow++ ) {
                if ( typeof result.file[currRow] !== 'undefined' ) {
                    let isBadString = (row === currRow);
                    let unformattedRow;
                    let highlitedRow;
                    if (isBadString) {
                        unformattedRow = rowTemplateBad;
                    } else {
                        unformattedRow = rowTemplate;
                    }
                    if (isBadString && !result.file[currRow].includes('iframe')) {
                        highlitedRow = unformattedRow.printf(currRow, badStringsMap.get(strNums[strNum]));
                    } else {
                        highlitedRow = unformattedRow.printf(currRow, result.file[currRow]);
                    }
                    jQuery('#spbc_dialog').append(highlitedRow);
                }
            }

            // Placing an empty string between results
            jQuery('#spbc_dialog').append(rowTemplate. printf('', ''));

            // Removing last empty string
            jQuery('#spbc_dialog div').last().remove();
        }
    } else {
        let wrapperElement = '<div style="margin:40px;text-align:center;">%s</div>';
        jQuery('#spbc_dialog').append(wrapperElement.printf(result.content));
        afterClose = () => {
            document.location.reload();
        };
    }

    let contentHeight = jQuery('#spbc_dialog div').length * 19 < 76 ? 76 : jQuery('#spbc_dialog div').length * 19;
    let visibleHeight = (document.documentElement.clientHeight) / 100 * 75;
    let height = 'auto';
    let overflow = contentHeight < visibleHeight ? 'no_scroll' : 'scroll';

    jQuery('#spbc_dialog').dialog({
        modal: true,
        title: result.file_path,
        position: {my: 'center top', at: 'center top+100px', of: window},
        width: +(jQuery('#wpwrap').width() / 100 * 90),
        show: {effect: 'blind', duration: 500},
        draggable: true,
        resizable: false,
        closeText: 'X',
        classes: {'ui-dialog': 'spbc---top'},
        open: function(event, ui) {
            event.target.style.overflow = overflow;
            jQuery('#spbc_dialog').height(height);
            jQuery('.ui-widget-overlay').on('click', function() {
                jQuery('#spbc_dialog').dialog('close');
            });
        },
        beforeClose: function(event, ui) {
            document.body.style.overflow = 'auto';
            jQuery('#spbc_dialog').empty();
        },
        close: afterClose,
    });
}

/**
 * File compare event
 *
 * @param {object} obj
 */
function spbcScannerButtonFileCompareEvent(obj) { // eslint-disable-line no-unused-vars
    let self = jQuery(obj);
    let data = {
        action: 'spbc_scanner_file_compare',
        file_id: self.parents('.row-actions').attr('uid'),
    };
    let params = {
        spinner: self.parent().siblings('.tbl-preloader--tiny'),
        callback: spbcScannerButtonFileCompareCallback,
        errorOutput: function(msg) {
            spbcModal.open().putError( msg );
        },
    };
    spbcSendAJAXRequest(data, params);
}

/**
 * Callback for file compare
 *
 * @param {object} result
 * @param {object} data
 * @param {object} params
 */
function spbcScannerButtonFileCompareCallback(result, data, params) { // eslint-disable-line no-unused-vars
    console.log('FILE_COMPARED');

    let rowTemplate = '<div class="spbc_compare_file_row_wrapper">';
    rowTemplate += '<p class="spbc_compare_file_row">%s</p><span class="spbc_compare_file_row_num">%s</span>';
    rowTemplate += '<p class="spbc_compare_file_row">%s</p><br /></div>';
    let rowTemplateBad = '<div class="spbc_compare_file_row_wrapper" style="background: rgba(200,40,40,0.8);">';
    rowTemplateBad += '<p class="spbc_compare_file_row">%s</p><span class="spbc_compare_file_row_num">%s</span>';
    rowTemplateBad += '<p class="spbc_compare_file_row">%s</p><br /></div>';

    let renderRowTemplate = rowTemplate.printf(
        '<span class="spbc_compare_file_headings">Modified</span>',
        'Line',
        '<span class="spbc_compare_file_headings">Original</span>',
    );
    jQuery('#spbc_dialog').append(renderRowTemplate);

    for (let row=1; typeof result.file[row] != 'undefined' || typeof result.file_original[row] != 'undefined'; row++) {
        if (typeof result.file[row] == 'undefined') result.file[row] = '';
        if (typeof result.file_original[row] == 'undefined') result.file_original[row] = '';

        // Display only existing lines of file
        if (result.difference.indexOf(row) != -1) {
            for (let displayDepth = 2, currRow = row - displayDepth; currRow <= row + displayDepth; currRow++ ) {
                if ( typeof result.file[currRow] !== 'undefined' && typeof result.file_original[row] !== 'undefined') {
                    jQuery('#spbc_dialog').append(
                        (row === currRow ? rowTemplateBad : rowTemplate).printf(
                            result.file[currRow] ? result.file[currRow] : '',
                            currRow,
                            result.file_original[currRow] ? result.file_original[currRow] : '',
                        ),
                    );
                }
            }
            jQuery('#spbc_dialog').append(rowTemplate. printf('', '', ''));
        }
    }

    let contentHeight = jQuery('#spbc_dialog div').length * 19 + 19;
    let visibleHeight = (document.documentElement.clientHeight) / 100 * 75;
    let overflow = contentHeight < visibleHeight ? 'no_scroll' : 'scroll';
    let height = overflow === 'scroll' ? visibleHeight : contentHeight;

    jQuery('#spbc_dialog').dialog({
        modal: true,
        title: result.file_path,
        position: {my: 'center top', at: 'center top+100px', of: window},
        width: +(jQuery('#wpwrap').width() / 100 * 90),
        height: height,
        show: {effect: 'blind', duration: 500},
        draggable: true,
        resizable: true,
        closeText: 'X',
        classes: {'ui-dialog': 'spbc---top'},
        open: function(event, ui) {
            document.body.style.overflow = 'hidden';
            event.target.style.overflow = overflow;
            jQuery('#spbc_dialog').height(height);
        },
        beforeClose: function(event, ui) {
            document.body.style.overflow = 'auto';
            jQuery('#spbc_dialog').empty();
        },
    });
}

/**
 * Reloads last scan info
 */
function spbcScannerReloadScanInfo() { // eslint-disable-line no-unused-vars
    jQuery('.spbc_hint__last_scan_title').text(spbcScaner.look_below_for_scan_res);
    const data = {
        action: 'spbc_scanner__last_scan_info',
    };
    const params = {
        callback: (result) => {
            document.getElementById('spbc_scanner__last_scan_info').innerText = result.data;
        },
    };
    spbcSendAJAXRequest(data, params);
}

/**
 * Show snapshots of file
 * @param {object} obj
 */
function spbcScannerFileMonitoringShowCurrentSnapshot(obj) { // eslint-disable-line no-unused-vars
    const self = jQuery(obj);
    const fileId = self.parents('.row-actions').attr('uid');
    const fileName = self.closest('.column-path').find('.title').text();

    // Init and open remodal
    const remodal = jQuery('[data-remodal-id=spbc-file-monitoring-modal]');
    const remodalObject = remodal.remodal();
    remodalObject.open();

    // Ajax request to get data for slider
    let data = {
        action: 'spbc_file_monitoring_show_snapshots',
        file_id: fileId,
        security: spbcSettings.ajax_nonce,
    };

    jQuery.ajax({
        type: 'POST',
        async: true,
        url: spbcSettings.ajaxurl,
        data: data,
        success: function(result) {
            if (result.success) {
                remodal.find('#spbc-fm-snapshot-list ul').remove();
                remodal.find('#spbc-fm-snapshot-file-name').text(fileName);
                drawSnapshotList(result.data, remodal);
                drawCurrentSnapshot(result.data[0].id, remodal);
            } else {
                // TODO: show errors
            }
        },
    });
}

/**
 * Draws snapshot list
 *
 * @param {array} data
 * @param {object} remodal
 */
function drawSnapshotList(data, remodal) {
    let list = '';

    for (let item of data) {
        list += `<li data-spanshot-id="${item.id}">${item.created_at}</li>`;
    }

    let html =
        `<ul>
            ${list}
        </ul>`;

    remodal.find('#spbc-fm-snapshot-list').append(html);
}

/**
 * Draws current snapshot
 *
 * @param {string} snapshotId
 * @param {object} remodal
 */
function drawCurrentSnapshot(snapshotId, remodal) {
    // Ajax request to get data for slider
    let data = {
        action: 'spbc_file_monitoring_show_current_snapshot',
        snapshot_id: snapshotId,
        security: spbcSettings.ajax_nonce,
    };

    jQuery.ajax({
        type: 'POST',
        async: true,
        url: spbcSettings.ajaxurl,
        data: data,
        beforeSend: function() {
            jQuery('#spbc-file-monitoring-modal-preloader').show();
        },
        success: function(result) {
            if (result.success) {
                remodal.find('#spbc-fm-snapshot-view .wrap').remove();
                remodal.find('[data-spanshot-id').removeClass('active');
                remodal.find('[data-spanshot-id=' + snapshotId + ']').addClass('active');

                let html =
                    `<div class="wrap">
                        <pre>
                            <code>
                                ${result.data.content}
                            </code>
                        </pre>
                    </div>`;

                jQuery('#spbc-file-monitoring-modal-preloader').hide();
                remodal.find('#spbc-fm-snapshot-view').append(html);
                document.querySelectorAll('pre code').forEach((el) => {
                    hljs.highlightElement(el);
                });
            } else {
                // TODO: show errors
            }
        },
    });
}

/**
 * Cure file
 * @param {object} obj
 */
function spbcScannerButtonCureFileAjaxHandler(obj) { // eslint-disable-line no-unused-vars
    const self = jQuery(obj);
    const fileFastHash = self.parents('.row-actions').attr('uid');

    let data = {
        action: 'spbc_file_cure_ajax_action',
        file_fast_hash: fileFastHash,
        security: spbcSettings.ajax_nonce,
    };

    jQuery.ajax({
        type: 'POST',
        async: true,
        url: spbcSettings.ajaxurl,
        data: data,
        success: function(result) {
            if (result.success) {
                spbcModal.open().put(result.data);
                document.addEventListener('spbcModalClosed', function( e ) {
                    document.location.reload();
                });
            } else {
                spbcModal.open().putError(result.data);
            }
        },
    });
}

/**
 * Restore file from backup
 * @param {object} obj
 */
function spbcScannerButtonRestoreFromBackupAjaxHandler(obj) { // eslint-disable-line no-unused-vars
    const self = jQuery(obj);
    const fileFastHash = self.parents('.row-actions').attr('uid');

    let data = {
        action: 'spbc_restore_file_from_backup_ajax_action',
        file_fast_hash: fileFastHash,
        security: spbcSettings.ajax_nonce,
    };

    jQuery.ajax({
        type: 'POST',
        async: true,
        url: spbcSettings.ajaxurl,
        data: data,
        success: function(result) {
            if (result.success) {
                spbcModal.open().put(result.data);
                document.addEventListener('spbcModalClosed', function( e ) {
                    document.location.reload();
                });
            } else {
                spbcModal.open().putError(result.data);
            }
        },
    });
}

/**
 * Clear scan results
 * @return {void}
 */
function spbcScannerButtonClearScanResults() { // eslint-disable-line no-unused-vars
    if ( ! confirm('Do you confirm to clear the scan results?') ) {
        return;
    }

    console.log('CLEAR');

    spbcSendAJAXRequest(
        {action: 'spbc_scanner_clear'},
        {
            type: 'GET',
            successCallback: function() {
                document.location = document.location;
            },
            complete: null,
            errorOutput: null,
            context: this,
            timeout: 40000,
            success: function() {
                document.location.reload();
            },
        },
    );
}

jQuery(document).ready(function() {
    // EVENT HADLING
    spbcTblBulkActionsListen(); // Table. Row bulk handler
    spbcTblRowActionsListen(); // Table. Row actions handler
    spbcTblPaginationListen(); // Table. Pagination handler
    spbcTblSortListen(); // Table. Sort handler

    spbcStartShowHide();

    // Preparing progressbar
    jQuery('#spbc_scaner_progress_bar').progressbar({
        value: 0,
        create: function( event, ui ) {
            event.target.style.position = 'relative';
            event.target.style.marginBottom = '12px';
        },
        change: function(event, ui) {
            jQuery('.spbc_progressbar_counter span').text(jQuery(event.target).progressbar('option', 'value') + ' %');
        },
    });

    // Preparing accordion
    jQuery('#spbc_scan_accordion').accordion({
        header: 'h3',
        heightStyle: 'content',
        collapsible: true,
        active: false,
        activate: function( event, ui ) {
            if ( ui.oldPanel.length === 0 && ui.oldHeader.length === 0 ) {
                jQuery('#spbc_scan_accordion')
                    .accordion('option', 'classes.ui-accordion-content', 'ui-corner-bottom spbc-overflow--visible');
            }
        },
        beforeActivate: function( event, ui ) {
            if ( ui.oldPanel.length === 1 && ui.oldHeader.length === 1 ) {
                jQuery('#spbc_scan_accordion').accordion('option', 'classes.ui-accordion-content', 'ui-corner-bottom');
            }
        },
    });

    // Init scanner plugin
    window.spbcScanner = new SpbcMalwareScanner({
        settings: spbcScaner.settings,
        states: spbcScaner.states,
        button: jQuery('#spbc_perform_scan'),
        spinner: jQuery('#spbc_perform_scan').next(),
        callback: null,
        progress_overall: jQuery('#spbc_scaner_progress_overall'),
        progressbar: jQuery('#spbc_scaner_progress_bar'),
        progressbar_text: jQuery('.spbc_progressbar_counter span'),
        wrapper: document.getElementsByClassName('spbc_unchecked_file_list'),
        warnings: {
            long_scan: jQuery('.spbc_hint_warning__long_scan'),
            outdated: jQuery('.spbc_hint_warning__outdated'),
        },
    });

    jQuery(document).on('click', '.spbc_popup_tip--icon---show', function() {
        spbcPopupTipShow( jQuery( this ) );
    });

    jQuery('#spbc_perform_scan').on('click', function() {
        jQuery('#spbcscan-results-log-module').remove();
        spbcScanner.actionControl();

        if (!jQuery('.spbc_log-wrapper .panel-body').length) {
            jQuery('.spbc_log-wrapper').append('<div class="panel-body"></div>');
        }

        jQuery('.spbc_log-wrapper').resizable({
            handles: 'n, s',
            containment: 'document',
        });
    });

    jQuery('#spbcscan-results-log-module').resizable({
        handles: 'n, s',
        containment: 'document',
    });

    // Clear scanner's tables
    jQuery('#spbc_scanner_clear').on('click', function() {
        if ( ! confirm('Do you confirm to clear the scan results?') ) {
            return;
        }

        console.log('CLEAR');

        spbcSendAJAXRequest(
            {action: 'spbc_scanner_clear'},
            {
                type: 'GET',
                successCallback: function() {
                    document.location = document.location;
                },
                complete: null,
                errorOutput: null,
                context: this,
                timeout: 40000,
                success: function() {
                    document.location.reload();
                },
            },
        );
    });

    jQuery('#spbc_scanner_save_to_pdf').on('click', function() {
        jQuery.ajax({
            url: spbcSettings.ajaxurl,
            type: 'POST',
            data: {
                action: 'spbc_scanner_save_to_pdf',
                security: spbcSettings.ajax_nonce,
                no_cache: Math.random(),
            },
            xhrFields: {
                responseType: 'blob',
            },
            success: function(data) {
                jQuery.ajax({
                    url: spbcSettings.ajaxurl,
                    type: 'POST',
                    data: {
                        action: 'spbc_scanner_get_pdf_file_name',
                        security: spbcSettings.ajax_nonce,
                        no_cache: Math.random(),
                    },
                    xhrFields: {
                        responseType: 'text',
                    },
                    success: function(filename) {
                        let blob=new Blob([data]);
                        let link=document.createElement('a');
                        link.href=window.URL.createObjectURL(blob);
                        link.download=filename.data;
                        link.click();
                    },
                },
                );
            },
        });
    });

    // Select snapshot
    jQuery(document).on('click', '.spbc-fm-snapshot-list [data-spanshot-id]', function() {
        const currentSnapshotId = jQuery(this).data('spanshot-id');
        const activeSnapshotId = jQuery('.spbc-fm-snapshot-list [data-spanshot-id].active').data('spanshot-id');

        if (currentSnapshotId === activeSnapshotId) {
            return;
        }

        const remodal = jQuery('[data-remodal-id=spbc-file-monitoring-modal]');
        drawCurrentSnapshot(currentSnapshotId, remodal);
    });
});
