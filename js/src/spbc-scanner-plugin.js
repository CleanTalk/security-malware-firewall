'use strict';

/**
 * class spbcMalwareScanner
 */
class spbcMalwareScanner {/* eslint-disable-line no-unused-vars */
    first_start = true;

    active = false;

    root = '';
    settings = [];
    states = [
        'get_cms_hashes',
        'get_modules_hashes',
        'clean_results',
        'file_system_analysis',
        'get_approved_hashes',
        'get_denied_hashes',
        'signature_analysis',
        'heuristic_analysis',
        'schedule_send_heuristic_suspicious_files',
        'auto_cure_backup',
        'auto_cure',
        'outbound_links',
        'frontend_analysis',
        'important_files_listing',
        'send_results',
    ];
    state = null;
    offset = 0;
    amount = 0;
    amount_coefficient = 1;
    total_scanned = 0;
    scan_percent = 0;
    percent_completed = 0;

    paused = false;

    button = null;
    spinner = null;

    progress_overall = null;
    progressbar = null;
    progressbar_text = null;

    timeout = 60000;

    state_timer = 0;

    file_system_analysis_is_finished = false;
    file_system_analysis_is_finished_run_once = false;

    /**
     * constructor
     * @param {array} properties
     */
    constructor( properties ) {
        console.log('init');
        if (jQuery('#spbcscan-results-log-module').length) {
            jQuery('.spbc-scan-log-title').removeClass('spbc---hidden');
        }

        // Crunch for cure backups
        if ( typeof properties['settings']['auto_cure'] !== 'undefined' ) {
            properties['settings']['scanner__auto_cure_backup'] = '1';
        }

        for ( let key in properties ) {
            if ( typeof this[key] !== 'undefined' ) {
                this[key] = properties[key];
            }
        }
    };

    /**
     * Function Action Control
     */
    actionControl() {
        if (this.state === null && ! this.file_system_analysis_is_finished) {
            this.start();
        } else if (this.paused) {
            this.resume();
            this.controller();
        } else {
            this.pause();
        }
    };

    /**
     * Function Start
     */
    start() {
        this.active = true;
        this.state_timer = Math.round(new Date().getTime() /1000);

        this.state = this.getNextState( null );

        this.setPercents( 0 );
        this.scan_percent = 0;
        this.offset = 0;
        this.progress_overall.children('span')
            .removeClass('spbc_bold')
            .filter('.spbc_overall_scan_status_' + this.state)
            .addClass('spbc_bold');

        this.progressbar.show(500);
        this.progress_overall.show(500);
        this.button.html(spbcScaner.button_scan_pause);
        this.spinner.css({display: 'inline'});

        setTimeout(() => {
            this.controller();
        }, 1000);
    };

    /**
     * Function Pause
     * @param {*} result
     * @param {*} data
     * @param {*} opt
     */
    pause( result, data, opt ) {
        console.log('PAUSE');
        this.button.html(spbcScaner.button_scan_resume);
        this.spinner.css({display: 'none'});
        this.paused = true;
        this.active = false;
    };

    /**
     * Function Resume
     * @param {*} opt
     */
    resume( opt ) {
        console.log('RESUME');
        this.button.html(spbcScaner.button_scan_pause);
        this.spinner.css({display: 'inline'});
        this.paused = false;
        this.active = true;
    };

    /**
     * Function End
     * @param {bool} reload
     */
    end( reload ) {
        this.progressbar.hide(500);
        this.progress_overall.hide(500);
        this.button.html(spbcScaner.button_scan_perform);
        this.spinner.css({display: 'none'});
        this.state = null;
        this.total_links = 0;
        this.plug = false;
        this.total_scanned = 0;
        this.active = false;

        if (reload) {
            document.location = document.location;
        } else {
            // spbcSendAJAXRequest(
            //     {action: 'spbc_scanner_tab__reload_accordion'},
            //     {
            //         notJson: true,
            //         callback: function(result, data, params, obj) {
            //             jQuery(obj).accordion('destroy')
            //                 .html(result)
            //                 .accordion({
            //                     header: 'h3',
            //                     heightStyle: 'content',
            //                     collapsible: true,
            //                     active: false,
            //                 });
            //             spbcTblBulkActionsListen();
            //             spbcTblRowActionsListen();
            //             spbcTblPaginationListen();
            //             spbcTblSortListen();
            //             spbcStartShowHide();
            //             spbc_scanner__reload_scan_info();
            //         },
            //     },
            //     jQuery('#spbc_scan_accordion'),
            // );

            if (!jQuery('#spbc_scanner_clear').length) {
                let clearLink = '<p id="spbc_scanner_clear" ' +
                    'class="spbc_hint spbc_hint-send_security_log spbc_hint--link spbc_hint--top_right" ' +
                    'onclick="spbc_scanner_button_clear_scan_results()">Clear scanner logs</p><br>';
                jQuery(clearLink).insertBefore('#spbcscan-scanner-caption');
            }
        }
    };

    /**
     * Function Controller
     * @param {obj} result
     */
    controller( result ) {
        console.log(this.state);

        if ( this.state === 'file_system_analysis' && this.file_system_analysis_is_finished && ( result.end !== true && result.end !== 1 )) {
            return;
        }
        // if ( this.state === 'file_system_analysis' && this.file_system_analysis_is_finished ) {
        //     this.file_system_analysis_is_finished_run_once = true;
        //     // return;
        // }
        // if ( this.state === 'file_system_analysis' && ( result.end === true || result.end === 1 )) {
        //     this.file_system_analysis_is_finished++;
        //     return;
        // }

        // The current stage is over. Switching to the new one
        if ( typeof result !== 'undefined' && result.end ) {
            this.state = this.getNextState( this.state );

            // End condition
            if (typeof this.state === 'undefined') {
                this.end();
                return;
            }

            // Set percent to 0
            this.setPercents( 0 );
            this.scan_percent = 0;
            this.offset = 0;

            // Changing visualizing of the current stage
            this.progress_overall.children('span')
                .removeClass('spbc_bold')
                .filter('.spbc_overall_scan_status_' + this.state)
                .addClass('spbc_bold');
        }

        // Break execution if paused
        if ( this.paused === true ) {
            return;
        }

        // // AJAX params
        let data = {
            action: 'spbc_scanner_controller_front',
            method: this.state,
            offset: this.offset,
        };

        let params = {
            type: 'GET',
            success: this.success,
            callback: this.successCallback,
            error: this.error,
            errorOutput: this.errorOutput,
            complete: null,
            context: this,
            timeout: 120000,
        };

        switch (this.state) {
        case 'get_modules_hashes': this.amount = 2; break;
        case 'clear_table': this.amount = 10000; break;
        case 'file_system_analysis': this.amount = 700; break;
        case 'auto_cure': this.amount = 5; break;
        case 'outbound_links': this.amount = 10; break;
        case 'frontend_analysis': this.amount = spbcSettings.frontendAnalysisAmount; break;
        case 'signature_analysis': this.amount = 10; data.status = 'UNKNOWN,MODIFIED,OK,INFECTED,ERROR'; break;
        case 'heuristic_analysis': this.amount = 4; data.status = 'UNKNOWN,MODIFIED,OK,INFECTED,ERROR'; break;
        case 'schedule_send_heuristic_suspicious_files': this.amount = 1; break;
        }

        data.amount = Math.round(this.amount * this.amount_coefficient);

        spbcSendAJAXRequest(
            data,
            params,
            jQuery('#spbc_scan_accordion'),
        );
    };

    /**
     * Set Coefficients
     * @param {string} state
     */
    setCoefficients( state ) {
        let coefficient = this.amount_coefficient;
        switch (state) {
        case 'file_system_analysis': coefficient *= 1.5; break;
        }
        this.amount_coefficient = coefficient;
    };

    /**
     * Get Next State
     * @param {string} state
     * @return {number}
     */
    getNextState( state ) {
        state = state === null ? this.states[0] : this.states[this.states.indexOf( state ) + 1];

        if (typeof this.settings['scanner__' + state] !== 'undefined' && +this.settings['scanner__' + state] === 0) {
            state = this.getNextState( state );
        }

        return state;
    };

    /**
     * Set Percents
     * @param {number} percents
     */
    setPercents( percents ) {
        this.percent_completed = Math.floor( percents * 100 ) / 100;
        this.progressbar.progressbar( 'option', 'value', this.percent_completed );
        this.progressbar_text.text( spbcScaner['progressbar_' + this.state] + ' - ' + this.percent_completed + '%' );
    };

    /**
     * Function Success
     * @param {obj} response
     */
    success( response ) {
        if ( !! response.error ) {
            this.error(
                {status: 200, responseText: response.error},
                response.error,
                response.msg,
            );
        } else {
            if ( this.successCallback ) {
                this.successCallback( response, this.data, this.obj );
            }
        }
    };

    // Processing response from backend
    /**
     * Success Callback
     * @param {obj} result
     */
    successCallback( result ) {
        console.log( result );

        // if ( this.state === 'file_system_analysis' && this.file_system_analysis_is_finished_run_once ) {
        //     return;
        // }
        // if ( this.state === 'file_system_analysis' && ( result.end === true || result.end === 1 ) ) {
        //     this.file_system_analysis_is_finished++;
        // }

        if ( typeof result.total !== 'undefined' ) {
            this.scan_percent = 100 / result.total;
        }

        if ( typeof result.processed_items !== 'undefined') {
            if ( this.state === 'heuristic_analysis' && typeof result.total !== 0 ) {
                this.logRaw('<h3 class="spbc_log-block_header">Heuristic Analysis</h3>');
            }
            if ( this.state === 'signature_analysis' && typeof result.total !== 0 ) {
                this.logRaw('<h3 class="spbc_log-block_header">Signature Analysis</h3>');
            }

            this.logFileEntry( result.processed_items );
        }

        if ( typeof result.stage_data_for_logging !== 'undefined') {
            this.logStageEntry( result.stage_data_for_logging );
        }

        // Add link on shuffle salt if cured
        if (result.cured !== undefined && Number(result.cured) > 0) {
            this.showLinkForShuffleSalts(result.message);
        }

        if ( result.end !== true && result.end !== 1 ) {
            this.setPercents( this.percent_completed + result.processed * this.scan_percent );
            this.offset = this.offset + result.processed;
            this.controller( result );
            if ( this.state === 'file_system_analysis' ) {
                this.offset += this.amount;
                setTimeout(() => {
                    this.controller( result );
                }, 300);
            }
        } else {
            console.log( this.state +
                ' stage took ' +
                ( Math.round(new Date().getTime() /1000) - this.state_timer ) +
                ' seconds to complete' );
            if ( this.state === 'file_system_analysis' ) {
                this.file_system_analysis_is_finished = true;
            }
            this.state_timer = Math.round(new Date().getTime()/1000);
            this.setPercents( 100 );
            this.scan_percent = 0;
            this.offset = 0;
            setTimeout(() => {
                this.controller( result );
            }, 300);
        }
    };

    /**
     * Function Error
     * @param {object} xhr
     * @param {string} status
     * @param {string} error
     */
    error( xhr, status, error ) {
        let errorOutput = this.errorOutput;

        console.log( '%c APBCT_AJAX_ERROR', 'color: red;' );
        console.log( status );
        console.log( error );
        console.log( xhr );

        // if (status == 'file_system_analysis No files to scan' && this.state === 'file_system_analysis') {
            // this.file_system_analysis_is_finished = true;
            // this.pause();
            // this.resume();
            // this.controller();
            // return;
        // }

        if (status == 'error' && (error == '' || error == 'Not found')) {
            if (!this.tryCount) {
                this.tryCount = 0;
                this.retryLimit = 30;
            }
            this.tryCount++;
            console.log('Try #' + this.tryCount);
            this.setCoefficients(this.state);
            if (this.tryCount <= this.retryLimit) {
                this.pause();
                this.resume();
                this.controller();
                return;
            }
        }

        if ( xhr.status === 200 ) {
            if ( status === 'parsererror' ) {
                errorOutput( 'Unexpected response from server. See console for details.', this.state );
                console.log( '%c ' + xhr.responseText, 'color: pink;' );
            } else {
                let errorString = status;
                if ( typeof error !== 'undefined' ) {
                    errorString += ' Additional info: ' + error;
                }
                errorOutput( errorString, this.state );
            }
        } else if (xhr.status === 500) {
            errorOutput( 'Internal server error.', this.state);
        } else {
            errorOutput('Unexpected response code: ' + xhr.status + '. Error: ' + status, this.state);
        }

        if ( this.progressbar ) {
            this.progressbar.fadeOut('slow');
        }

        this.end();
    };

    /**
     * Error Output
     * @param {string} errorMsg
     * @param {string} stage
     */
    errorOutput( errorMsg, stage ) {
        spbcModal.open().putError( errorMsg + '<br>Stage: ' + stage);
    };

    /**
     * Log Raw
     * @param {htmlString|Element|Text|Array|jQuery} messageToLog
     */
    logRaw(messageToLog) {
        jQuery('.spbc-scan-log-title').removeClass('spbc---hidden');
        jQuery('.spbc_log-wrapper').removeClass('spbc---hidden');
        jQuery('.spbc_log-wrapper .panel-body').prepend( messageToLog );
    };

    /**
     * Log File Entry
     * @param {array} items
     */
    logFileEntry(items) {
        for ( let key in items ) {
            if ( key ) {
                this.logRaw( '<p class="spbc_log-line">' +
                this.getSiteUTCShiftedTimeString() + ' - ' +
                items[key].path + '<b>: ' + items[key].status +
                '</b></p>' );
            }
        }
    };

    /**
     * Log Stage Entry
     * @param {obj} data
     */
    logStageEntry(data) {
        if (typeof jQuery('.panel-body  .spbc_log-line span').first() !== 'undefined' &&
            typeof jQuery('.panel-body  .spbc_log-line span').first()[0] !== 'undefined' &&
            jQuery('.panel-body  .spbc_log-line span').first()[0].textContent === data.description
        ) {
            return;
        }
        this.logRaw( '<p class="spbc_log-line">test ' +
            this.getSiteUTCShiftedTimeString() + ' - ' + '<b>' +
            data.title + '</b> ' + '<span>' + data.description + '</span></p>' );
    };

    /**
     * Show Link For Shuffle Salts
     * @param {string} message
     */
    showLinkForShuffleSalts(message) {
        jQuery('#spbc_notice_about_shuffle_link').remove();
        jQuery(jQuery('.spbc_tab--active .spbc_wrapper_field p')[1])
            .after(
                '<div style="text-align: center;" id="spbc_notice_about_shuffle_link">' +
                '<a href="options-general.php?page=spbc&spbc_tab=settings_general#action-shuffle-salts-wrapper">' +
                message +
                '</a>' +
                '</div>',
            );
    }

    /**
     * Get Site UTC Shifted Time String
     * @return {string}
     */
    getSiteUTCShiftedTimeString() {
        let utcShiftedTs = false;
        // gettings current system/browser offset
        let currentBrowserOffset = new Date().getTimezoneOffset();
        currentBrowserOffset = currentBrowserOffset * -1 * 1000 * 60;
        // chek if global ct object is defined
        if (typeof spbcScaner !== 'undefined' &&
            typeof spbcScaner.timezone_shift !== 'undefined' &&
            spbcScaner.timezone_shift !== false) {
            utcShiftedTs = Date.now() - currentBrowserOffset + (spbcScaner.timezone_shift * 1000);
        }
        let ctDate = utcShiftedTs ? new Date(utcShiftedTs) : new Date();
        // construct date string
        let shortMonthName = new Intl.DateTimeFormat('en-US', {month: 'short'}).format;
        let minutes = String(ctDate.getMinutes()).padStart(2, '0');
        let seconds = String(ctDate.getSeconds()).padStart(2, '0');
        return shortMonthName(ctDate) + ' ' +
            ctDate.getDate() + ' ' + ctDate.getFullYear() + ' ' +
            ctDate.getHours() + ':' + minutes + ':' + seconds;
    }
}
