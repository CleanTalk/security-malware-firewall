(function($){
	
	// Wrappers
	$.spbc = {
		scanner: {
			
			// Controller
			control: function(result, data, start) { return spbcObj.spbcScannerPlugin('control', result, data, start) },
			
			// Common
			data:  function(param, data) { return spbcObj.spbcScannerPlugin('data', param, data)  },
			ajax:  function(data)        { return spbcObj.spbcScannerPlugin('ajax', data)         },
			start: function()            { return spbcObj.spbcScannerPlugin('start')              },
			end:   function()            { return spbcObj.spbcScannerPlugin('end')                },
			pause: function(result, data){ return spbcObj.spbcScannerPlugin('pause', result, data)},
			resume:function()            { return spbcObj.spbcScannerPlugin('resume')             },
			
			// Debug
			clear:           function() { return spbcObj.spbcScannerPlugin('clear')          },
			clear_callback:  function() { return spbcObj.spbcScannerPlugin('clear_callback') },
			
			// Actions
			getHashes:     function()                     { return spbcObj.spbcScannerPlugin('getHashes')},
			countPlug:     function()                     { return spbcObj.spbcScannerPlugin('countPlug')},
			getHashesPlug: function()                     { return spbcObj.spbcScannerPlugin('getHashesPlug')},
			getHashesApproved: function()                 { return spbcObj.spbcScannerPlugin('getHashesApproved')},
			clearTable:    function()                     { return spbcObj.spbcScannerPlugin('clearTable')},
			count:         function()                     { return spbcObj.spbcScannerPlugin('count')},
			scan:          function()                     { return spbcObj.spbcScannerPlugin('scan')},
			countModified_sign: function(status, checked) { return spbcObj.spbcScannerPlugin('countModified_sign', status, checked)},
			countModified_heur: function(status, checked) { return spbcObj.spbcScannerPlugin('countModified_heur', status, checked)},
			scanModified_sign:  function(status)          { return spbcObj.spbcScannerPlugin('scanModified_sign',  status)},
			scanModified_heur:  function(status)          { return spbcObj.spbcScannerPlugin('scanModified_heur',  status)},
			cureBackup:    function()                     { return spbcObj.spbcScannerPlugin('cureBackup')},
			countCure:     function()                     { return spbcObj.spbcScannerPlugin('countCure')},
			cure:          function()                     { return spbcObj.spbcScannerPlugin('cure')},
			countLinks:    function()                     { return spbcObj.spbcScannerPlugin('countLinks')},
			scanLinks:     function()                     { return spbcObj.spbcScannerPlugin('scanLinks')},
			sendResults:   function()                     { return spbcObj.spbcScannerPlugin('sendResults')},
            countFrontend: function()                     { return spbcObj.spbcScannerPlugin('countFrontend')},
            scanFrontend:  function()                     { return spbcObj.spbcScannerPlugin('scanFrontend')},

			// Callbacks
			getHashes_callback:     function(result, data) { return spbcObj.spbcScannerPlugin('getHashes_callback',     result, data) },
			countPlug_callback:     function(result, data) { return spbcObj.spbcScannerPlugin('countPlug_callback',     result, data) },
			getHashesPlug_callback: function(result, data) { return spbcObj.spbcScannerPlugin('getHashesPlug_callback', result, data) },
			getHashesApproved_callback: function(result, data) { return spbcObj.spbcScannerPlugin('getHashesApproved_callback', result, data) },
			count_callback:         function(result, data) { return spbcObj.spbcScannerPlugin('count_callback',         result, data) },
			scan_callback:          function(result, data) { return spbcObj.spbcScannerPlugin('scan_callback',          result, data) },
			countModified_callback: function(result, data) { return spbcObj.spbcScannerPlugin('countModified_callback', result, data) },
			scanModified_callback:  function(result, data) { return spbcObj.spbcScannerPlugin('scanModified_callback',  result, data) },
			cureBackup_callback:    function(result, data) { return spbcObj.spbcScannerPlugin('cureBackup_callback',    result, data) },
			countCure_callback:     function(result, data) { return spbcObj.spbcScannerPlugin('countCure_callback',     result, data) },
			cure_callback:          function(result, data) { return spbcObj.spbcScannerPlugin('cure_callback',          result, data) },
			countLinks_callback:    function(result, data) { return spbcObj.spbcScannerPlugin('countLinks_callback',    result, data) },
			scanLinks_callback:     function(result, data) { return spbcObj.spbcScannerPlugin('scanLinks_callback',     result, data) },
            countFrontend_callback: function(result, data) { return spbcObj.spbcScannerPlugin('countFrontend_callback', result, data) },
            scanFrontend_callback:  function(result, data) { return spbcObj.spbcScannerPlugin('scanFrontend_callback',  result, data) },
			sendResults_callback:   function(result, data) { return spbcObj.spbcScannerPlugin('sendResults_callback',   result, data) },
			
		},
	};
	
	$.fn.spbcScannerPlugin = function(param){
		
		var scanner = jQuery.spbc.scanner;
		
		// Methods
		var methods = {
			init: function(settings) {
				console.log('init');
				this.data(settings);
				window.spbcObj = this;
			},
			start: function(opt){
				opt.progressbar.show(500)
					.progressbar('option', 'value', 0);
				opt.progress_overall.show(500);
				opt.button.html(spbcScaner.button_scan_pause);
				opt.spinner.css({display: 'inline'});
			},
			end: function(opt){
				opt.progressbar.hide(500)
					.progressbar('option', 'value', 100);
				opt.progress_overall.hide(500);
				opt.button.html(spbcScaner.button_scan_perform);
				opt.spinner.css({display: 'none'});
				this.removeData('status');
				this.data('total_links', 0)
					.data('plug', false)
					.data('total_scanned', 0);
			},
			resume: function(opt){
				console.log('RESUME');
				opt.button.html(spbcScaner.button_scan_pause);
				opt.spinner.css({display: 'inline'});
				opt.paused = false;
			},			
			pause: function(result, data, opt){
				console.log('PAUSE');
				opt.button.html(spbcScaner.button_scan_resume);
				opt.spinner.css({display: 'none'});
				opt.result = result;
				opt.data = data;
				opt.paused = true;
			},
			data: function(param, data){
				if(typeof data === 'undefined'){
					if(param === 'all')
						return this.data();
					return this.data(param);
				}
				this.data(param, data);
			},
			clear: function(){
				console.log('CLEAR');
				scanner.start();
				this.data('scan_status', 'clear')
					.data('callback', scanner.clear_callback);
				var data = { action : 'spbc_scanner_clear' };
				scanner.ajax(data);
			},
			clear_callback: function(){
				console.log('CLEARED');
				scanner.end();
			},
			
			// AJAX request
			ajax: function(data, opt){
				// Default prarams
				var notJson = this.data('notJson') || false;
				console.log(opt.status);
				// Changing text and precent
				if(opt.prev_action != data.action && typeof opt.progressbar !== 'undefined'){
					opt.progress_overall.children('span')
						.removeClass('spbc_bold')
						.filter('.spbc_overall_scan_status_'+opt.status)
							.addClass('spbc_bold');
					opt.progressbar.progressbar('option', 'value', 0);
					opt.progressbar_text.text(spbcScaner['progressbar_'+opt.status] + ' - 0%');
				}
				this.data('prev_action', data.action);
				
				// Default params
				data.security = spbcSettings.ajax_nonce; // Adding security code
				jQuery.ajax({
					type: "GET",
					url: spbcSettings.ajaxurl,
					data: data,
					success: function(result){
						if(!notJson) result = JSON.parse(result);
						if(result.error){
							console.log(result); console.log(data);	console.log(opt);
							alert('Error happens: ' + (result.error || 'Unkown'));
							setTimeout(function(){ scanner.end(); }, 1000);
						}else{
							console.log(result); console.log(data);	console.log(opt);
							if(result.processed)
								opt.button.data('precent_completed', opt.precent_completed + result.processed / opt.scan_precent);
							if(typeof opt.progressbar !== 'undefined'){
								opt.progressbar.progressbar('option', 'value', Math.floor(opt.precent_completed));
								opt.progressbar_text.text(spbcScaner['progressbar_'+opt.status] + ' - ' + Math.floor(opt.precent_completed) + '%');
							}
							if(typeof opt.callback !== 'undefined'){
								setTimeout(function(){
									opt.callback(result, data);
								}, 1000);
							}
						}
					},
					error: function(jqXHR, textStatus, errorThrown){
						scanner.end();
						console.log('SPBC_AJAX_ERROR');
						console.log(jqXHR);
						console.log(textStatus);
						console.log(errorThrown);
						if(errorThrown)
							alert(errorThrown);
					},
					timeout: opt.timeout,
				});
			},
			
			// CONTROL
			
			control: function(result, data, action, opt){
				
				this.data('callback', scanner.control)
					.data('precent_completed', 100);
					
				if(typeof action !== 'undefined' && action){
					if(opt.status == null){
						scanner.start();
						scanner.getHashes();
						return;
					}else{
						if(opt.paused == true){
							scanner.resume();
							result = opt.result;
							data = opt.data;
						}else{
							scanner.pause(result, data);
							return;
						}
					}
				}
				if(opt.paused == true) return;
				
				setTimeout(function(){
					switch(opt.status){
						
						// WP Core
						case 'get_hashes':
							scanner.countPlug();
							break;
						case 'count_hashes_plug':
							scanner.getHashesPlug();
							break;
						case 'get_hashes_plug':
							scanner.clearTable();
							break;
						case 'clear_table':
							scanner.count();
							break;
						case 'count':
							scanner.scan();
							break;
						case 'scan':
							scanner.getHashesApproved();
							break;

						case 'get_hashes_approved':
							if( +spbcScaner.check_signature ){ scanner.countModified_sign('UNKNOWN,MODIFIED,OK,INFECTED', 'NO,YES_HEURISTIC');  return;}
							if( +spbcScaner.check_heuristic ){ scanner.countModified_heur('UNKNOWN,MODIFIED,OK,INFECTED', 'NO,YES_SIGNATURE');  return;}
							if( +spbcScaner.auto_cure       ){ scanner.cureBackup(); return;}
							if( +spbcScaner.check_links )    { scanner.countLinks(); return;}
							if( +spbcScaner.check_frontend ) { scanner.countFrontend(); return;}
							scanner.sendResults();
							break;

						// Signatures
						case 'count_modified_sign':
							if(result.total > 30 || true)
								opt.warnings.long_scan.show(500);
							scanner.scanModified_sign('UNKNOWN,MODIFIED,OK,INFECTED'); 
							break;
						
						case 'scan_modified_sign':
							if( +spbcScaner.check_heuristic ){ scanner.countModified_heur('UNKNOWN,MODIFIED,OK,INFECTED', 'NO,YES_SIGNATURE');  return;}
							if( +spbcScaner.auto_cure       ){ scanner.cureBackup(); return;}
							if( +spbcScaner.check_links )    { scanner.countLinks(); return; }
                            if( +spbcScaner.check_frontend ) { scanner.countFrontend(); return;}
							scanner.sendResults(); 
							break;
							
						// Heuristic
						case 'count_modified_heur':
							if(result.total > 30)
								opt.warnings.long_scan.show(500);
							scanner.scanModified_heur('UNKNOWN,MODIFIED,OK,INFECTED'); 
							break;
						
						case 'scan_modified_heur':
							if( +spbcScaner.auto_cure   )    { scanner.cureBackup();  return;}
							if( +spbcScaner.check_links )    { scanner.countLinks(); return;}
                            if( +spbcScaner.check_frontend ) { scanner.countFrontend(); return;}
							scanner.sendResults(); 
							break;

						// Cure
						case 'cure_backup':
							scanner.countCure();
							break;
						case 'count_cure':
							scanner.cure();
							break;
						case 'cure':
							if( +spbcScaner.check_links ) { scanner.countLinks(); return;}
                            if( +spbcScaner.check_frontend ) { scanner.countFrontend(); return;}
							scanner.sendResults(); 
							break;

						// Links
						case 'count_links':
							scanner.scanLinks();
							break;
						case 'scan_links':
                            if( +spbcScaner.check_frontend ) { scanner.countFrontend(); return;}
							scanner.sendResults();
							break;

						// Frontend
						case 'frontend_count':
							scanner.scanFrontend();
							break;
						case 'frontend_scan':
							scanner.sendResults();
							break;

						// Send results
						case 'send_results':
							scanner.end();
							opt.button.data('status', null);
							location.href=location.origin+location.pathname+"?page=spbc&spbc_tab=scanner";
							break;
						
						default:
							
							break;
					}
				}, 300);
			},
			
			// ACTIONS
			getHashes: function(opt){
				console.log('GET_HASHES');
				this.data('status', 'get_hashes');
				scanner.ajax({ action: 'spbc_scanner_get_remote_hashes'	});
			},
			countPlug: function(opt){
				console.log('COUNT_PLUG');
				this.data('status', 'count_hashes_plug')
					.data('callback', scanner.countPlug_callback);
				scanner.ajax({ action: 'spbc_scanner_count_plug' });
			},
			countPlug_callback: function(result, data, opt){
				console.log('PLUG_COUNTED');
				this.data('scan_precent', +result.total / 98);
				scanner.control();
			},
			getHashesPlug: function(opt){
				console.log('GETTING_HASHES');
				this.data('status', 'get_hashes_plug')
					.data('precent_completed', 0)
					.data('callback', scanner.getHashesPlug_callback);
				scanner.ajax({
					action: 'spbc_scanner_get_remote_hashes_plug',
					amount : 2,
				});
				console.log('HASHES_RECEIVED');
			},
			getHashesPlug_callback: function(result, data, opt){
				console.log('GETTING_HASHES_PLUG');
                if(result.outdated)
                    opt.warnings.outdated.show(500);
				if(result.processed >= data.amount){
					scanner.ajax(data);
					return;
				}
				console.log('HASHES_PLUG_RECEIVED');
				opt.progressbar.progressbar('option', 'value', 100);
				opt.progressbar_text.text(spbcScaner['progressbar_'+opt.status] + ' - 100%');
				scanner.control();
			},
			getHashesApproved: function(opt){
				console.log('GET_HASHES');
				this.data('status', 'get_hashes_approved');
				scanner.ajax({ action: 'spbc_scanner_get_remote_hashes_approved' });
			},
			getHashesApproved_callback: function(result, data, opt){
				console.log('HASHES_APPROVED_RECEIVED');
				this.data('scan_precent', +result.total / 98);
				scanner.control();
			},
			clearTable: function(){
				console.log('CLEAR_TABLE');
				this.data('status', 'clear_table');
				scanner.ajax({action : 'spbc_scanner_clear_table'});
			},			
			count: function(opt){
				console.log('COUNT_FILES');
				this.data('status', 'count')
					.data('callback', scanner.count_callback);
				scanner.ajax({
					action : 'spbc_scanner_count_files',
				});
			},
			count_callback: function(result, data, opt){
				console.log('FILES COUNTED');
				this.data('total_scanned', this.data('total_scanned') + +result.total)
					.data('scan_precent', +result.total / 98);
				scanner.control();
			},
			scan: function(opt){
				console.log('SCAN FILES');
				data = {
					action : 'spbc_scanner_scan',
					offset : 0,
					amount : 700,
				};
				this.data('status', 'scan')
					.data('precent_completed', 0)
					.data('callback', scanner.scan_callback);
				scanner.ajax(data);
			},
			scan_callback: function(result, data, opt){
				console.log('SCANNING FILES');
				if(result.processed >= data.amount){
					data.offset += data.amount;
					scanner.ajax(data);
					return;
				}
				console.log('SCAN COMPLETED');
				opt.progressbar.progressbar('option', 'value', 100);
				opt.progressbar_text.text(spbcScaner['progressbar_'+opt.status] + ' - 100%');
				scanner.control();
			},
			countModified_heur: function(status, checked, opt){
				console.log('COUNT MODIFIED FILES');
				this.data('status', 'count_modified_heur')
					.data('callback', scanner.countModified_callback);
				data = {
					action : 'spbc_scanner_count_files__by_status',
					status : status,
					checked: checked
				};
				scanner.ajax(data);
			},
			countModified_sign: function(status, checked, opt){
				console.log('COUNT MODIFIED FILES');
				this.data('status', 'count_modified_sign')
					.data('callback', scanner.countModified_callback);
				data = {
					action : 'spbc_scanner_count_files__by_status',
					status : status,
					checked: checked
				};
				scanner.ajax(data);
			},
			countModified_callback: function(result, data, opt){
				console.log('MODIFIED FILES COUNTED');
				this.data('scan_precent', +result.total / 98);
				scanner.control(result, data);
			},
			scanModified_sign: function(status, opt){
				console.log('SCAN MODIFIED FILES');
				this.data('status', 'scan_modified_sign')
					.data('precent_completed', 0)
					.data('callback', scanner.scanModified_callback)
					.data('timeout',  60000);
				data = {
					action : 'spbc_scanner_scan_signatures',
					amount : 50,
					status : status
				};
				scanner.ajax(data);
			},
			scanModified_heur: function(status, opt){
				console.log('SCAN MODIFIED FILES');
				this.data('status', 'scan_modified_heur')
					.data('precent_completed', 0)
					.data('callback', scanner.scanModified_callback)
					.data('timeout',  60000);
				data = {
					action : 'spbc_scanner_scan_heuristic',
					amount : 5,
					status : status
				};
				scanner.ajax(data);
			},
			scanModified_callback: function(result, data, opt){
				console.log('MODIFIED FILES SCANNING');
				if(result.processed >= data.amount){
					scanner.ajax(data);
					return;
				}
				console.log('MODIFIED FILES END');
				opt.progressbar.progressbar('option', 'value', 100);
				opt.progressbar_text.text(spbcScaner['progressbar_'+opt.status] + ' - 100%');
				scanner.control();
			},
			
			cureBackup: function(opt){
				console.log('CURE BACKUP');
				this.data('status', 'cure_backup')
					.data('callback', scanner.cureBackup_callback);
				data ={
					action: 'spbc_scanner_backup_sigantures',
				};
				scanner.ajax(data);
			},
			cureBackup_callback: function(result, data, opt){
				console.log('CURE BACKUPED');
				this.data('scan_precent', +result.total / 98);
				scanner.control();
			},
			
			countCure: function(opt){
				console.log('COUNT LINKS');
				this.data('status', 'count_cure')
					.data('callback', scanner.countCure_callback);
				data ={
					action: 'spbc_scanner_count_cure',
				};
				scanner.ajax(data);
			},
			countCure_callback: function(result, data, opt){
				console.log('CURE COUNTED');
				this.data('scan_precent', +result.total / 98);
				scanner.control();
			},
			cure: function(opt){
				console.log('CURE');
				this.data('status', 'cure')
					.data('precent_completed', 0)
					.data('callback', scanner.cure_callback)
					.data('timeout', 30000);
				data ={
					action: 'spbc_scanner_cure',
					amount: 1,
				};
				scanner.ajax(data);
			},
			cure_callback: function(result, data, opt){
				console.log('FILES CURED');
				opt.progressbar.progressbar('option', 'value', 100);
				opt.progressbar_text.text(spbcScaner['progressbar_'+opt.status] + ' - 100%');
				scanner.control();
			},
			
			countLinks: function(opt){
				console.log('COUNT LINKS');
				this.data('status', 'count_links')
					.data('callback', scanner.countLinks_callback);
				data ={
					action: 'spbc_scanner_count_links',
				};
				scanner.ajax(data);
			},
			countLinks_callback: function(result, data, opt){
				console.log('LINKS COUNTED');
				this.data('scan_precent', +result.total / 98);
				scanner.control();
			},
			scanLinks: function(opt){
				console.log('SCAN LINKS');
				this.data('status', 'scan_links')
					.data('precent_completed', 0)
					.data('callback', scanner.scanLinks_callback)
					.data('timeout', 30000);
				var data ={
					action: 'spbc_scanner_scan_links',
					amount: 10,
				};
				scanner.ajax(data);
			},
			scanLinks_callback: function(result, data, opt){
				console.log('LINKS SCANNING');
				if ( +result.processed){
					this.data('total_links', +opt.total + +result.found);
					scanner.ajax(data);
					return;
				}
				console.log('LINKS SCANNED');
				opt.progressbar.progressbar('option', 'value', 100);
				opt.progressbar_text.text(spbcScaner['progressbar_'+opt.status] + ' - 100%');
				scanner.control();
			},
            countFrontend: function(opt){
                console.log('COUNT FRONTEND');
                this.data('status', 'frontend_count')
                    .data('callback', scanner.countFrontend_callback);
                var data ={
                    action: 'spbc_scanner_frontend__count',
                };
                scanner.ajax(data);
            },
            countFrontend_callback: function(result, data, opt){
                console.log('FRONTEND COUNTED');
                this.data('scan_precent', +result.total / 98);
                scanner.control();
            },
            scanFrontend: function(opt){
                console.log('SCAN FRONTEND');
                this.data('status', 'frontend_scan')
                    .data('precent_completed', 0)
                    .data('callback', scanner.scanFrontend_callback)
                    .data('timeout', 30000);
                var data ={
                    action: 'spbc_scanner_frontend__scan',
                    amount: 1,
                };
                scanner.ajax(data);
            },
            scanFrontend_callback: function(result, data, opt){
                console.log('FRONTEND SCANNING');
                if ( +result.processed){
                    this.data('total_links', +opt.total + +result.found);
                    scanner.ajax(data);
                    return;
                }
                console.log('FRONTEND SCANNED');
                opt.progressbar.progressbar('option', 'value', 100);
                opt.progressbar_text.text(spbcScaner['progressbar_'+opt.status] + ' - 100%');
                scanner.control();
            },
			sendResults: function(){
				console.log('SEND RESULTS');
				this.data('status', 'send_results')
					.data('callback', scanner.sendResults_callback);
				var data = {
					action: 'spbc_scanner_send_results',
					total_scanned: this.data('total_scanned'),
				};
				if( +spbcScaner.check_links )
					data.total_links = this.data('total_links');
				scanner.ajax(data);
			},
			sendResults_callback: function(result, data, opt){
				console.log('RESULTS_SENT');
				if( +spbcScaner.check_links ){
					opt.button.parent().next().html(spbcScaner.last_scan_was_just_now_links.printf(data.total_scanned, data.total_links));
				}else{
					opt.button.parent().next().html(spbcScaner.last_scan_was_just_now.printf(data.total_scanned)); 
				}	
					
				jQuery('#spbc_scanner_status_icon').attr('src', spbcSettings.img_path + '/yes.png');
				scanner.control();
			},
		};
		
		// Method call. Passing current settings to each function as the last element.
		if(typeof methods[param]==='function'){
			var args = Array.prototype.slice.call(arguments, 1);
			if(param !== 'data')
				args.push(this.data());
			// console.log(param); console.log(args);
			return methods[param].apply(this, args);
		}
		
		// Init
		if(typeof param === 'object'){
			var settings = $.extend({
				
				status: null,
				paused_status: null,
				paused: false,
				
				total_links: 0,
				total_scanned: 0,
				
				button: null,
				spinner: null,
				
				progress_overall: null,
				progressbar: null,
				progressbar_text: null,
				
				callback: null,
				timeout: 60000,
			}, param);
			return methods.init.apply(this, [settings]);
		}
		
		// Error
		$.error( 'Method "' +  param + '" is unset for jQuery.spbcScannerPlugin' );		
	};
	
})(jQuery);
