/**
 * Timestamp
 *
 * @return {number}
 */
function spbcTimestamp() {/* eslint-disable-line no-unused-vars */
    return Math.floor(+new Date() / 1000);
}

/**
 * Hightlights element
 *
 * @param {number|string} id
 * @param {number} times
 */
function spbcHighlightElement(id, times) {/* eslint-disable-line no-unused-vars */
    times = times-1 || 0;
    jQuery('html, body').animate({scrollTop: jQuery(jQuery('#'+id)).offset().top - 100}, 'slow');
    jQuery('#'+id).addClass('spbc_highlighted');
    jQuery('#'+id).animate({outlineColor: 'rgba(255, 0, 0, 1.0)'}, 400, 'linear', function() {
        jQuery('#'+id).animate({outlineColor: 'rgba(255, 0, 0, 0.0)'}, 400, 'linear', function() {
            if (times>0) {
                spbcHighlightElement(id, times);
            } else {
                jQuery('#'+id).removeClass('spbc_highlighted');
            }
        });
    });
}

/**
 * Send AJAX Request
 *
 * @param {obj} data
 * @param {obj} params
 * @param {obj} obj
 */
function spbcSendAJAXRequest(data, params, obj) {/* eslint-disable-line no-unused-vars */
    let dataType = params.notJson ? 'text' : 'json';

    // Default params
    let button = params.button || null;
    let spinner = params.spinner || null;
    let progressbar = params.progressbar || null;
    let callback = params.callback || null;
    let notJson = params.notJson || null;
    let timeout = params.timeout || 15000;
    obj = obj || null;
    let context = params.context || this;

    // Button and spinner
    if (button) {
        button.setAttribute('disabled', 'disabled'); button.style.cursor = 'not-allowed';
    }
    if (spinner) {
        if (Array.isArray(spinner)) {
            spinner.forEach(function(el) {
                jQuery(el).css('display', 'inline');
            });
        } else {
            jQuery(spinner).css('display', 'inline');
        }
    }

    // Adding security code
    data.security = spbcSettings.ajax_nonce;
    data.no_cache = Math.random();

    // Using passed successCallback() or default
    let success = params.success || function(result) {
        if (button) {
            button.removeAttribute('disabled');
            button.style.cursor = 'pointer';
        }

        if (spinner) {
            if (Array.isArray(spinner)) {
                spinner.forEach(function(el) {
                    jQuery(el).css('display', 'none');
                });
            } else {
                jQuery(spinner).css('display', 'none');
            }
        }

        if (!notJson && typeof result !== 'object') {
            result = JSON.parse(result);
        }

        if (result.error) {
            setTimeout(function() {
                if (progressbar) progressbar.fadeOut('slow');
            }, 1000);
            let errorComment = typeof result.error_comment !== 'undefined' ? result.error_comment : null;
            errorOutput( result.error, errorComment );
        } else if (callback) {
            callback(result, data, params, obj);
        }
    };

    // Using passed successCallback() or default
    let error = params.error || function(jqXHR, textStatus, errorThrown) {
        if (button) {
            button.removeAttribute('disabled');
            button.style.cursor = 'pointer';
        }
        if (spinner) {
            if (Array.isArray(spinner)) {
                spinner.forEach(function(el) {
                    jQuery(el).css('display', 'none');
                });
            } else {
                jQuery(spinner).css('display', 'none');
            }
        }

        console.log( '%c APBCT_AJAX_ERROR', 'color: red;' );
        console.log( textStatus );
        console.log( errorThrown );
        console.log( jqXHR );

        errorOutput( textStatus );
    };

    var errorOutput = params.errorOutput || function( msg ) {};/* eslint-disable-line no-var */

    jQuery.ajax({
        context: context,
        type: 'POST',
        url: spbcSettings.ajaxurl,
        data: data,
        dataType: dataType,
        success: success,
        error: error,
        timeout: timeout,
    });
}
