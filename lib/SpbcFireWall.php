<?php

/*
 * 
 * CleanTalk Security Firewall class
 * 
 * @package Security Plugin by CleanTalk
 * @subpackage Firewall
 * @Version 2.0-wp
 * @author Cleantalk team (welcome@cleantalk.org)
 * @copyright (C) 2014 CleanTalk team (http://cleantalk.org)
 * @license GNU/GPL: http://www.gnu.org/copyleft/gpl.html
 *
 */

class SpbcFireWall extends SpbcHelper
{	
	public $ip_array = Array(); // Array with detected IPs
	public $blocked_ip = '';    // Blocked IP
	public $passed_ip = '';     // Passed IP
	public $result = null;      // Result
	
	public $waf_result = null;
	
	// TC
	public $tc_enabled = false; // Traffic control
	public $tc_limit = 1000;    // Traffic control limit requests
	
	// WAF
	public $waf_enabled    = false;
	public $waf_xss_check  = false;
	public $waf_sql_check  = false;
	public $waf_file_check = false;
	
	// MISC
	public $logged_in = false;
	
	public $waf_xss_patterns = array(
		'<script>',
		'</script>',
		'javascript:',
		'data:',
	);
	
	public $waf_sql_patterns = array(
		'-\d\s?union',
		';\s?union',
		';\s?or',
	);
	
	public $waf_file_mime_check = array(
		'text/x-php',
		'text/plain'
	);
	
	function __construct($params = array()){
		
		// TC
		$this->tc_enabled = isset($params['tc_enabled']) ? (bool)$params['tc_enabled'] : false;
		$this->tc_limit   = isset($params['tc_limit'])   ? (int)$params['tc_limit']    : 1000;
		
		// WAF
		$this->waf_enabled    = isset($params['waf_enabled'])    ? (bool)$params['waf_enabled']    : false;
		$this->waf_xss_check  = isset($params['waf_xss_check'])  ? (bool)$params['waf_xss_check']  : false;
		$this->waf_sql_check  = isset($params['waf_sql_check'])  ? (bool)$params['waf_sql_check']  : false;
		$this->waf_file_check = isset($params['waf_file_check']) ? (bool)$params['waf_file_check'] : false;
		
		// MISC
		$this->logged_in = isset($params['logged_in'])         ? (bool)$params['logged_in']     : false;

	}
	
	static public function ip_get($ip_types = array('real', 'remote_addr', 'x_forwarded_for', 'x_real_ip', 'cloud_flare')){
		
		$result = (array)parent::ip_get($ip_types);
		
		global $spbc;
		
		if(isset($_GET['spbct_test_ip'], $_GET['spbct_test'], $spbc->settings['spbc_key']) && $_GET['spbct_test'] == md5($spbc->settings['spbc_key'])){
			$ip_type = self::ip__validate($_GET['spbct_test_ip']);
			$test_ip = $ip_type == 'v6' ? self::ip__v6_normalizÐµ($_GET['spbct_test_ip']) : $_GET['spbct_test_ip'];
			if($ip_type)
				$result['test'] = $test_ip;
		}
		
		return $result;
	}
	
	public function ip_check(){
	
		global $wpdb;
		
		foreach($this->ip_array as $ip_origin => $current_ip){
			
			$ip_type = self::ip__validate($current_ip);
			
			if($ip_type && $ip_type == 'v4'){
				
				$current_ip_v4 = sprintf("%u", ip2long($current_ip));
				
				$sql = 'SELECT status
				FROM `'. SPBC_TBL_FIREWALL_DATA ."` 
				WHERE spbc_network_4 = $current_ip_v4 & spbc_mask_4
				AND ipv6 = 0;";
				
			}elseif($ip_type){
				
				$current_ip_txt = explode(':', $current_ip);
				$current_ip_1 = hexdec($current_ip_txt[0].$current_ip_txt[1]);
				$current_ip_2 = hexdec($current_ip_txt[2].$current_ip_txt[3]);
				$current_ip_3 = hexdec($current_ip_txt[4].$current_ip_txt[5]);
				$current_ip_4 = hexdec($current_ip_txt[6].$current_ip_txt[7]);
				
				$sql = 'SELECT status
				FROM `'. SPBC_TBL_FIREWALL_DATA ."` 
				WHERE spbc_network_1 = $current_ip_1 & spbc_mask_1
				AND   spbc_network_2 = $current_ip_2 & spbc_mask_2
				AND   spbc_network_3 = $current_ip_3 & spbc_mask_3
				AND   spbc_network_4 = $current_ip_4 & spbc_mask_4
				AND   ipv6 = 1;";
			}
			
			$result = $wpdb->get_results($sql, ARRAY_A);
			if(!empty($result)){
				
				$in_base = true;
				
				foreach($result as $enrty){
					if($enrty['status'] == 2)  $trusted     = true;
					if($enrty['status'] == 1)  $whitelisted = true;
					if($enrty['status'] == 0)  $deny        = true;
					if($enrty['status'] == -1) $deny_by_net = true;
					if($enrty['status'] == -2) $deny_by_dos = true;
				}
			}else{
				$in_base = false;
			}
			
			if($this->tc_enabled && empty($trusted) && empty($whitelisted) && $this->logged_in == false){
				$http_user_agent = !empty($_SERVER['HTTP_USER_AGENT']) 
					? addslashes(substr($_SERVER['HTTP_USER_AGENT'], 0, 300))
					: 'unknown';
				$tc_result = $wpdb->get_results(
					'SELECT SUM(requests) AS total_count'
						.' FROM `'. SPBC_TBL_FIREWALL_LOG .'`'
						." WHERE ip_entry = '$current_ip' AND http_user_agent = '$http_user_agent';",
					OBJECT
				);
				if(!empty($tc_result)){
					if($tc_result[0]->total_count >= $this->tc_limit){
						$deny_by_dos = true;
					}
				}							
			}
			
			if(!empty($in_base) || $this->tc_enabled){
				if(!empty($trusted)){
					$this->result = 'PASS_BY_TRUSTED_NETWORK';
					$this->passed_ip = $current_ip;
				}elseif(!empty($whitelisted)){
					$this->result = 'PASS_BY_WHITELIST';
					$this->passed_ip = $current_ip;
				}elseif(!empty($deny_by_dos)){
					$this->result = 'DENY_BY_DOS';
					$this->blocked_ip=$current_ip;
				}elseif(!empty($deny_by_net)){
					$this->result = 'DENY_BY_NETWORK';
					$this->blocked_ip=$current_ip;
				}elseif(!empty($deny)){
					$this->result = 'DENY';
					$this->blocked_ip=$current_ip;		
				}elseif($this->tc_enabled){
					$this->result = 'PASS';
					$this->passed_ip = $current_ip;
				}
			}
		}
	}
	
	public function waf_test(){
		
		if($this->waf_enabled && !in_array($this->result, array('PASS_BY_TRUSTED_NETWORK', 'PASS_BY_WHITELIST'))){
			
			// XSS
			if($this->waf_xss_check){
				if(isset($_GET['spbct_test_waf']) && $_GET['spbct_test_waf'] == 'xss'){
					$this->result = 'DENY_BY_WAF_XSS';
					$this->waf_pattern = 'TEST';
					$this->blocked_ip = end($this->ip_array);
				}
				if($this->waf_xss_check($_POST) || $this->waf_xss_check($_GET) || $this->waf_xss_check($_COOKIE)){
					$this->result = 'DENY_BY_WAF_XSS';
					$this->blocked_ip = end($this->ip_array);
				}
			}
			
			// SQL-injection
			if($this->waf_sql_check){
				if(isset($_GET['spbct_test_waf']) && $_GET['spbct_test_waf'] == 'sql'){
					$this->result = 'DENY_BY_WAF_SQL';
					$this->waf_pattern = 'TEST';
					$this->blocked_ip = end($this->ip_array);
				}
				if($this->waf_sql_check($_POST) || $this->waf_sql_check($_GET)){
					$this->result = 'DENY_BY_WAF_SQL';
					$this->blocked_ip = end($this->ip_array);
				}
			}
			
			// File
			if($this->waf_file_check){
				if($this->waf_file_check()){
					$this->result = 'DENY_BY_WAF_FILE';
					$this->blocked_ip = end($this->ip_array);
				}
			}
		}
	}
	
	public function waf_xss_check($arr){
		foreach($arr as $param){
			if(is_array($param)){
				$result = $this->waf_xss_check($param);
				if($result === true)
					return true;
				continue;
			}
			foreach($this->waf_xss_patterns as $pattern){
				if(stripos($param, $pattern) !== false){
					$this->waf_pattern = $pattern;
					return true;
				}
			}
		}
	}
	
	public function waf_sql_check($arr){
		foreach($arr as $param){
			if(is_array($param)){
				$result = $this->waf_sql_check($param);
				if($result === true)
					return true;
				continue;
			}
			foreach($this->waf_sql_patterns as $pattern){
				if(preg_match('/'.$pattern.'/i', $param) === 1){
					$this->waf_pattern = $pattern;
					return true;
				}
			}
		}
	}
	
	public function waf_file_check(){
		if(!empty($_FILES)){
			foreach($_FILES as $file){
				if ((empty($file['errror']) || $file['errror'] == UPLOAD_ERR_OK) && is_uploaded_file($file['tmp_name'])) {
					if(is_readable($file['tmp_name']) && in_array(mime_content_type($file['tmp_name']), $this->waf_file_mime_check)){
						$fileh = new SpbcScannerH(null, array('content' => file_get_contents($file['tmp_name'])));
						if(empty($file->error)){
							$fileh->process_file();
							if(!empty($fileh->verdict)){
								$this->waf_pattern = reset($fileh->verdict);
								return true;
							}
						}
					}
				}
			}
		}
	}
	
	public function _die($service_id, $reason = '', $additional_reason = ''){
		
		// Adding block reason
		switch($reason){
			case 'DENY':             $reason = __('Blacklisted', 'security-malware-firewall');                      break;
			case 'DENY_BY_NETWORK':	 $reason = __('Hazardous network', 'security-malware-firewall');	            break; 
			case 'DENY_BY_DOS':      $reason = __('Blocked by DOS prevertion system', 'security-malware-firewall'); break;
			case 'DENY_BY_WAF_XSS':	 $reason = __('Blocked by Web Application Firewall: XSS atatck detected.',    'security-malware-firewall'); break;
			case 'DENY_BY_WAF_SQL':	 $reason = __('Blocked by Web Application Firewall: SQL-injection detected.', 'security-malware-firewall'); break;
			case 'DENY_BY_WAF_FILE': $reason = __('Blocked by Web Application Firewall: Malicious files upload.', 'security-malware-firewall'); break;
		}
		
		$spbc_die_page = file_get_contents(SPBC_PLUGIN_DIR . 'inc/spbc_die_page.html');
		
		$spbc_die_page = str_replace( "{REMOTE_ADDRESS}", $this->blocked_ip,     $spbc_die_page );
		$spbc_die_page = str_replace( "{SERVICE_ID}",     $service_id,           $spbc_die_page );
		$spbc_die_page = str_replace( "{HOST}",           $_SERVER['HTTP_HOST'], $spbc_die_page );
		$spbc_die_page = str_replace( "{REASON}",         $reason, $spbc_die_page );
		
		if(headers_sent() === false){
			header('Expires: '.date(DATE_RFC822, mktime(0, 0, 0, 1, 1, 1971)));
			header('Cache-Control: no-store, no-cache, must-revalidate');
			header('Cache-Control: post-check=0, pre-check=0', FALSE);
			header('Pragma: no-cache');
			header("HTTP/1.0 403 Forbidden");
			$spbc_die_page = str_replace("{GENERATED}", "", $spbc_die_page);
		}else{
			$spbc_die_page = str_replace("{GENERATED}", "<h2 class='second'>The page was generated at&nbsp;".date("D, d M Y H:i:s")."</h2>",$spbc_die_page);
		}
		wp_die( $spbc_die_page, "Blacklisted", Array('response'=>403) );
	}
	
	static public function firewall_update($spbc_key, $file_url = null, $immediate = false){
		
		global $wpdb;
		
		// Getting remote file name
		if(!$file_url){
		
			$result = self::api_method__security_firewall_data_file($spbc_key);
		
			if(empty($result['error'])){
			
				if(!empty($result['file_url'])){
					
					$file_url = $result['file_url'];
					
					if(!$immediate){
					// Asynchronously call
					return SpbcHelper::http__request(
						get_option('siteurl'), 
						array(
							'spbc_remote_call_token'  => md5($spbc_key),
							'spbc_remote_call_action' => 'update_security_firewall',
							'plugin_name'             => 'spbc',
							'file_url'                => $result['file_url'],
						),
						array('get', 'dont_wait_for_answer')
					);
					}
					
				}else
					return array('error' => true, 'error_string' => 'BAD_RESPONSE');
			}else
				return $result;
		}
			
		// Check for remote file
		if($file_url){
			
			sleep(5); // Wait till file will be created
			
			if(SpbcHelper::http__request($file_url, array(), 'get_code') === 200){ // Check if it's there
			
				$wpdb->query('DELETE FROM `'. SPBC_TBL_FIREWALL_DATA .'`;');
				
				$gf = gzopen($file_url, 'rb');
				
				for($count_result=0; !gzeof($gf); ){
					
					$query="INSERT INTO `". SPBC_TBL_FIREWALL_DATA ."` VALUES ";
					
					for($i=0; SPBC_WRITE_LIMIT !== $i && !gzeof($gf); $i++, $count_result++){
						$entry = trim(gzgets($gf, 1024));
						if(empty($entry)) continue;
						$entry = explode(',', $entry);
						$ip = $entry[0];
						$mask = $entry[1];
						// $comment = $entry[2]; // Comment from user
						$status = $entry[3];
					
						// IPv4
						if(is_numeric($ip)){
							$mask = sprintf('%u', 4294967295 << (32 - $mask));
							$query .= "(0, 0, 0, $ip, 0, 0, 0, $mask, $status, 0),";
						// IPv6
						}else{
							$ip = substr($ip, 1, -1); // Cut ""
							$ip = SpbcHelper::ip__v6_normalizÐµ($ip); // Normalize
							$ip = explode(':', $ip);
							$ip_1 = hexdec($ip[0].$ip[1]);
							$ip_2 = hexdec($ip[2].$ip[3]);
							$ip_3 = hexdec($ip[4].$ip[5]);
							$ip_4 = hexdec($ip[6].$ip[7]);
						
							for($k = 1; $k < 5; $k++){
								$curr = 'mask_'.$k;
								$$curr = pow(2, 32) - pow(2, 32 - ($mask - 32 >= 0 ? 32 : $mask));
								$mask = ($mask - 32 <= 0 ? 0 : $mask - 32);
							}
							$query .= "($ip_1, $ip_2, $ip_3, $ip_4, $mask_1, $mask_2, $mask_3, $mask_4, $status, 1),";
						}
					}
					$wpdb->query(substr($query, 0, -1).';');
				}
				gzclose($gf);
				return $count_result;
			}else
				return array('error' => true, 'error_string' => 'NO_REMOTE_FILE_FOUND');
		}
	}
	
	//Add entries to SFW log
	public function update_logs($ip, $status){
		
		if(empty($ip) || empty($status)){
			error_log('SPBC Firewall log update failed');
			return;
		}
				
		global $wpdb;
		
		// Parameters
		$time            = time();
		$page_url        = addslashes((!empty($_SERVER['HTTPS']) && $_SERVER['HTTPS'] != 'off' ? 'https://' : 'http://') . $_SERVER['HTTP_HOST'].$_SERVER['REQUEST_URI']);
		$page_url        = substr($page_url, 0 , 4096);
		$http_user_agent = !empty($_SERVER['HTTP_USER_AGENT']) 
			? addslashes(htmlspecialchars(substr($_SERVER['HTTP_USER_AGENT'], 0, 300)))
			: 'unknown';
		$request_method  = $_SERVER['REQUEST_METHOD'];
		$x_forwarded_for = !empty($_SERVER['HTTP_X_FORWARDED_FOR']) 
			? $_SERVER['HTTP_X_FORWARDED_FOR']
			: '';
		$x_forwarded_for = addslashes(htmlspecialchars(substr($x_forwarded_for, 0 , 15)));
		$id              = md5($ip.$http_user_agent.$status);
		
		$query = "INSERT INTO `". SPBC_TBL_FIREWALL_LOG ."`
			(`entry_id`, `ip_entry`, `entry_timestamp`, `status`, `requests`, `page_url`, `http_user_agent`, `request_method`, `x_forwarded_for`) 
			VALUES
				('$id', '$ip', $time, '$status', 1, '$page_url', '$http_user_agent', '$request_method', IF('$x_forwarded_for' = '', NULL, '$x_forwarded_for'))
			ON DUPLICATE KEY UPDATE 
				ip_entry = ip_entry,
				entry_timestamp = $time,
				status = '$status',
				requests = requests + 1,
				page_url = '$page_url',
				http_user_agent = http_user_agent,
				request_method = '$request_method',
				x_forwarded_for = IF('$x_forwarded_for' = '', NULL, '$x_forwarded_for')";
			
		$result = $wpdb->query($query);
	}
	
	//*Send and wipe SFW log
	public static function send_logs($spbc_key){
		
		global $wpdb;
		
		//Getting logs
		$result = $wpdb->get_results("SELECT * FROM `". SPBC_TBL_FIREWALL_LOG ."` LIMIT ".SPBC_SELECT_LIMIT, ARRAY_A);
		
		if(count($result)){
			//Compile logs
			$data = array();
			
			foreach($result as $key => $value){
				
				//Compile log
				$to_data = array(
					'datetime'        => date('Y-m-d H:i:s', $value['entry_timestamp']),
					'page_url'        => $value['page_url'],
					'visitor_ip'      => self::ip__validate($value['ip_entry']) == 'v4' ? (int)sprintf('%u', ip2long($value['ip_entry'])) : (string)$value['ip_entry'],
					'http_user_agent' => $value['http_user_agent'],
					'request_method'  => $value['request_method'],
					'x_forwarded_for' => $value['x_forwarded_for'],
				);
				
				// Legacy
				switch($value['status']){
					case 'PASS_BY_TRUSTED_NETWORK': $to_data['status_efw'] = 3;  break;
					case 'PASS_BY_WHITELIST':       $to_data['status_efw'] = 2;  break;
					case 'PASS':                    $to_data['status_efw'] = 1;  break;
					case 'DENY':                    $to_data['status_efw'] = 0;  break;
					case 'DENY_BY_NETWORK':         $to_data['status_efw'] = -1; break;
					case 'DENY_BY_DOS':             $to_data['status_efw'] = -2; break;
					case 'DENY_BY_WAF_XSS':         $to_data['status_efw'] = -3; break;
					case 'DENY_BY_WAF_SQL':         $to_data['status_efw'] = -4; break;
					case 'DENY_BY_WAF_FILE':        $to_data['status_efw'] = -5; break;
				}
				
				switch($value['status']){
					case 'PASS_BY_TRUSTED_NETWORK': $to_data['status'] = 3;  break;
					case 'PASS_BY_WHITELIST':       $to_data['status'] = 2;  break;
					case 'PASS':                    $to_data['status'] = 1;  break;
					case 'DENY':                    $to_data['status'] = 0;  break;
					case 'DENY_BY_NETWORK':         $to_data['status'] = -1; break;
					case 'DENY_BY_DOS':             $to_data['status'] = -2; break;
					case 'DENY_BY_WAF_XSS':         $to_data['status'] = -3; break;
					case 'DENY_BY_WAF_SQL':         $to_data['status'] = -4; break;
					case 'DENY_BY_WAF_FILE':        $to_data['status'] = -5; break;
				}
				
				$to_data['hits'] = (int)$value['requests'];
					$data[] = $to_data;
			
			} unset($key, $value, $result, $to_data);
			
			// Sendings request
			$result = self::api_method__security_logs__sendFWData($spbc_key, $data);	
			
			// Checking answer and deleting all lines from the table
			if(empty($result['error'])){
				if($result['rows'] == count($data)){
					$wpdb->query("DELETE FROM `". SPBC_TBL_FIREWALL_LOG ."`");
					return count($data);
				}
			}else{
				return $result;
			}
		}else{
			return array(
				'error' => true,
				'error_string' => 'NO_LOGS_TO_SEND'
			);
		}
	}
}
