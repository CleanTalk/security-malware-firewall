<?php

namespace CleantalkSP\SpbctWP\VulnerabilityAlarm;

use CleantalkSP\SpbctWP\VulnerabilityAlarm\Dto\ApiResults;
use CleantalkSP\SpbctWP\VulnerabilityAlarm\Exceptions\VulnerabilityAlarmServiceException;

class VulnerabilityAlarm
{
    const VULNERABILITY_LIST = 'spbc_vulnerabilities';

    /**
     * @var array
     */
    public static $plugins = [];

    /**
     * Get vulnerabilities from cloud and write to storage
     * @throws VulnerabilityAlarmServiceException
     */
    public static function checkVulnerabilities()
    {
        VulnerabilityAlarmService::updateVulnerabilitiesLibrary();
    }

    public static function checkPluginVulnerability($plugin_file, $plugin_version)
    {
        /** @var ApiResults|null $list */
        $list = get_option(self::VULNERABILITY_LIST);
        if ( $list === false ) {
            return false;
        }
        static::$plugins = $list->plugins;
        return VulnerabilityAlarmService::checkPlugin($plugin_file, $plugin_version);
    }

    public static function showAlarm($plugin_file, $plugin_data)
    {
        return VulnerabilityAlarmView::showPluginAlarm($plugin_file, $plugin_data);
    }

    /**
     * @param array $plugins
     *
     * @return array
     */
    public static function getSafePlugins($plugins)
    {
        $safe_plugins = [];
        $plugins_to_cloud = [];

        // Prepare data to the cloud call
        foreach ($plugins as $plugin) {
            $slug = isset($plugin['slug']) ? $plugin['slug'] : sanitize_title($plugin['Name']);
            $plugins_to_cloud[] = [$slug];
        }

        // Get cloud report about plugins
        try {
            $report = VulnerabilityAlarmService::getReport(['plugins' => $plugins_to_cloud]);
        } catch (\Exception $_exception) {
            return $safe_plugins;
        }

        if ( count($report->plugins) ) {
            static::$plugins = $report->plugins;
            foreach ( $plugins as $plugin ) {
                $plugin_slug = isset($plugin['slug']) ? $plugin['slug'] : sanitize_title($plugin['Name']);
                $plugin_version = isset($plugin['version']) ? $plugin['version'] : '';
                $plugin_check = VulnerabilityAlarmService::checkPlugin($plugin_slug, $plugin_version, true);
                if ( $plugin_check ) {
                    $safe_plugins[] = $plugin_slug;
                }
            }
        }
        return $safe_plugins;
    }

    public static function showSafeBadge()
    {
        return VulnerabilityAlarmView::showSafeBadge();
    }

    /**
     * Render tab for spbct settings page
     * @psalm-suppress PossiblyUnusedMethod
     * @todo replace the suppressing above
     */
    public static function renderTab()
    {
    }

    /**
     * Send report to cloud about installed vulnerability modules on site
     * @psalm-suppress PossiblyUnusedMethod
     * @todo replace the suppressing above
     */
    public static function sendReport()
    {
    }
}
