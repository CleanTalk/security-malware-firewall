<?php

namespace CleantalkSP\SpbctWP;

use CleantalkSP\SpbctWP\Cron as SpbcCron;
use CleantalkSP\Variables\Get;

class RemoteCalls extends \CleantalkSP\Common\RemoteCalls {
    
    public function __construct( &$state ){

        $this->state = $state;
        $this->class_name = __CLASS__;

    }
    
    /**
     * @return null
     */
    protected static function filter_before_action(){
    
        // Stop execution if plugin is deactivated
        if( get_option( 'spbc_deactivation_in_process' ) !== false ){ // Continue if plugin is active
            delete_option( 'spbc_deactivation_in_process' );
            
            return 'FAIL ' . json_encode( array( 'error' => 'PLUGIN_DEACTIVATION_IN_PROCESS' ) );
        }
    
        // Delay before perform action;
        if( Get::get( 'delay' ) ){
            
            sleep( Get::get( 'delay' ) );
            
            $params = $_GET;
            unset( $params['delay'] );
        
            return Helper::http__request__rc_to_host(
                Get::get( 'spbc_remote_action' ),
                $params,
                array( 'async' ),
                false
            );
        }
        
        return null;
    }
    
    
    
    public static function action__check_website(){
		die('OK');
	}
	
	static function action__close_renew_banner() {
		global $spbc;
		$spbc->data['notice_show'] = 0;
		$spbc->save('data');
		// Updating cron task
		SpbcCron::updateTask('access_key_notices', 'spbc_access_key_notices', 86400);
		die('OK');
	}
	
	static function action__update_plugin() {
		add_action('template_redirect', 'spbc_update', 1);
	}
	
	static function action__update_security_firewall() {
		$result = spbc_security_firewall_update();
		global $spbc;
		$spbc->error_toggle( ! empty( $result['error'] ), 'firewall_update', $result);
		die(empty($result['error']) ? 'OK' : 'FAIL '.json_encode(array('error' => $result['error'])));
	}
	static function action__update_security_firewall__write_base() {
		$result = spbc_security_firewall_update();
		global $spbc;
		$spbc->error_toggle( ! empty( $result['error'] ), 'firewall_update', $result);
		die(empty($result['error']) ? 'OK' : 'FAIL '.json_encode(array('error' => $result['error'])));
	}
	static function action__drop_security_firewall() {
		$result = spbc_security_firewall_drop();
		die(empty($result['error']) ? 'OK' : 'FAIL '.json_encode(array('error' => $result['error'])));
	}
	
	static function action__download__quarantine_file() {
		$result = spbc_scanner_file_download(true, Get::get('file_id'));
		if(empty($result['error'])){
			header('Content-Type: application/octet-stream');
			header('Content-Disposition: attachment; filename='.$result['file_name']);
		}
		die(empty($result['error'])
			? $result['file_content']
			: 'FAIL '.json_encode(array('error' => $result['error'])));
	}
	
	static function action__update_settings() {
		global $spbc;
		$source = $_GET;
		foreach($spbc->default_settings as $setting => $value){
			if(array_key_exists($setting, $source)){
				$var = $source[$setting];
				$type = gettype($spbc->settings[$setting]);
				settype($var, $type);
				if($type == 'string')
					$var = preg_replace(array('/=/', '/`/'), '', $var);
				$spbc->settings[$setting] = $var;
			}
		}
		$spbc->save('settings');
		die('OK');
	}
	
	static function action__backup_signatures_files() {
		$result = spbc_backup__files_with_signatures();
		die(empty($result['error'])
			? 'OK'
			: 'FAIL '.json_encode(array('error' => $result['error'])));
	}
	
	static function action__rollback_repair() {
		$result = spbc_rollback(Get::get('backup_id'));
		die(empty($result['error'])
			? 'OK'
			: 'FAIL '.json_encode(array('error' => $result['error'])));
	}
	
	static function action__scanner_clear_hashes() {
		$result = true;
		switch(Get::get('type')){
			case 'plugins':            delete_option(SPBC_PLUGINS);                             break;
			case 'themes':             delete_option(SPBC_THEMES);                              break;
			case 'plugins_and_themes': delete_option(SPBC_THEMES); delete_option(SPBC_PLUGINS); break;
			case 'all':                $result = spbc_scanner_clear();                          break;
			default:                   $result = spbc_scanner_clear();                          break;
		}
		die(empty($result['error'])
			? 'OK'
			: 'FAIL '.json_encode(array('error' => 'COULDNT_CLEAR_ALL_DB_ERROR')));
	}
	
	static function action__scanner_signatures_update() {
		$result = spbc_scanner__signatures_update();
		die(empty($result['error'])
			? 'OK' . ' ' . (!empty($result['success']) ? $result['success'] : '')
			: 'FAIL '.json_encode(array('error' => $result['error'])));
	}
	
	static function action__scanner__controller() {
		return spbc_scanner__controller();
	}
	
	static function action__scanner__get_remote_hashes() {
		spbc_scanner_get_remote_hashes();
	}
	
	static function action__scanner__count_hashes_plug() {
		spbc_scanner_count_hashes_plug();
	}
	
	static function action__scanner__get_remote_hashes__plug() {
		spbc_scanner_get_remote_hashes__plug();
	}
	
	static function action__scanner__get_remote_hashes__approved() {
		spbc_scanner_get_remote_hashes__approved();
	}
	
	static function action__scanner__clear_table() {
		spbc_scanner_clear_table();
	}
	
	static function action__scanner__count_files() {
		spbc_scanner_count_files();
	}
	
	static function action__scanner__scan() {
		spbc_scanner_scan();
	}
	
	static function action__scanner__count_files__by_status() {
		spbc_scanner_count_files__by_status();
	}
	
	static function action__scanner__scan_heuristic() {
		spbc_scanner_scan_signatures();
	}
	
	static function action__scanner__scan_signatures() {
		spbc_scanner_scan_signatures();
	}
	
	static function action__scanner__backup_sigantures() {
		spbc_backup__files_with_signatures();
	}
	
	static function action__scanner__count_cure() {
		spbc_scanner_count_cure();
	}
	
	static function action__scanner__cure() {
		spbc_scanner_cure();
	}
	
	static function action__scanner__links_count() {
		spbc_scanner_links_count();
	}
	
	static function action__scanner__links_scan() {
		spbc_scanner_links_scan();
	}
	
	static function action__scanner__frontend_scan() {
		spbc_scanner_frontend__scan();
	}
	
	static function action_scanner__send_results() {
		spbc_scanner_send_results();
	}
}
