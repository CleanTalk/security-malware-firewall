<?php

namespace CleantalkSP\SpbctWP\Scanner\Frontend;

use CleantalkSP\SpbctWP\Scanner\Frontend\Models\PublicPageModel;
use CleantalkSP\SpbctWP\Scanner\Frontend\Tools\FindDriveByDownloadTool;
use CleantalkSP\SpbctWP\Scanner\Frontend\Tools\FindRedirectsTool;
use CleantalkSP\SpbctWP\Scanner\Frontend\Tools\FindSignaturesJsTool;

class FrontendScannerDispatcher
{
    const STAGES = array(
        FindRedirectsTool::class,
        FindDriveByDownloadTool::class,
        FindSignaturesJsTool::class
    );
    private $exclusionDomains;
    private $homeUrl;
    private $results = array();
    private $signatures;

    public function __construct($exclusionDomains, $signatures)
    {
        $exclusionDomains = str_replace(array("\r\n", "\n\r", "\r", "\n"), "\n", $exclusionDomains);
        $exclusionDomains = explode("\n", $exclusionDomains);

        $this->homeUrl = parse_url(get_option('home'), PHP_URL_HOST);

        $this->exclusionDomains = $exclusionDomains
            ?  $this->homeUrl . '|' . implode('|', $exclusionDomains)
            :  $this->homeUrl;

        $this->signatures = $signatures;
    }

    public function analyzePage(PublicPageModel $page)
    {
        // Проводит по всем этапам
        foreach (self::STAGES as $stage) {
            $stageHandler = new $stage($this);
            $stageHandler->setPage($page);
            $this->results[$stage] = $stageHandler->analyse();
        }

        // Выдает результат
        dd($this->results);
    }

    public function getSignaturesJs()
    {
        return array_filter(
            $this->signatures,
            function ($item) {
                return $item['type'] === 'CODE_JS';
            }
        );
    }

    public function getSignaturesHtml()
    {
        return array_filter(
            $this->signatures,
            function ($item) {
                return $item['type'] === 'CODE_HTML';
            }
        );
    }

    public function getExclusions() {
        return $this->exclusionDomains;
    }
}
