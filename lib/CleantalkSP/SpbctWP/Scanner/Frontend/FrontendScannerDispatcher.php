<?php

namespace CleantalkSP\SpbctWP\Scanner\Frontend;

use CleantalkSP\SpbctWP\Scanner\Frontend\Models\PublicPageModel;
use CleantalkSP\SpbctWP\Scanner\Frontend\Tools\FindCsrfTool;
use CleantalkSP\SpbctWP\Scanner\Frontend\Tools\FindDriveByDownloadTool;
use CleantalkSP\SpbctWP\Scanner\Frontend\Tools\FindRedirectsTool;
use CleantalkSP\SpbctWP\Scanner\Frontend\Tools\FindSignaturesHtmlTool;
use CleantalkSP\SpbctWP\Scanner\Frontend\Tools\FindSignaturesJsTool;

class FrontendScannerDispatcher
{
    private $exclusionDomains;
    private $homeUrl;
    private $results = array();
    private $signatures;
    private $toolsCollection = array();

    public function __construct($exclusionDomains, $signatures, $csrf = false)
    {
        $exclusionDomains = str_replace(array("\r\n", "\n\r", "\r", "\n"), "\n", $exclusionDomains);
        $exclusionDomains = explode("\n", $exclusionDomains);

        $this->homeUrl = parse_url(get_option('home'), PHP_URL_HOST);

        $this->exclusionDomains = $exclusionDomains
            ?  $this->homeUrl . '|' . implode('|', $exclusionDomains)
            :  $this->homeUrl;

        $this->signatures = $signatures;

        // Set tools
        $this->toolsCollection = array(
            FindRedirectsTool::class,
            FindDriveByDownloadTool::class,
            FindSignaturesJsTool::class,
            FindSignaturesHtmlTool::class
        );
        if ($csrf) {
            $this->toolsCollection[] = FindCsrfTool::class;
        }
    }

    public function analyzePage(PublicPageModel $page)
    {
        // Проводит по всем этапам
        foreach ($this->toolsCollection as $stage) {
            $stageHandler = new $stage($this);
            $stageHandler->setPage($page);
            $stageHandler->analyse();
        }

        $this->results = array_filter($this->results, function ($item) {
            return !empty($item);
        });

        return $this->results;
    }

    public function getSignaturesJs()
    {
        return array_filter(
            $this->signatures,
            function ($item) {
                return $item['type'] === 'CODE_JS';
            }
        );
    }

    public function getSignaturesHtml()
    {
        return array_filter(
            $this->signatures,
            function ($item) {
                return $item['type'] === 'CODE_HTML';
            }
        );
    }

    public function getExclusions()
    {
        return $this->exclusionDomains;
    }

    public function getHomeUrl()
    {
        return $this->homeUrl;
    }

    public function addResult($result)
    {
        $this->results[] = $result;
    }
}
