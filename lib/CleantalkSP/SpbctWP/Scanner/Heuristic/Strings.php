<?php


namespace CleantalkSP\SpbctWP\Scanner\Heuristic;


class Strings
{
    
    public $tokens_handler;
    
    public function __construct( Tokens $tokens_handler )
    {
        $this->tokens_handler = $tokens_handler;
    }
    
    /**
     * Deletes T_ENCAPSED_AND_WHITESPACE
     * Coverts T_ENCAPSED_AND_WHITESPACE to T_CONSTANT_ENCAPSED_STRING if could
     *
     * @param array[] $tokens
     * @param int     $key
     *
     * @return true Always returns true because it doesn't unset current element
     */
    public function convertToSimple(&$tokens, $key)
    {
        if( $tokens[$key][0] === 'T_ENCAPSED_AND_WHITESPACE' ){
            $next = isset($tokens[$key + 1]) ? $tokens[$key + 1] : array(null, null, null);
            $prev = isset($tokens[$key - 1]) ? $tokens[$key - 1] : array(null, null, null);
            
            if( $prev[1] === '"' && $next[1] === '"' ){
                unset($tokens[$key - 1], $tokens[$key + 1]);
                
                $tokens[$key] = array(
                    'T_CONSTANT_ENCAPSED_STRING',
                    '\'' . $tokens[$key][1] . '\'',
                    $tokens[$key][2],
                );
            }
        }
        
        return true;
    }
    
    /**
     * Convert chr('\xNN') to 'a'
     *
     * @param array[] $tokens
     * @param int     $key
     *
     * @return true returns true if changes were made in original $tokens array or false if isn't
     */
    public function convertChrFunctionToString(&$tokens, $key)
    {
        if( $tokens[$key][1] === ')' ){
            
            $prev  = isset($tokens[$key - 1]) ? $tokens[$key - 1] : array(null, null, null);
            $prev2 = isset($tokens[$key - 2]) ? $tokens[$key - 2] : array(null, null, null);
            $prev3 = isset($tokens[$key - 3]) ? $tokens[$key - 3] : array(null, null, null);
            
            if(
                $prev2[1] === '(' &&
                $prev3[0] === 'T_STRING' && $prev3[1] === 'chr' &&
                in_array($prev[0], array('T_LNUMBER', 'T_CONSTANT_ENCAPSED_STRING'))
            ){
                unset(
                    $tokens[$key - 1],
                    $tokens[$key - 2],
                    $tokens[$key - 3]
                );
                $char_num     = (int)trim($prev[1], '\'"');
                $tokens[$key] = array(
                    'T_CONSTANT_ENCAPSED_STRING',
                    '\'' . (chr($char_num) ?: '') . '\'',
                    $prev3[2],
                );
            }
        }
        
        return true;
    }
    
    /**
     * Convert chars present like "\xNN" to their symbols
     *
     * @param array[] $tokens
     * @param int     $key
     *
     * @return true returns true if changes were made in original $tokens array or false if isn't
     */
    public function convertHexSymbolsToString(&$tokens, $key)
    {
        // Convert "\xNN" to 'a'
        if(
            $tokens[$key][0] === 'T_CONSTANT_ENCAPSED_STRING' &&
            (isset($tokens[$key][1][0]) && $tokens[$key][1][0] === '"') &&
            preg_match('@\\\\[A-Z\d]{3}@', $tokens[$key][1])
        ){
            preg_match_all('@(\\\\[a-zA-Z\d]{3})@', $tokens[$key][1], $matches);
            $matches         = $matches[0];
            $replacements    = array_map(
                static function ($elem){
                    return eval("return \"$elem\";");
                },
                $matches
            );
            $tokens[$key][1] = str_replace($matches, $replacements, $tokens[$key][1]);
        }
        
        return true;
    }
    
    /**
     * Concatenates simple strings
     *
     * @param array[] $tokens
     * @param int     $key
     *
     * @return bool
     */
    public function concatenateSimpleStrings(&$tokens, $key){
    
        if($tokens[$key][0] === 'T_ENCAPSED_AND_WHITESPACE'){
            $next = isset($tokens[$key+1]) ? $tokens[$key+1] : array(null, null, null);
            if($next[0] === 'T_ENCAPSED_AND_WHITESPACE'){
                $tokens[$key+1] = array(
                    'T_ENCAPSED_AND_WHITESPACE',
                    $tokens[$key][1].$next[1],
                    $tokens[$key][2],
                );
                unset($tokens[$key]);
                
                return false;
            }
        }
        
        return true;
    }
    
    /**
     * Concatenates 'a'.'b' and "a"."b" to 'ab'
     *
     * @param array[] $tokens
     * @param int     $key
     *
     * @return bool
     */
    public function concatenateComplexStrings(&$tokens, $key){
        if( $tokens[$key][1] === '.' ){
        
            $next = isset($tokens[$key+1]) ? $tokens[$key+1] : array(null, null, null);
            $prev = isset($tokens[$key-1]) ? $tokens[$key-1] : array(null, null, null);
        
            if(
                ($prev[0] === 'T_LNUMBER' || $prev[0] === 'T_CONSTANT_ENCAPSED_STRING' ) &&
                ($next[0] === 'T_LNUMBER' || $next[0] === 'T_CONSTANT_ENCAPSED_STRING' )
            ){
                unset( $tokens[ $key - 1 ], $tokens[ $key + 1 ] );
                $prev[1] = $prev[1][0] === '"' ?  '\''.preg_replace("/'/", '\'', substr($prev[1], 1, -1))      : substr($prev[1], 0, -1);
                $next[1] = $next[1][0] === '"' ?       preg_replace("/'/", '\'', substr($next[1], 1, -1)).'\'' : substr($next[1], 1);
                $tokens[$key] = array(
                    'T_CONSTANT_ENCAPSED_STRING',
                    $prev[1].$next[1],
                    $prev[2],
                );
            }
        }
        
        return true;
    }
}