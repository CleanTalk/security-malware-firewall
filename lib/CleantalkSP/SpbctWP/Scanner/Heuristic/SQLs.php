<?php


namespace CleantalkSP\SpbctWP\Scanner\Heuristic;


class SQLs
{
    /**
     * @var Tokens
     */
    private $tokens_handler;
    /**
     * @var Variables
     */
    private $variables_handler;
    /**
     * @var array
     */
    public $requests = array();
    
    private $key_words = array(
        'SELECT',
        'INSERT',
        'UPDATE',
        'LIMIT',
        'DESC',
        'ASC',
        'UNION',
        'JOIN',
    );
    /**
     * @var string
     */
    private $key_words_regex;
    
    public function __construct( Tokens $tokens_handler, Variables $variables )
    {
        $this->tokens_handler = $tokens_handler;
        $this->variables_handler = $variables;
        
        $this->key_words_regex = '/';
        foreach($this->key_words as $key_word){
            $this->key_words_regex .= '|' . $key_word;
        }
        $this->key_words_regex = substr($this->key_words_regex, 0, -1) . '/';
    }
    
    /**
     * Search for SQL requests made by following libraries:
     * PDO
     * MySQLi
     * WPDB
     * MySQL
     */
    public function getAll()
    {
        for(
            $key = 0, $current = null, $arr_size = count($this->tokens_handler->tokens);
            $key < $arr_size;
            $key++
        ){
            $current   = isset($this->tokens_handler->tokens[$key]) ? $this->tokens_handler->tokens[$key] : null;
            $next1     = isset($this->tokens_handler->tokens[$key + 1]) ? $this->tokens_handler->tokens[$key + 1] : null;
            $next2     = isset($this->tokens_handler->tokens[$key + 2]) ? $this->tokens_handler->tokens[$key + 2] : null;
            $next3     = isset($this->tokens_handler->tokens[$key + 3]) ? $this->tokens_handler->tokens[$key + 3] : null;
            $sql_start = null;
            $sql_end   = null;
            
            // WPDB
            if(
                $current && $current[0] === 'T_VARIABLE' &&
                $next1 && $next1[0] === 'T_OBJECT_OPERATOR' &&
                $next2 && $next2[0] === 'T_STRING' && in_array($next2[1], array('query', 'get_results')) &&
                $next3 && $next3[0] === '('
            ){
                $sql_start = $key + 4;
                $sql_end   = $this->tokens_handler->searchForward($key, ';') - 1;
                
            // Mysqli
            }elseif(
                $current && $current[0] === 'T_STRING' &&
                $next2 && $next2[0] === 'T_STRING' &&
                in_array($current[1], array('MYSQLI', 'mysqli')) &&
                in_array($this->tokens_handler->tokens[$key + 2][1], array('query', 'send_query', 'multi_query'))
            ){
                $sql_start = $key + 4;
                $sql_end   = $this->tokens_handler->searchForward($key, ';') - 1;
                
            // PDO
            }elseif(
                $current && $current[0] === 'T_STRING' && in_array($current[1], array('PDO', 'pdo')) &&
                $next2 && $next2[0] === 'T_STRING' && in_array($next2[1], array('query', 'exec'))
            ){
                $sql_start = $key + 4;
                $sql_end   = $this->tokens_handler->searchForward($key, ';') - 1;
                
            // Mysql
            }elseif(
                $current && $current[0] === 'T_STRING' &&
                in_array($current[1], array('mysql_query', 'mysqli_query', 'mysqli_send_query', 'mysqli_multi_query'))
            ){
                $sql_start = $key + 2;
                $sql_end   = $this->tokens_handler->searchForward($key, ';') - 1;
            }
            
            
            if( $sql_start && $sql_end ){
                $sql = $this->tokens_handler->getRange($sql_start, $sql_end);
                $this->sql_requests_processAndSave($sql, $key);
            }
        }
    }
    
    /**
     * Detects SQL by SQL key words
     *
     * @param int $key Current iteration array key
     */
    public function getViaKeyWords($key){
        if(
            $this->tokens->isCurrentTypeOf('T_CONSTANT_ENCAPSED_STRING') &&
            preg_match($this->key_words_regex, $this->tokens->current[1])
        ){
            
            $sql = $this->tokens->getRange(
                $this->tokens->searchBackward($key, array('=','(')),
                $this->tokens->searchForward($key, array(')', ';'))
            );
            
            if( $sql ){
                $this->sql_requests_processAndSave($sql, $key);
            }
        }
    }
    
    /**
     * Formatting, checking and saving SQL request to $this->sql_requests
     *
     * @param $sql
     * @param $key
     */
    public function sql_requests_processAndSave($sql, $key)
    {
        // Checking for bad variables in SQL request
        $good = ! $this->variables_handler->isSetOfTokensHasBadVariables($sql);
        
        $this->requests[] = array(
            'sql'          => $sql,
            'status'       => $good,
            'good'         => $good,
            'string'       => $this->tokens_handler->tokens[$key][2],
            'first_string' => reset($sql)[2],
            'last_string'  => end($sql)[2],
        );
    }
}