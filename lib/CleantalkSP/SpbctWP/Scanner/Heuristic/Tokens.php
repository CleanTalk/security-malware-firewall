<?php


namespace CleantalkSP\SpbctWP\Scanner\Heuristic;


class Tokens
{
    /**
     * @var array of arrays with tokens with PHP code
     * [
     *    0 => (string) TOKEN_TYPE,
     *    1 => (mixed)  TOKEN_VALUE
     *    2 => (int)    DOCUMENT_STRING_NUMBER
     * ]
     */
    public $tokens;
    
    /**
     * @var array of arrays without code
     * Contain tokens with comments, HTML and so on
     * [
     *    0 => (string) TOKEN_TYPE,
     *    1 => (mixed)  TOKEN_VALUE
     *    2 => (int)    DOCUMENT_STRING_NUMBER
     * ]
     */
    public $non_code;
    
    /**
     * @var string[] Current token
     */
    private $current;
    
    public $equation__token_group = array(
        '=',
        'T_CONCAT_EQUAL',
        'T_MINUS_EQUAL',
        'T_MOD_EQUAL',
        'T_MUL_EQUAL',
        'T_AND_EQUAL',
        'T_OR_EQUAL',
        'T_PLUS_EQUAL',
        'T_POW_EQUAL',
        'T_SL_EQUAL',
        'T_SR_EQUAL',
        'T_XOR_EQUAL',
    );
    
    /**
     * @var string[] non PHP tokens
     */
    private $non_code__token_group = array(
        'T_INLINE_HTML',
        'T_COMMENT',
        'T_DOC_COMMENT',
        // 'T_WHITESPACE',
    );
    
    /**
     * @var string[] trimming whitespaces around this tokens
     */
    private $strip_whitespace_around__token_group  = array(
        
        '__SERV', // Tokens without type
        
        'T_WHITESPACE', // /\s*/
        'T_CLOSE_TAG',
        'T_CONSTANT_ENCAPSED_STRING', // String in quotes
        
        // Equals
        'T_DIV_EQUAL',
        'T_BOOLEAN_OR',
        'T_BOOLEAN_AND',
        'T_IS_EQUAL',
        'T_IS_GREATER_OR_EQUAL',
        'T_IS_IDENTICAL',
        'T_IS_NOT_EQUAL',
        'T_IS_SMALLER_OR_EQUAL',
        'T_SPACESHIP',
        
        // Assignments
        'T_CONCAT_EQUAL',
        'T_MINUS_EQUAL',
        'T_MOD_EQUAL',
        'T_MUL_EQUAL',
        'T_AND_EQUAL',
        'T_OR_EQUAL',
        'T_PLUS_EQUAL',
        'T_POW_EQUAL',
        'T_SL_EQUAL',
        'T_SR_EQUAL',
        'T_XOR_EQUAL',
        
        // Bit
        'T_SL', // <<
        'T_SR', // >>
        
        // Uno
        'T_INC', // ++
        'T_DEC', // --
        'T_POW', // **
        
        // Cast type
        'T_ARRAY_CAST',
        'T_BOOL_CAST',
        'T_DOUBLE_CAST',
        'T_OBJECT_CAST',
        'T_STRING_CAST',
        
        // Different
        'T_START_HEREDOC', // <<<
        'T_NS_SEPARATOR', // \
        'T_ELLIPSIS', // ...
        'T_OBJECT_OPERATOR', // ->
        'T_DOUBLE_ARROW', // =>
        'T_DOUBLE_COLON', // ::
        'T_PAAMAYIM_NEKUDOTAYIM', // ::
    );
    
    private $dont_trim_whitespace_around__token_group = array(
        'T_ENCAPSED_AND_WHITESPACE',
        'T_OPEN_TAG',
    );
    
    /**
     * @return mixed
     */
    public function getTokensFromText( $text )
    {
        $this->tokens = @token_get_all( $text );
        $this->convertTokensToStandard();
    }
    
    /**
     * Work with $this->tokens
     * 
     * Standardizing all tokens to $this->tokens[N][
     *    0 => (string) TOKEN_TYPE,
     *    1 => (mixed)  TOKEN_VALUE
     *    2 => (int)    DOCUMENT_STRING_NUMBER
     * ]
     *
     * @return void
     */
    private function convertTokensToStandard(){
    
        $prev_token[2] = 1;
        foreach($this->tokens as $key => &$token){
            
            // Convert if
            $token = is_array($token)
                ? array(token_name($token[0]), $token[1], $token[2])
                : array('__SERV',              $token,    $prev_token[2]);
            
            $prev_token = $token;
        }
    }
    
    /**
     * Gather tokens back in string
     * Using all tokens if non passed
     *
     * @param array $input Array of lexems
     *
     * @return string
     */
    public function glueTokens($input = array())
    {
        return implode('', array_column($input ?: $this->tokens, 0));
    }
    
    public function isTokenInGroup( $token, $group ){
        $group .= '__token_group';
        $type_to_check = isset( $token[0]) ? $token[0] : $token;
        return in_array($type_to_check, $this->$group, true );
    }
    
    public function isCurrentTokenInGroup( $group ){
        $group .= '__token_group';
        return in_array($this->current[0], $this->$group, true );
    }
    
    /**
     * @param mixed $current
     */
    public function setCurrent($current)
    {
        $this->current = $current;
    }
    
    /**
     * Returns position of the searched token
     * Search for needle === if needle is set
     *
     * @param              $start
     * @param string|array $needle
     * @param int          $depth of search. How far we should look for the token
     *
     * @return bool|int
     */
    public function searchForward($start, $needle, $depth = 500)
    {
        for( $i = 0, $key = $start + 1; $i < $depth; $i ++, $key ++ ){
            if( isset( $this->tokens[ $key ] ) && $this->tokens[ $key ][1] === $needle ){
                return $key;
            }
        }
        
        return false;
    }
    
    /**
     * Getting prev setted lexem, Search for needle === if needle is set
     *
     * @param int  $start
     * @param null $needle
     *
     * @return bool|int
     */
    public function searchBackward($start, $needle = null)
    {
        for( $i = 0, $key = $start - 1; $i < 100 && $key > 0; $i--, $key-- ){
            if( isset($this->tokens[$key]) && $this->tokens[$key][1] === $needle ){
                return $key;
            }
        }
        
        return false;
    }
    
    /**
     * Getting prev set lexem, Search for needle === if needle is set
     *
     * @param int $start
     * @param int $end
     *
     * @return array|false
     */
    public function getRange($start, $end)
    {
        if( $end !== false ){
            return array_slice($this->tokens, $start, $end - $start + 1);
        }
        
        return false;
    }
    
    /**
     * @todo make it capable to compare variants of sequences. '(' to '(' or  '[',
     *
     * @param int   $position
     * @param array $sequence Array of lexemes
     *
     * @return bool
     */
    public function checkSequenceFromPosition( $position, $sequence ){
        
        foreach( $sequence as $offset => $token ){
            
            $position_to_check = $position + $offset;
            
            if( ! isset( $this->tokens[ $position_to_check ] ) ){
                return false;
            }
            
            // Both is arrays
            if( is_array( $token ) && is_array( $this->tokens[ $position_to_check ] ) ){
                
                // Compare first element
                if( $token[0] !== $this->tokens[ $position_to_check ][0] ){
                    return false;
                    
                    // Compare second if provided
                }elseif( isset( $token[1] ) && $token[1] !== $this->tokens[ $position_to_check ][1] ){
                    return false;
                }
                
                // At least one is not an array. Straight check
            }elseif( $token !== $this->tokens[ $position_to_check ] ){
                
                return false;
            }
        }
        
        return true;
    }
}