<?php


namespace CleantalkSP\SpbctWP\Scanner\Heuristic;


use CleantalkSP\DataStructures\ExtendedSplFixedArray;

/**
 * @property Token|null $prev4 Iteration Token
 * @property Token|null $prev3 Iteration Token
 * @property Token|null $prev2 Iteration Token
 * @property Token|null $prev1 Iteration Token
 * @property Token|null $current Iteration Token
 * @property Token|null $next1 Iteration Token
 * @property Token|null $next2 Iteration Token
 * @property Token|null $next3 Iteration Token
 * @property Token|null $next4 Iteration Token
 */
class Tokens implements \Iterator, \ArrayAccess, \Countable
{
    /**
     * @var int Shows the current position in the set of tokens
     */
    private $position = 0;
    
    /**
     * @var int Shows the maximum available position in the set of tokens
     */
    public $max_position;
    
    /**
     * @var int
     */
    private $max_index;
    
    /**
     * @var array of arrays without code
     * Contain tokens with comments, HTML and so on
     * [
     *    0 => (string) TOKEN_TYPE,
     *    1 => (mixed)  TOKEN_VALUE
     *    2 => (int)    DOCUMENT_STRING_NUMBER
     * ]
     */
    public $comments = array();
    
    /**
     * @var array of arrays with HTML
     * [
     *    0 => (string) TOKEN_TYPE,
     *    1 => (mixed)  TOKEN_VALUE
     *    2 => (int)    DOCUMENT_STRING_NUMBER
     * ]
     */
    public $html     = array();
    
    /**
     * @var TokenGroups Contain known grouped token types
     */
    private $groups;
    
    public function __construct( $content )
    {
        $this->groups = new TokenGroups();
        $this->getTokensFromText($content);
    }
    
    /**
     * Parse code and transform it to array of arrays with token like
     * <br>
     * [
     *    0 => (string) TOKEN_TYPE,
     *    1 => (mixed)  TOKEN_VALUE
     *    2 => (int)    DOCUMENT_STRING_NUMBER
     * ]
     * <br>
     * Convert all tokens to the above-mentioned format
     * <br><br>
     * Single tokens like '.' or ';' receive TOKEN_TYPE like '__SERV'<br>
     * Single tokens like '.' or ';' receive DOCUMENT_STRING_NUMBER from the previous token
     *
     * @param $text
     *
     * @return void
     */
    public function getTokensFromText( $text )
    {
        $this->tokens = ExtendedSplFixedArray::createFromArray( @token_get_all( $text ) );
        $this->convertTokensToStandard();
    }
    
    /**
     * Get the token with passed position (key)
     *
     * @param int|string|null $position
     *
     * @return Token|null
     */
    public function getTokenFromPosition( $position = null, $get_only_actual = false )
    {
        // If no position was requested, return current token
        if( ! isset($position) || $position === 'current' ){
            return $this->current;
        }
        
        $out = false;
        
        // Search forward for first actual token
        for( ; $out === false && $position <= $this->max_position; $position++ ){
            $out = isset($this->tokens[ $position ])
                ? $this->tokens[ $position ]
                : null;
        }
        
        return $out;
    }
    
    /**
     * For debug purposes
     *
     * @return Token[]
     */
    public function getIterationTokens()
    {
        return [
            'prev4'   => $this->prev4,
            'prev3'   => $this->prev3,
            'prev2'   => $this->prev2,
            'prev1'   => $this->prev1,
            'current' => $this->current,
            'next1'   => $this->next1,
            'next2'   => $this->next2,
            'next3'   => $this->next3,
            'next4'   => $this->next4,
        ];
    }
    
    /**
     * Work with $this->tokens
     * 
     * Standardizing all tokens to $this->tokens[N][
     *    0 => (string) TOKEN_TYPE,
     *    1 => (mixed)  TOKEN_VALUE
     *    2 => (int)    DOCUMENT_STRING_NUMBER
     * ]
     *
     * @return void
     */
    private function convertTokensToStandard()
    {
        // We are using for instead of foreach because we might stumble on SplFixedArray.
        // SplFixedArray doesn't support passing element by reference in 'for' cycles.
        for(
            
            // Initialization
            $key             = 0,
            $prev_token_line = 1,
            $length          = count($this->tokens);
            
            // Before each iteration
            $key < $length;
            
            // After each iteration
            $prev_token_line = $this->tokens[$key]->line, // Set previous token to compile next service(__SERV) tokens
            $key++
        ){
            
            $curr_token = $this->tokens[$key]; // Set current iteration token
            
            $this->tokens[ $key ] = is_scalar($curr_token)
                ? new Token('__SERV',              $curr_token,    $prev_token_line, $key) // For simple tokens like ';', ','...
                : new Token(token_name($curr_token[0]), $curr_token[1], $curr_token[2], $key);  // For normal token with type
        }
    }
    
    /**
     * set tokens from next{$depth} to prev{$depth}
     *
     * @param int $depth
     */
    public function setIterationTokens($depth = 4)
    {
        $this->current = $this->tokens[$this->current_key];
        for( ; $depth !== 0; $depth-- ){
            $this->{'next'.$depth} = $this->getToken( 'next', $depth );
            $this->{'prev'.$depth} = $this->getToken( 'prev', $depth );
        }
    }
    
    /**
     * Gather tokens back in string
     * Using all tokens
     *
     * @return string
     */
	public function glueAllTokens()
    {
        return implode('', $this->tokens->getColumn( 1 ) );
    }

    
    /**
     * Gather tokens back in string
     * Using all tokens if nothing was passed
     *
     * @param array|ExtendedSplFixedArray $input Array of lexems
     *
     * @return string
     */
	public function glueTokens( $input = array() )
    {
        $input = $input ?: $this->tokens;
        
        return $input instanceof ExtendedSplFixedArray
	        ? implode('', $input->getColumn( 1 ) )
	        : implode('', array_column( $input, 1 ) );
    }
    
    /**
     * Returns position of the searched token
     * Search for needle === if needle is set
     *
     * @param              $start
     * @param string|array $needle
     * @param int          $depth of search. How far we should look for the token
     *
     * @return bool|int
     */
    public function searchForward($start, $needle, $depth = 250)
    {
        // Needle is an array with strings
        if( is_array($needle) || $needle instanceof ExtendedSplFixedArray){
            for( $i = 0, $key = $start + 1; $i < $depth; $i++, $key++ ){
                if( isset($this->tokens[$key]) && in_array($this->tokens[$key][1], $needle, true) ){
                    return $key;
                }
            }
    
        // Needle is a string
        }else{
            for( $i = 0, $key = $start + 1; $i < $depth; $i++, $key++ ){
                if( isset($this->tokens[$key]) && $this->tokens[$key][1] === $needle ){
                    return $key;
                }
            }
        }
        
        return false;
    }
    
    /**
     * Getting prev set lexem, Search for needle === if needle is set
     *
     * @param int          $start
     * @param string|array $needle
     * @param int          $depth of search. How far we should look for the token
     *
     * @return bool|int
     */
    public function searchBackward($start, $needle, $depth = 250)
    {
        // Needle is an array with strings
        if( is_array($needle) ){
            for( $i = 0, $key = $start - 1; $i < $depth && $key > 0; $i--, $key-- ){
                if( isset($this->tokens[$key]) && in_array($this->tokens[$key][1], $needle, true) ){
                    return $key;
                }
            }
            
        // Needle is a string
        }else{
            for( $i = 0, $key = $start - 1; $i < $depth && $key > 0; $i--, $key-- ){
                if( isset($this->tokens[$key]) && $this->tokens[$key][1] === $needle ){
                    return $key;
                }
            }
        }
        
        return false;
    }
    
    /**
     * Get next or previous token from $this->tokens
     * Try to get a token ignoring empty tokens until
     *      max key is reached ('next' direction)
     *      or
     *      zero key is reached ('prev' direction)
     *
     * @param string   $direction 'next' or 'prev' string
     * @param int      $offset    offset from the current token token
     * @param int|null $key
     *
     * @return array|null
     */
    public function getToken($direction, $offset, $key = null)
    {
        $offset      = (int)$offset;
        $out         = null;
        $current_key = $key ?: $this->current_key;
        
        switch($direction){
            case 'next':
                for( $current_key++, $current_offset = 0; $out === null && $current_key <= $this->max_index; $current_key++ ){
                    $current_offset = isset($this->tokens[$current_key]) ? ++$current_offset           : $current_offset;
                    $out            = $current_offset === $offset        ? $this->tokens[$current_key] : null;
                }
                break;
            case 'prev':
                for( $current_key--, $current_offset = 0; ! $out && $current_key >= 0; $current_key-- ){
                    $current_offset = isset($this->tokens[$current_key]) ? ++$current_offset           : $current_offset;
                    $out            = $current_offset === $offset        ? $this->tokens[$current_key] : null;
                }
                break;
        }
        
        return $out;
    }
    
    /**
     * Getting prev set lexem, Search for needle === if needle is set
     *
     * @param int $start
     * @param int $end
     *
     * @return ExtendedSplFixedArray|false
     */
    public function getRange($start, $end)
    {
        if( $start !==false && $end !== false ){
        	return $this->tokens->slice($start, $end);
        }
        
        return false;
    }
    
    /**
     * Unset token with given names
     *
     * @todo rename to 'unset'
     *
     * @param mixed ...$tokens_positions
     */
    public function unsetTokens(...$tokens_positions)
    {
        foreach( $tokens_positions as $tokens_position ){
            
            if( $tokens_position === 'current' ){
                $key = $this->current_key;
                
            }else{
                $direction = substr($tokens_position, 0, 4);
                $depth     = substr($tokens_position, 4);
                $key       = $direction === 'next'
                    ? $this->current_key + $depth
                    : $this->current_key - $depth;
            }
            unset($this->tokens[$key]);
            
        }
        
        // Resetting token from prev4 to next4
        if( ! in_array('current', $tokens_positions, true) ){
            $this->setIterationTokens();
        }
    }
    
    /**
     * Compare passed sequence of tokens to the set of token we are work on.
     * Since all token are standardized we don't have to check guess if the token from the set is array or not.
     *
     * @param int   $position
     * @param array $sequence Array of lexemes
     *
     * @return bool
     */
    public function checkSequenceFromPosition( $position, $sequence ){
        
        foreach( $sequence as $offset => $token ){
            
            $position_to_check = $position + $offset;
            
            if( ! isset( $this->tokens[ $position_to_check ] ) ){
                return false;
            }
            
            // Both is arrays
            if( is_array( $token ) && is_array( $this->tokens[ $position_to_check ] ) ){
                
                // Compare first element
                if( $token[0] !== $this->tokens[ $position_to_check ][0] ){
                    return false;
                    
                    // Compare second if provided
                }elseif( isset( $token[1] ) && $token[1] !== $this->tokens[ $position_to_check ][1] ){
                    return false;
                }
                
                // At least one is not an array. Straight check
            }elseif( $token !== $this->tokens[ $position_to_check ] ){
                
                return false;
            }
        }
        
        return true;
    }
    
    /**
     * Reindexing current tokens
     * Deletes deletes null values
     * Set new max_positions
     *
     * @return void
     */
    public function reindex(){
        $this->max_position = $this->tokens->reindex();
    }
    
    /**
     * Converts offset from human-text string to
     *
     * @param $offset_to_convert
     *
     * @return int|null
     */
    private function convertOffset( $offset_to_convert ){
        
        if( $offset_to_convert === 'current' ){
            $offset = $this->position;
            
        // By direction and offset from current position
        }elseif( is_string($offset_to_convert) ){
            
            $direction = substr($offset_to_convert, 0, 4);
            $depth     = substr($offset_to_convert, 4) ?: 1;
            $offset    = $this->getToken($direction, $depth)->key;
            
        // Direct access by numeric offset
        }elseif( is_numeric($offset_to_convert) ){
            $offset = $offset_to_convert;
            
        // Default
        }else{
            $offset = null;
        }
        
        return $offset;
    }
    
    /**
     * @return void
     */
    public function rewind()
    {
        $this->repeats++;
        $this->position     = 0;
        $this->max_position = $this->tokens->getSize();
    }
    
    /**
     * @return int
     */
    public function key()
    {
        return $this->position;
    }
    
    /**
     * @return Token
     */
    public function current()
    {
        return $this->tokens[ $this->position ];
    }
    
    /**
     * @return void
     */
    public function next()
    {
        $this->position++;
    }
    
    /**
     * @return bool
     */
    public function valid()
    {
        while(
            empty( $this->tokens[ $this->position ] ) &&
            $this->position <= $this->max_position
        ){
            $this->position++;
        }
        
        if( isset( $this->tokens[ $this->position ] ) ){
             $this->setIterationTokens();
        
            return true;
        }
    
        return false;
    }
    
    /**
     * @param $offset
     *
     * @return bool
     */
    public function offsetExists( $offset )
    {
        return isset( $this->tokens[ $offset ] );
    }
    
    /**
     * @param int|string $offset
     *
     * @return Token
     */
    public function offsetGet( $offset )
    {
        $offset = $this->convertOffset($offset);
        
        return $offset !== null
            ? $this->tokens[ $offset ]
            : new Token( null, null, null, null);
    }
    
    /**
     * @param $offset
     * @param $value
     * @return void
     */
    public function offsetSet( $offset, $value )
    {
        $offset = $this->convertOffset($offset);
        
        if( $offset !== null ){
            $this->tokens[ $offset ] = $value;
        }
    }
    
    /**
     * @param $offset
     * @return void
     */
    public function offsetUnset( $offset )
    {
        unset($this->tokens[ $offset ] );
    }
    
    /**
     * @return int
     */
    public function count()
    {
        return $this->max_position;
    }
    
    /**
     * Process only name like 'current' and (regex) /(next|prev)\d/
     * Set if not set via getToken function
     *
     * @param $name
     *
     * @return array|null
     */
    public function __get($name)
    {
        // Process names like 'next1', 'next5', 'prev4', ...
        if( strpos( $name, 'next') !== false || strpos( $name, 'prev') !== false ){
            $this->$name = $this->getToken(
                substr($name, 0, 4),
                substr($name, 4)
            );
            
            return $this->$name;
        }
    
        // Process name 'current'
        if( $name === 'current' ){
            $this->$name = $this->tokens[$this->current_key];
            
            return $this->$name;
        }
        
        return null;
    }
    
    /**
     * @param $name
     * @param $value
     */
    public function __set($name, $value)
    {
        $this->$name = $value;
    }
    
    /**
     * Process only name like 'current' and (regex) /(next|prev)\d/
     * Set if not set via getToken function
     *
     * @param $name
     *
     * @return bool
     */
    public function __isset($name)
    {
        // Process names like 'next1', 'next5', 'prev4', ...
        if( strpos($name, 'next') !== false || strpos($name, 'prev') !== false ){
            $this->$name = $this->getToken(
                substr($name, 0, 4),
                substr($name, 4)
            );
            
            return isset( $this->$name );
            
        // Process name 'current'
        }elseif( $name === 'current' ){
            $this->$name = $this->tokens[$this->current_key];
    
            return isset( $this->$name );
        }
    
        return false;
    }
}