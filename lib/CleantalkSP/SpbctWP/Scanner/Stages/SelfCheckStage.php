<?php

namespace CleantalkSP\SpbctWP\Scanner\Stages;

class SelfCheckStage
{
    /**
     * @var string
     */
    private $url = '';

    /**
     * @var int
     */
    private $seal = 0;


    /**
     * @var string
     */
    private $dir = SPBC_PLUGIN_DIR;

    /**
     * Set url and seal
     */
    public function __construct()
    {
        $this->url = $this->setUrl();
        $this->seal = $this->calculateSeal();
    }

    /**
     * Run self check and cure
     */
    public function run()
    {
        $check = $this->check();

        if (count($check) > 0) {
            // TODO: Send to Cleantalk
            // TODO: log

            // $this->sendToCleantalk($check);
            // $this->writeLog($check);
            $this->cure($check);
        }

        return true;
    }

    /**
     * Check files
     */
    private function check()
    {
        $files = $this->getFiles('check');

        foreach ($files as $key) {
            if ($key === $this->seal) {
                unset($files[$key]);
            }
        }

        return $files;
    }

    /**
     * Set url
     */
    private function setUrl()
    {
        $url = 'https://plugins.svn.wordpress.org/security-malware-firewall/tags/';
        $version = preg_replace('/[^\d.]/', '', SPBC_VERSION);
        $url .= $version . '/';

        $response = wp_remote_get($url . 'security-malware-firewall.php');
        $code = wp_remote_retrieve_response_code($response);
        if ($code !== 200) {
            $url = 'https://plugins.svn.wordpress.org/security-malware-firewall/trunk/';
        }

        return $url;
    }

    /**
     * Calculate seal
     */
    private function calculateSeal()
    {
        $files = $this->getFiles('calculate');

        $frequency = array_count_values($files);
        arsort($frequency);

        reset($frequency);
        return key($frequency);
    }

    /**
     * Get files
     */
    private function getFiles($type)
    {
        $result = [];

        $iterator = new \RecursiveIteratorIterator(
            new \RecursiveDirectoryIterator($this->dir, \RecursiveDirectoryIterator::SKIP_DOTS),
            \RecursiveIteratorIterator::SELF_FIRST,
            \RecursiveIteratorIterator::CATCH_GET_CHILD
        );

        foreach ($iterator as $fileinfo) {
            if ($fileinfo->getFilename() === '.' || $fileinfo->getFilename() === '..') {
                continue;
            }

            if ($fileinfo->getExtension() !== 'php') {
                continue;
            }

            if ($fileinfo->getFilename() === 'SelfCheck.php') {
                continue;
            }

            if (strpos($fileinfo->getPathname(), $this->dir . 'vendor') !== false) {
                continue;
            }

            if (strpos($fileinfo->getPathname(), $this->dir . 'node_modules') !== false) {
                continue;
            }

            if (strpos($fileinfo->getPathname(), $this->dir . 'backups') !== false) {
                continue;
            }

            if ($type === 'calculate') {
                $result[] = $fileinfo->getMTime();
                continue;
            }

            if ($type === 'check') {
                $result[$fileinfo->getMTime()] = str_replace($this->dir, '', $fileinfo->getPathname());
                continue;
            }
        }

        return $result;
    }

    /**
     * Cure
     */
    private function cure($check)
    {
        foreach ($check as $file) {
            $response = wp_remote_get($this->url . $file);
            $code = wp_remote_retrieve_response_code($response);

            if ($code !== 200) {
                // TODO: alient file, handle it
                continue;
            }

            if (is_wp_error($response)) {
                // TODO: handle error
                continue;
            }

            $body = wp_remote_retrieve_body($response);
            if (empty($body)) {
                // TODO: handle error
                continue;
            }

            $success = file_put_contents($this->dir . $file, $body);
            if (!$success) {
                // TODO: handle error
                continue;
            }

            // TODO: log
        }
    }
}
