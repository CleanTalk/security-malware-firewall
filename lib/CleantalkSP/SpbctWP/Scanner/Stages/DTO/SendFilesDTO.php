<?php

namespace CleantalkSP\SpbctWP\Scanner\Stages\DTO;

use CleantalkSP\SpbctWP\Scanner\Surface;

class SendFilesDTO extends GeneralDTO
{
    private $critical;
    private $suspicious;
    private $unknown;

    public function __construct()
    {
        parent::__construct();
    }

    public function setCritical($critical)
    {
        $this->critical = $critical;
    }

    public function setSuspicious($suspicious)
    {
        $this->suspicious = $suspicious;
    }

    public function setUnknown($unknown)
    {
        $this->unknown = $unknown;
    }

    public function getCritical()
    {
        return $this->critical;
    }

    public function getSuspicious()
    {
        return $this->suspicious;
    }

    public function getUnknown()
    {
        return $this->unknown;
    }

    /**
     * Get scanner result
     *
     * @return string
     */
    public function getScannerResult()
    {
        return !empty($this->getCritical()) || !empty($this->getSuspicious()) ? 'warning' : 'passed';
    }

    /**
     * Get total core files
     *
     * @return int
     */
    public function getTotalCoreFiles()
    {
        $total = (int)$this->wpdb->get_var(
            'SELECT COUNT(*) FROM ' . SPBC_TBL_SCAN_FILES . ' WHERE source_type = "CORE" AND source = "wordpress"'
        );

        return $total ?: 0;
    }

    /**
     * Get total site files
     *
     * @return int
     */
    public function getTotalSiteFiles()
    {
        return $this->spbc->data['scanner']['files_total'] = $this->countFileSystem()['total'];
    }

    /**
     * Get checksum count CT
     *
     * @return int|null
     */
    public function getChecksumCountCT()
    {
        return isset($this->spbc->data['scanner']['checksums_count_ct']) ? $this->spbc->data['scanner']['checksums_count_ct'] : null;
    }

    /**
     * Get checksum count user
     *
     * @return int
     */
    public function getChecksumCountUser()
    {
        return (int)$this->wpdb->get_var(
            'SELECT COUNT(*) from ' . SPBC_TBL_SCAN_FILES . ' WHERE status = "APPROVED_BY_USER"'
        );
    }

    /**
     * Get signatures count
     *
     * @return int|null
     */
    public function getSignaturesCount()
    {
        $found = $this->getSignaturesFound();
        $signatures = isset($this->spbc->data['scanner']['signature_count']) ? $this->spbc->data['scanner']['signature_count'] : null;
        if ( is_null($signatures) && is_string($found) ) {
            return count(json_decode($found, true));
        }

        return $signatures;
    }

    /**
     * Get signatures found
     *
     * @return string
     */
    public function getSignaturesFound()
    {
        $signatures = isset($this->spbc->data['scanner']['signatures_found']) ? $this->spbc->data['scanner']['signatures_found'] : [];

        return json_encode($signatures);
    }

    /**
     * @param string $path_to_scan
     *
     * @return array
     * @global State $spbc
     *
     */
    private function countFileSystem($path_to_scan = ABSPATH)
    {
        ini_set('max_execution_time', '120');

        $path_to_scan = realpath($path_to_scan);
        $init_params  = array(
            'count'           => true,
            'file_exceptions' => 'wp-config.php',
            'extensions'      => 'php, html, htm, js, php2, php3, php4, php5, php6, php7, phtml, shtml, phar, odf, [ot.]',
            'files_mandatory' => array(),
            'dir_exceptions'  => array(SPBC_PLUGIN_DIR . 'quarantine')
        );

        if ( ! empty($this->spbc->settings['scanner__dir_exclusions']) ) {
            $init_params['dir_exceptions'] = array_merge(
                $init_params['dir_exceptions'],
                spbc__get_exists_directories(explode("\n", $this->spbc->settings['scanner__dir_exclusions']))
            );
        }

        $scanner = new Surface($path_to_scan, realpath(ABSPATH), $init_params);

        return array(
            'total' => $scanner->files_count,
            'end'   => 1,
        );
    }
}
