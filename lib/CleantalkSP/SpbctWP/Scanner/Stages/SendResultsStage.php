<?php

namespace CleantalkSP\SpbctWP\Scanner\Stages;

use CleantalkSP\SpbctWP\API;
use CleantalkSP\SpbctWP\Cron;
use CleantalkSP\SpbctWP\RemoteCalls;
use CleantalkSP\SpbctWP\Scanner\Frontend;
use CleantalkSP\SpbctWP\Scanner\ScanningLog\ScanningLogFacade;
use CleantalkSP\SpbctWP\Scanner\Stages\DTO\SendBackupDTO;
use CleantalkSP\SpbctWP\Scanner\Stages\DTO\SendFilesDTO;
use CleantalkSP\Variables\Request;
use CleantalkSP\SpbctWP\Scanner\Stages\Repositories\CriticalRepository;
use CleantalkSP\SpbctWP\Scanner\Stages\Repositories\LinksRepository;
use CleantalkSP\SpbctWP\Scanner\Stages\Repositories\SuspiciousRepository;
use CleantalkSP\SpbctWP\Scanner\Stages\Repositories\UnknownRepository;

class SendResultsStage
{
    /**
     * Execute send result stage
     *
     * @return array
     */
    public function execute()
    {
        global $spbc;

        $error = '';

        $sendFilesDTO = new SendFilesDTO();

        $critical = new CriticalRepository();
        $sendFilesDTO->setCritical($critical->getResultData());

        $suspicious = new SuspiciousRepository();
        $sendFilesDTO->setSuspicious($suspicious->getResultData());

        $unknown = new UnknownRepository();
        $sendFilesDTO->setUnknown($unknown->getResultData());

        $error = $this->sendFiles($sendFilesDTO, $error);

        $links = new LinksRepository();
        $error = $links->handle($error);

        $sendBackupDTO = new SendBackupDTO();
        $error = $this->sendBackup($sendBackupDTO, $error);

        $error = $this->sendFrontend($error);

        $spbc->error_toggle((bool)$error, 'scanner_result_send', $error);

        $this->updateAutoStart();

        $spbc->save('data');

        $duration_of_scanning = $this->updateLog();

        $out = array(
            'end' => 1,
            'stage_data_for_logging' => array(
                'title' => $duration_of_scanning,
                'description' => ''
            )
        );

        if ((bool)$error) {
            $out['error'] = $error;
        }

        return $out;
    }

    /**
     * Send files to the cloud
     *
     * @param SendFilesDTO $dto
     * @param string $error
     *
     * @return array<array-key, mixed>|bool|mixed
     */
    private function sendFiles($dto, $error)
    {
        global $spbc;

        $result = API::method__security_mscan_logs(
            $spbc->settings['spbc_key'],
            (int)$spbc->settings['scanner__list_unknown'],
            $spbc->service_id,
            $dto->getScannerStartLocalDate(),
            $dto->getScannerResult(),
            $dto->getTotalCoreFiles(),
            $dto->getTotalSiteFiles(),
            $dto->getCritical(),
            $dto->getSuspicious(),
            $dto->getUnknown(),
            RemoteCalls::check() ? 'auto' : 'manual',
            $dto->getChecksumCountCT(),
            $dto->getChecksumCountUser(),
            $dto->getSignaturesCount(),
            $this->getTotalScanned(),
            isset($spbc->data['scanner']['total_site_pages']) ? $spbc->data['scanner']['total_site_pages'] : 0,
            isset($spbc->data['scanner']['scanned_site_pages']) ? $spbc->data['scanner']['scanned_site_pages'] : 0,
            $dto->getSignaturesFound()
        );

        if ( ! empty($result['error']) ) {
            $error = 'Common result send: ' . $result['error'];
        } else {
            $spbc->data['scanner']['last_sent'] = current_time('timestamp');
            $spbc->data['scanner']['last_scan'] = current_time('timestamp');
            $spbc->data['scanner']['scan_finish_timestamp'] = time();
            $spbc->data['scanner']['last_scan_amount'] = Request::get('total_scanned') ?: $this->getTotalScanned();
            $spbc->data['scanner']['signatures_found'] = []; // Clearing ids of the signatures found
        }

        return $error;
    }



    /**
     * Get total scanned
     *
     * @return int|null
     */
    private function getTotalScanned()
    {
        global $spbc;

        return isset($spbc->data['scanner']['scanned_total']) ? $spbc->data['scanner']['scanned_total'] : null;
    }

    /**
     * Send backup
     *
     * @param SendBackupDTO $dto
     * @param string $error
     *
     * @return string
     */
    private function sendBackup($dto, $error)
    {
        global $spbc;

        if ( $spbc->settings['scanner__auto_cure'] && ! empty($spbc->data['scanner']['cured']) ) {
            //todo This stuff should be refactored on cloud to use CureLog instance, at the moment this does not send failed files
            $result_repairs = API::method__security_mscan_repairs(
                $spbc->settings['spbc_key'],            // API key
                'SUCCESS',                    // Repair result
                'ALL_DONE',                // Repair comment
                (array)$spbc->data['scanner']['cured'], // Files
                count($spbc->data['scanner']['cured']), // Links found for last scan
                $spbc->data['scanner']['last_backup'],  // Last backup num
                $dto->getScannerStartLocalDate()             // Scanner start local date
            );
            if ( ! empty($result_repairs['error']) ) {
                $error .= ' Repairs result send: ' . $result_repairs['error'];
            }
        }

        return $error;
    }

    /**
     * Send frontend
     *
     * @param string $error
     *
     * @return string
     */
    private function sendFrontend($error)
    {
        global $spbc;

        if ( isset($spbc->settings['scanner__frontend_analysis']) && $spbc->settings['scanner__frontend_analysis'] ) {
            try {
                Frontend::sendFmsLogs();
            } catch (\Exception $exception) {
                $error .= $exception->getMessage();
            }
        }

        return $error;
    }

    /**
     * Update auto start
     */
    private function updateAutoStart()
    {
        global $spbc;

        if ( $spbc->settings['scanner__auto_start'] && empty($spbc->errors['configuration']) ) {
            $scanner_launch_data = spbc_get_custom_scanner_launch_data();
            Cron::updateTask(
                'scanner__launch',
                'spbc_scanner__launch',
                $scanner_launch_data['period'],
                $scanner_launch_data['start_time']
            );
        }
    }

    /**
     * Update log
     *
     * @return string
     */
    private function updateLog()
    {
        global $spbc;

        $duration_of_scanning = __('The duration of the scan is not known', 'security-malware-firewall');
        if (isset($spbc->data['scanner']['scan_start_timestamp'], $spbc->data['scanner']['scan_finish_timestamp'])) {
            $duration_of_scanning = '<b>'
                . sprintf(__('Scan duration %s seconds.', 'security-malware-firewall')
                . '</b>', $spbc->data['scanner']['scan_finish_timestamp'] - $spbc->data['scanner']['scan_start_timestamp']) ;
        }

        ScanningLogFacade::writeToLog($duration_of_scanning);

        return $duration_of_scanning;
    }
}
