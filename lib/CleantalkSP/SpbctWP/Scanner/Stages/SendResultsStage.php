<?php

namespace CleantalkSP\SpbctWP\Scanner\Stages;

use CleantalkSP\SpbctWP\API;
use CleantalkSP\SpbctWP\Cron;
use CleantalkSP\SpbctWP\DB;
use CleantalkSP\SpbctWP\State;
use CleantalkSP\SpbctWP\RemoteCalls;
use CleantalkSP\SpbctWP\Scanner\Frontend;
use CleantalkSP\SpbctWP\Scanner\ScanningLog\ScanningLogFacade;
use CleantalkSP\Variables\Request;
use CleantalkSP\SpbctWP\Scanner\Stages\Repositories\CriticalRepository;
use CleantalkSP\SpbctWP\Scanner\Stages\Repositories\LinksRepository;
use CleantalkSP\SpbctWP\Scanner\Stages\Repositories\SuspiciousRepository;
use CleantalkSP\SpbctWP\Scanner\Stages\Repositories\UnknownRepository;
use CleantalkSP\SpbctWP\Scanner\Surface;

class SendResultsStage
{
    /**
     * @global $wpdb
     */
    protected $wpdb;

    /**
     * SendResultsStage constructor.
     */
    public function __construct()
    {
        global $wpdb;

        $this->wpdb = $wpdb;
    }

    /**
     * Execute send result stage
     *
     * @return array
     */
    public function execute()
    {
        global $spbc;

        $error = '';

        $critical = new CriticalRepository();
        $critical_files_found = $critical->getResultData();

        $suspicious = new SuspiciousRepository();
        $suspicious_files_found = $suspicious->getResultData();

        $unknown = new UnknownRepository();
        $unknown_files_found = $unknown->getResultData();

        $result = $this->sendFiles($critical_files_found, $suspicious_files_found, $unknown_files_found);

        if ( ! empty($result['error']) ) {
            $error = 'Common result send: ' . $result['error'];
        } else {
            $spbc->data['scanner']['last_sent'] = current_time('timestamp');
            $spbc->data['scanner']['last_scan'] = current_time('timestamp');
            $spbc->data['scanner']['scan_finish_timestamp'] = time();
            $spbc->data['scanner']['last_scan_amount'] = Request::get('total_scanned') ?: $this->getTotalScanned();
            $spbc->data['scanner']['signatures_found'] = []; // Clearing ids of the signatures found
        }

        $links = new LinksRepository();
        $error = $links->handle($error);

        $error = $this->sendBackup($error);

        $error = $this->sendFrontend($error);

        $spbc->error_toggle((bool)$error, 'scanner_result_send', $error);

        $this->updateAutoStart();

        $spbc->save('data');

        $duration_of_scanning = $this->updateLog();

        $out = array(
            'end' => 1,
            'stage_data_for_logging' => array(
                'title' => $duration_of_scanning,
                'description' => ''
            )
        );

        if ((bool)$error) {
            $out['error'] = $error;
        }

        return $out;
    }

    /**
     * Send files to the cloud
     *
     * @param array $critical_files_found
     * @param array $suspicious_files_found
     * @param array $unknown_files_found
     *
     * @return array<array-key, mixed>|bool|mixed
     */
    private function sendFiles($critical_files_found, $suspicious_files_found, $unknown_files_found)
    {
        global $spbc;

        $result = API::method__security_mscan_logs(
            $spbc->settings['spbc_key'],
            (int)$spbc->settings['scanner__list_unknown'],
            $spbc->service_id,
            $this->getScannerStartLocalDate(),
            $this->getScannerResult($critical_files_found, $suspicious_files_found),
            $this->getTotalCoreFiles(),
            $this->getTotalSiteFiles(),
            $critical_files_found,
            $suspicious_files_found,
            $unknown_files_found,
            RemoteCalls::check() ? 'auto' : 'manual',
            $this->getChecksumCountCT(),
            $this->getChecksumCountUser(),
            $this->getSignaturesCount(),
            $this->getTotalScanned(),
            isset($spbc->data['scanner']['total_site_pages']) ? $spbc->data['scanner']['total_site_pages'] : 0,
            isset($spbc->data['scanner']['scanned_site_pages']) ? $spbc->data['scanner']['scanned_site_pages'] : 0,
            $this->getSignaturesFound()
        );

        return $result;
    }

    /**
     * Get scanner start local date
     */
    private function getScannerStartLocalDate()
    {
        global $spbc;

        return isset($spbc->data['scanner']['scanner_start_local_date'])
            ? $spbc->data['scanner']['scanner_start_local_date']
            : current_time('Y-m-d H:i:s');
    }

    /**
     * Get scanner result
     *
     * @param array $critical_files_found
     * @param array $suspicious_files_found
     *
     * @return string
     */
    private function getScannerResult($critical_files_found, $suspicious_files_found)
    {
        return !empty($critical_files_found) || !empty($suspicious_files_found) ? 'warning' : 'passed';
    }

    /**
     * Get total core files
     *
     * @return int
     */
    private function getTotalCoreFiles()
    {
        $total = (int)$this->wpdb->get_var(
            'SELECT COUNT(*) FROM ' . SPBC_TBL_SCAN_FILES . ' WHERE source_type = "CORE" AND source = "wordpress"'
        );

        return $total ?: 0;
    }

    /**
     * Get total site files
     *
     * @return int
     */
    private function getTotalSiteFiles()
    {
        global $spbc;

        return $spbc->data['scanner']['files_total'] = $this->countFileSystem()['total'];
    }

    /**
     * Get checksum count CT
     *
     * @return int|null
     */
    private function getChecksumCountCT()
    {
        global $spbc;

        return isset($spbc->data['scanner']['checksums_count_ct']) ? $spbc->data['scanner']['checksums_count_ct'] : null;
    }

    /**
     * Get checksum count user
     *
     * @return int
     */
    private function getChecksumCountUser()
    {
        return (int)$this->wpdb->get_var(
            'SELECT COUNT(*) from ' . SPBC_TBL_SCAN_FILES . ' WHERE status = "APPROVED_BY_USER"'
        );
    }

    /**
     * Get signatures found
     *
     * @return string
     */
    private function getSignaturesFound()
    {
        global $spbc;

        $signatures = isset($spbc->data['scanner']['signatures_found']) ? $spbc->data['scanner']['signatures_found'] : [];

        return json_encode($signatures);
    }

    /**
     * Get signatures count
     *
     * @return int|null
     */
    private function getSignaturesCount()
    {
        global $spbc;

        $found = $this->getSignaturesFound();
        $signatures = isset($spbc->data['scanner']['signature_count']) ? $spbc->data['scanner']['signature_count'] : null;
        if ( is_null($signatures) && is_string($found) ) {
            return count(json_decode($found, true));
        }

        return $signatures;
    }

    /**
     * Get total scanned
     *
     * @return int|null
     */
    private function getTotalScanned()
    {
        global $spbc;

        return isset($spbc->data['scanner']['scanned_total']) ? $spbc->data['scanner']['scanned_total'] : null;
    }

    /**
     * @param string $path_to_scan
     *
     * @return array
     * @global State $spbc
     *
     */
    private function countFileSystem($path_to_scan = ABSPATH)
    {
        global $spbc;

        ini_set('max_execution_time', '120');

        $path_to_scan = realpath($path_to_scan);
        $init_params  = array(
            'count'           => true,
            'file_exceptions' => 'wp-config.php',
            'extensions'      => 'php, html, htm, js, php2, php3, php4, php5, php6, php7, phtml, shtml, phar, odf, [ot.]',
            'files_mandatory' => array(),
            'dir_exceptions'  => array(SPBC_PLUGIN_DIR . 'quarantine')
        );

        if ( ! empty($spbc->settings['scanner__dir_exclusions']) ) {
            $init_params['dir_exceptions'] = array_merge(
                $init_params['dir_exceptions'],
                spbc__get_exists_directories(explode("\n", $spbc->settings['scanner__dir_exclusions']))
            );
        }

        $scanner = new Surface($path_to_scan, realpath(ABSPATH), $init_params);

        return array(
            'total' => $scanner->files_count,
            'end'   => 1,
        );
    }

    /**
     * Send backup
     *
     * @param string $error
     *
     * @return string
     */
    private function sendBackup($error)
    {
        global $spbc;

        if ( $spbc->settings['scanner__auto_cure'] && ! empty($spbc->data['scanner']['cured']) ) {
            //todo This stuff should be refactored on cloud to use CureLog instance, at the moment this does not send failed files
            $result_repairs = API::method__security_mscan_repairs(
                $spbc->settings['spbc_key'],            // API key
                'SUCCESS',                    // Repair result
                'ALL_DONE',                // Repair comment
                (array)$spbc->data['scanner']['cured'], // Files
                count($spbc->data['scanner']['cured']), // Links found for last scan
                $spbc->data['scanner']['last_backup'],  // Last backup num
                $this->getScannerStartLocalDate()             // Scanner start local date
            );
            if ( ! empty($result_repairs['error']) ) {
                $error .= ' Repairs result send: ' . $result_repairs['error'];
            }
        }

        return $error;
    }

    /**
     * Send frontend
     *
     * @param string $error
     *
     * @return string
     */
    private function sendFrontend($error)
    {
        global $spbc;

        if ( isset($spbc->settings['scanner__frontend_analysis']) && $spbc->settings['scanner__frontend_analysis'] ) {
            try {
                Frontend::sendFmsLogs();
            } catch (\Exception $exception) {
                $error .= $exception->getMessage();
            }
        }

        return $error;
    }

    /**
     * Update auto start
     */
    private function updateAutoStart()
    {
        global $spbc;

        if ( $spbc->settings['scanner__auto_start'] && empty($spbc->errors['configuration']) ) {
            $scanner_launch_data = spbc_get_custom_scanner_launch_data();
            Cron::updateTask(
                'scanner__launch',
                'spbc_scanner__launch',
                $scanner_launch_data['period'],
                $scanner_launch_data['start_time']
            );
        }
    }

    /**
     * Update log
     *
     * @return string
     */
    private function updateLog()
    {
        global $spbc;

        $duration_of_scanning = __('The duration of the scan is not known', 'security-malware-firewall');
        if (isset($spbc->data['scanner']['scan_start_timestamp'], $spbc->data['scanner']['scan_finish_timestamp'])) {
            $duration_of_scanning = '<b>'
                . sprintf(__('Scan duration %s seconds.', 'security-malware-firewall')
                . '</b>', $spbc->data['scanner']['scan_finish_timestamp'] - $spbc->data['scanner']['scan_start_timestamp']) ;
        }

        ScanningLogFacade::writeToLog($duration_of_scanning);

        return $duration_of_scanning;
    }
}
