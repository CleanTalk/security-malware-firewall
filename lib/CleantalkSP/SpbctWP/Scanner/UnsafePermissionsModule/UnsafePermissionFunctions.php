<?php

namespace CleantalkSP\SpbctWP\Scanner\UnsafePermissionsModule;

class UnsafePermissionFunctions
{
    /**
     * @var $spbc
     */
    private $spbc;

    /**
     * @param $spbc
     */
    public function __construct($spbc)
    {
        $this->spbc = $spbc;
    }

    public function handle()
    {
        $files = UnsafePermissionsContainer::getFiles();
        $dirs = UnsafePermissionsContainer::getDirs();
        $checking_list = array(
            'files' => $this->checkFiles($files),
            'dirs' => $this->checkDirs($dirs),
        );

        $this->spbc->data['unsafe_permissions'] = $checking_list;
        $this->spbc->save('data');
    }

    /**
     * @param array $files
     *
     * @return array
     */
    private function checkFiles($files = array())
    {
        $checking_list = array();

        foreach ($files as $path => $base_permission) {
            $abs_path = ABSPATH . ltrim($path, '/');

            if (file_exists($abs_path)) {
                $permission = (int)substr(decoct(fileperms($abs_path)), 3);
            
                if ($permission > $base_permission) {
                    // add to $checking_list
                    $checking_list[] = array(
                        $path => $permission
                    );
                }
            }
        }

        return $checking_list;
    }

    /**
     * @param array $dirs
     *
     * @return array
     */
    private function checkDirs($dirs = array())
    {
        $checking_list = array();

        foreach ($dirs as $path => $base_permission) {
            $abs_path = ABSPATH . ltrim($path, '/');

            if (is_dir($abs_path)) {
                $permission = (int)substr(decoct(fileperms($abs_path)), 2);

                if ($permission > $base_permission) {
                    // add to $checking_list
                    $checking_list[] = array(
                        $path => $permission
                    );
                }
            }
        }

        return $checking_list;
    }
}
