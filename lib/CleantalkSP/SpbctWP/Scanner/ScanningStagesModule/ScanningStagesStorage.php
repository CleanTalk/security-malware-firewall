<?php

namespace CleantalkSP\SpbctWP\Scanner\ScanningStagesModule;

use CleantalkSP\SpbctWP\Scanner\ScanningStagesModule\Stages\ScanningStageAbstract;

class ScanningStagesStorage
{
    public static $collection = array();
    private static $option_name = 'spbc_scanning_stages';

    // Clearing data in DB
    public static function newStart()
    {
        update_option(self::$option_name, self::$collection);
    }

    // Loading data from DB and filling collection
    public static function loadCollection()
    {
        $collection = get_option(self::$option_name, true);

        if (is_array($collection) && !empty($collection)) {
            foreach ($collection as $stage_type => $stage_data) {
                self::$collection[] = ScanningStagesFactory::create($stage_type, $stage_data);
            }
        }
    }

    public static function getStage($class)
    {
        if (self::$collection) {
            foreach (self::$collection as $stage_obj) {
                if ($stage_obj instanceof $class) {
                    return $stage_obj;
                }
            }
        }

        $stage_obj = new $class();
        self::$collection[] = $stage_obj;

        return $stage_obj;
    }

    public static function saveToDb()
    {
        $data_as_array = array();
        foreach (self::$collection as $stage_obj) {
            $data_as_array = array_merge($data_as_array, $stage_obj->asArrayForStorage());
        }

        update_option(self::$option_name, $data_as_array);
    }
}