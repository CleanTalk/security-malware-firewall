<?php

namespace CleantalkSP\SpbctWP\Scanner\ScanningStagesLogModule\Stages;

use CleantalkSP\SpbctWP\Scanner\ScanningStagesLogModule\StageInterface;

class SignatureAnalysis implements StageInterface
{
    const TITLE = 'Signature analysis';
    const DESCRIPTION = 'Signature analysis - description';
    const STAGE_NAME = 'signature_analysis';

    private $title;
    private $description;
    private $total_count_files_for_analysis;
    private $count_files_to_check;
    private $scanned_count_files;
    private $statuses;

    public function getFormatData($log_data)
    {
        if (empty($this->total_count_files_for_analysis) && !empty($log_data[self::STAGE_NAME]['total_count_files_for_analysis'])) {
            $this->total_count_files_for_analysis = $log_data[self::STAGE_NAME]['total_count_files_for_analysis'];
        }
        $this->count_files_to_check = isset($log_data[self::STAGE_NAME]['count_files_to_check']) ?
            $log_data[self::STAGE_NAME]['count_files_to_check'] + $this->count_files_to_check :
            0;
        $this->scanned_count_files = isset($log_data[self::STAGE_NAME]['scanned_count_files']) ?
            $log_data[self::STAGE_NAME]['scanned_count_files'] + $this->scanned_count_files :
            0;
        
        // WORKLOG
        $log = 'SignatureAnalysis:getFormatData: ' . print_r($this->statuses, true);
        file_put_contents(SPBC_PLUGIN_DIR . '/log.txt', $log . PHP_EOL, FILE_APPEND);
        // WORKLOG
        $log = 'SignatureAnalysis:$log_data[self::STAGE_NAME][statuses]: ' . print_r($log_data[self::STAGE_NAME]['statuses'], true);
        file_put_contents(SPBC_PLUGIN_DIR . '/log.txt', $log . PHP_EOL, FILE_APPEND);
        
        foreach ($this->statuses as $status_name => $count) {
            $this->statuses[$status_name] = isset($log_data[self::STAGE_NAME]['statuses'][$status_name]) ?
                $this->statuses[$status_name] + $log_data[self::STAGE_NAME]['statuses'][$status_name] :
                $this->statuses[$status_name];
        }

        return $this->toArray();
    }

    public function setTotalCountFilesForAnalysis($count)
    {
        $this->total_count_files_for_analysis = $count;
    }

    public function updateCountFilesToCheck($count)
    {
        $this->count_files_to_check = $count;
    }

    public function updateScannedCountFiles($count)
    {
        $this->scanned_count_files = $count;
    }

    public function updateStatuses(array $statuses)
    {
        $this->statuses = $statuses;
    }

    private function toArray()
    {
        return array(
            'total_count_files_for_analysis' => $this->total_count_files_for_analysis,
            'count_files_to_check' => $this->count_files_to_check,
            'scanned_count_files' => $this->scanned_count_files,
            'statuses' => $this->statuses
        );
    }
}
