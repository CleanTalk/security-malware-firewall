<?php

namespace CleantalkSP\DTO;

class DTO
{
    /**
     * If transforming is success.
     * @var false
     */
    protected $success;
    /**
     * Array of string of errors happened.
     * @var array
     */
    protected $errors;
    /**
     * Default error message.
     * @var string
     */
    protected $error_msg_template = 'Can not create DTO';
    /**
     * Input data to handle.
     * @var array
     */
    protected $data = array();
    /**
     * List of awaited DTO keys;
     * @var array
     */
    protected $dto_awaited_keys;
    /**
     * Count of awaited DTO keys.
     * @var int
     */
    protected $dto_awaited_keys_count;
    /**
     * Set a default data if possible for DTO.
     * @var false
     */
    protected $default_data = false;

    public function __construct($data)
    {
        if ( is_array($data) ) {
            $this->data = $data;
        }
        $this->errors = array();
        $this->success = false;
    }

    /**
     * Try to transform input DTO data to awaited values and types.
     * Return true on success, false if not.
     * @return bool
     */
    public function transform()
    {
        //default parent checks
        $this->dataIsSet();
        $this->checkDTOKeysCount();
        $this->compareDTOKeysWithInputData();
        return $this->success;
    }

    /**
     * Return DTO data array in awaited format. Use this after $this->transform()
     * Return default data if data is not set, return false if transforming was not successful.
     * @return array|false
     */
    public function getData()
    {
        error_log('CTDEBUG: DTO getData* $this->raw_data' . var_export($this->data, true));
        error_log('CTDEBUG: DTO getData* $this->errors' . var_export($this->errors, true));
        return $this->success ? $this->data : $this->default_data;
    }

    /**
     * Get text of last error happens on transforming.
     * @return string
     */
    public function getLastError()
    {
        error_log('CTDEBUG: DTO getErrors()' . var_export($this->getErrors(), true));
        return (string)end($this->errors);
    }

    /**
     * Get array of all errors happened.
     * @return array
     */
    public function getErrors()
    {
        return $this->errors;
    }

    /**
     * Add a new error happened. Param is used to describe what is wrong.
     * @param $msg
     */
    protected function setError($msg)
    {
        $this->errors[] = $this->error_msg_template . $msg . ' is incorrect.';
    }

    /**
     * Add the DTO called class to the error template.
     * @param $class_name
     */
    protected function addClassToDefaultMsg($class_name)
    {
        $this->error_msg_template .= '(' . $class_name . '): ';
    }

    /**
     * Chek if values of transferred array keys is string. Set an error if not.
     * This method does not convert values!
     * @param array $keys_of_raw
     */
    protected function strictCheckIsString($keys_of_raw = array())
    {
        foreach ( $keys_of_raw as $key ) {
            if ( isset($this->data[$key]) && !is_string($this->data[$key]) ) {
                $this->success = false;
                $this->setError($key);
            }
        }
    }

    protected function strictCheckIsArray($keys_of_raw = array())
    {
        foreach ( $keys_of_raw as $key ) {
            if ( isset($this->data[$key]) && !is_array($this->data[$key]) ) {
                $this->success = false;
                $this->setError($key);
            }
        }
    }

    /**
     * Try to convert values of transferred array to strings.
     * @param array $keys_of_raw
     */
    protected function convertToString($keys_of_raw = array())
    {
        foreach ( $keys_of_raw as $key ) {
            if ( isset($this->data[$key]) && !is_string($this->data[$key]) ) {
                if ( is_bool($this->data[$key])
                    || is_int($this->data[$key])
                    || is_float($this->data[$key]) ) {
                    $this->data[$key] = (string)$this->data[$key];
                } else {
                    $this->success = false;
                    $this->setError($key);
                }
            }
        }
    }

    /**
     * Check if DTO awaited keys count is equal to current DTO data keys count. Set an error if false.
     */
    protected function checkDTOKeysCount()
    {
        if ( $this->dto_awaited_keys_count !== count($this->data) ) {
            error_log('CTDEBUG: * dto_awaited_keys_count' . var_export($this->dto_awaited_keys_count, true));
            error_log('CTDEBUG: * data' . var_export($this->data, true));
            $this->success = false;
            $this->setError('keys count');
        }
    }

    /**
     * Compare keys DTO awaited keys with current DTO keys. Set an error if the are different.
     */
    protected function compareDTOKeysWithInputData()
    {
        if ( !array_keys($this->data) == $this->dto_awaited_keys ) {
            $this->success = false;
            $this->setError('keys');
        }
    }

    /**
     * Check if data is provided. Set an error if the are different.
     */
    protected function dataIsSet()
    {
        if ( !isset($this->data) ) {
            $this->success = false;
            $this->setError('data');
        }
    }
}
