<?php

namespace CleantalkSP\Common\FSWatcher;

use CleantalkSP\Common\FSWatcher\Repository\FileRepository;
use CleantalkSP\Common\FSWatcher\Storage\FileStorage;

class Service
{
    public static function setStorage($storage = 'file')
    {
        switch ($storage) {
            case 'file':
                Controller::$storage = FileStorage::class;
                Controller::$repository = FileRepository::class;
                break;
            // case 'customdb':
                // Controller::$storage = CustomDBStorage::class;
                // Controller::$repository = CustomDBStorage::class;
                // break;
            // case 'db':
                // Controller::$storage = DBStorage::class;
                // Controller::$repository = DBStorage::class;
                // break;
            default:
                Controller::$storage = FileStorage::class;
                Controller::$repository = FileRepository::class;
                break;
        }
    }

    public static function isMinIntervalPassed($interval)
    {
        $last_exec_time = Controller::$storage::getLastJournalTime();
        if (is_null($last_exec_time)) {
            return true;
        }

        return (time() - $last_exec_time) > $interval;
    }

    public static function attach_js($buffer)
    {
        $is_ajax = isset($_SERVER['HTTP_X_REQUESTED_WITH']) && strtolower($_SERVER['HTTP_X_REQUESTED_WITH']) == 'xmlhttprequest';
        $is_html = preg_match('/^\s*(<!doctype|<!DOCTYPE|<html)/i', $buffer) == 1;

        if (!$is_ajax && $is_html) {
            $path = __DIR__ . DIRECTORY_SEPARATOR . 'assets' . DIRECTORY_SEPARATOR . 'fswatcher.js';
            $addition =
                '<script type="text/javascript">var fswatcherToken = "' . md5(filemtime(__FILE__)) . '";</script>'
                . '<script type="text/javascript">' . file_get_contents($path) . '</script>';

            $buffer = preg_replace(
                '/<\/body>(\s|<.*>)*<\/html>\s*$/i',
                $addition.'</body></html>',
                $buffer,
                1
            );
        }

        return $buffer;
    }

    public static function isRC()
    {
        if (isset($_POST['fswatcher_token']) && $_POST['fswatcher_token'] == md5(filemtime(__FILE__))) {
            return true;
        }

        return false;
    }

    public static function isCompareRequest()
    {
        if (isset($_POST['fswatcher_compare']) && $_POST['fswatcher_compare'] == true &&
            isset($_POST['fswatcher__first_date']) && filter_var($_POST['fswatcher__first_date'], FILTER_VALIDATE_INT) !== false &&
            isset($_POST['fswatcher__second_date']) && filter_var($_POST['fswatcher__second_date'], FILTER_VALIDATE_INT) !== false
        ) {
            return true;
        }

        return false;
    }

    public static function setAllJournalsAsCompleted()
    {
        Controller::$storage::setAllJournalsAsCompleted();
    }

    public static function getProcessingJournal()
    {
        Controller::$storage::getProcessingJournal();
    }
}
