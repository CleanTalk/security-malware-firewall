let noChangesDetected = true;
let first_select = document.getElementById('fswatcher__first_date');
let second_select = document.getElementById('fswatcher__second_date');
const availableDataSetNames = ['added','changed','deleted']


function fswatcherCompare(e) {
    e.preventDefault();

    let first_date = document.getElementById('fswatcher__first_date').value;
    let second_date = document.getElementById('fswatcher__second_date').value;

    console.table('first_date',first_date)
    console.table('second_date',second_date)

    toggleSelectsInfo(true);

    if (typeof fswatcherToken !== 'undefined') {
        let xhr = new XMLHttpRequest();
        xhr.open("POST", window.location.protocol + '//' + window.location.host);
        xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
        let data = [
            'fswatcher_token=' + fswatcherToken,
            'fswatcher_compare=1',
            'fswatcher__first_date=' + first_date,
            'fswatcher__second_date=' + second_date,
        ];
        xhr.send(data.join('&'));
        xhr.onreadystatechange = function() {
            if( xhr.readyState == XMLHttpRequest.DONE && xhr.status == 200 ) {
                handleResponse(xhr.response);
            }
        }
    }

    return false;
}

function handleResponse(response) {
    let responseDataObj = {};
    noChangesDetected = true;
    if (typeof response === 'string') {
        responseDataObj = decodeJSON(response)
    }

    let fsWatcherTableBody = document.getElementById('spbc-table-fs_watcher-comparison');
    const validate_result = validateResponse(responseDataObj)
    if (true === validate_result) {
        renderTableContent(fsWatcherTableBody, responseDataObj)
        if (noChangesDetected) {
            renderRow(fsWatcherTableBody, null, 'no_changes', null)
        }
    } else {
        alert(validate_result + ' Please contact support@cleantalk.org');
    }
    resetSelects();
}

function decodeJSON(response) {
    return JSON.parse(response)
}

function renderTableContent(tbody, responseDataObj) {
    tbody.innerHTML = '';
    for (const dataSetName of availableDataSetNames) {
        if (handleDataObject(tbody,responseDataObj, dataSetName))
        {
            noChangesDetected = false;
        }
    }
}

function validateResponse(responseDataObj) {
    if (
        !responseDataObj ||
        typeof responseDataObj !== 'object'
    ) {
        return 'Response is invalid.'
    }

    if (typeof responseDataObj.error !== 'undefined') {
        return responseDataObj.error
    }

    for (const dataSetName of availableDataSetNames) {
        if (
            !responseDataObj.hasOwnProperty(dataSetName)
        ) {
            return 'Response has no required properties.'
        }
    }

    return true;
}

function handleDataObject(tbody, responseDataObj, event_type) {
    const events_array = responseDataObj[event_type]
    if (events_array.length > 0) {
        for (let i = 0; i < events_array.length; i++) {
            const row = convertEventToRow(events_array[i], event_type);
            renderRow(tbody, row.path, row.event_type, row.date)
        }
    } else {
        return false;
    }
    return true;
}

function convertEventToRow(event, event_type) {
    let row = {
        'path': 'unknown',
        'event_type': event_type.toUpperCase(),
        'date': 'unknown'
    }

    if (event.length === 2) {
        if (typeof event[0] === 'string') {
            row.path = event[0];
        }
        if (typeof event[1] === 'string') {
            row.date = new Date(Number(event[1]) * 1000).toLocaleString();
        }
    }

    return row;
}


function renderRow(tbody, path, event_type, date) {

    if (event_type === 'no_changes') {
        let tr = document.createElement('tr')
        let td = document.createElement('td')
        td.setAttribute('name', 'fswatcher-event-no-changes')
        td.setAttribute('colspan', '3')
        td.innerText = 'No changes detected on selected dates';
        tr.appendChild(td)
        tbody.appendChild(tr);
        return;
    }

    let tr = document.createElement('tr')

    let td_path = document.createElement('td')
    td_path.setAttribute('name', 'fswatcher-event-path')
    td_path.innerText = path;
    tr.appendChild(td_path)

    let td_type = document.createElement('td')
    td_type.setAttribute('name', 'fswatcher-event-type')
    td_type.innerText = event_type;
    tr.appendChild(td_type)

    let td_date = document.createElement('td')
    td_date.setAttribute('name', 'fswatcher-event-date')
    td_date.innerText = date;
    tr.appendChild(td_date)

    tbody.appendChild(tr);
}

function filterSecondSelect() {
    toggleSelectsInfo(false);
    const first_select_value = first_select.options[first_select.selectedIndex].value
    if (!second_select.disabled) {
        if (typeof first_select_value !== 'undefined') {
            for (let i = 0; i < second_select.options.length; i++) {
                if (Number(second_select.options[i].value) <= Number(first_select_value)) {
                    second_select.options[i].style.display = 'none';
                }
            }
        }
        first_select.setAttribute('disabled', 'disabled')
    }
}

function filterFirstSelect() {
    const second_select_value = second_select.options[second_select.selectedIndex].value;
    toggleSelectsInfo(false);
    if (!first_select.disabled) {
        if (typeof second_select_value !== 'undefined') {
            for (let i = 0; i < first_select.options.length; i++) {
                if (Number(first_select.options[i].value) >= Number(second_select_value)) {
                    first_select.options[i].style.display = 'none';
                }
            }
        }
    }
    second_select.setAttribute('disabled', 'disabled')
}

function resetSelects() {
    for (let i = 0; i < first_select.options.length; i++) {
        first_select.options[i].style.display = 'inherit';
    }
    for (let i = 0; i < second_select.options.length; i++) {
        second_select.options[i].style.display = 'inherit';
    }
    second_select.removeAttribute('disabled');
    first_select.removeAttribute('disabled');
}

function toggleSelectsInfo(enable) {
    let infoTag = document.getElementById('spbc--fs-watcher-table-handling-selects-info')
    if (enable) {
        infoTag.style.display = 'inherit';
        infoTag.innerHTML= 'Comparing log ' +
            '<b>' + first_select.options[first_select.selectedIndex].text + '</b>' +
            ' with log ' +
            '<b>' + second_select.options[second_select.selectedIndex].text + '</b>'
    } else {
        infoTag.innerText = '';
        infoTag.style.display = 'none';
    }
}


document.getElementById('fswatcher__compare').addEventListener('click', fswatcherCompare);
first_select.addEventListener('change', filterSecondSelect);
second_select.addEventListener('change', filterFirstSelect);


