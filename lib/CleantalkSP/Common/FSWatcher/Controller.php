<?php

namespace CleantalkSP\Common\FSWatcher;

use CleantalkSP\Common\FSWatcher\Analyzer\Analyzer;
use CleantalkSP\Common\FSWatcher\Scan\Scan;

class Controller
{
    const debug = true;

    const STATUS_STOPPED = 'stopped';
    const STATUS_RUNNING = 'running';

    const EXECUTION_MIN_INTERVAL = 6000;

    public static $storage;
    public static $repository;

    private static $status = self::STATUS_STOPPED;

    public static function work($params)
    {
        if (self::debug) {
            Logger::log('check remote call = ' . (int)Service::isRC());
        }

        Service::setStorage(isset($params['storage']) ? $params['storage'] : 'file');

        if (self::status() === self::STATUS_STOPPED && Service::isRC() && Service::isCompareRequest()) {
            if (self::debug) {
                Logger::log('run compare file system');
            }
            $compare_result = Analyzer::getCompareResult();
            if (false === $compare_result) {
                Logger::log('Can not compare logs');
                echo json_encode(array('error' => 'Can not compare logs'));
            } else {
                echo json_encode($compare_result);
            }
            die();
        }

        if (self::status() === self::STATUS_STOPPED && Service::isRC()) {
            if (self::debug) {
                Logger::log('run scan file system');
            }
            self::run($params);
            die('OK');
        }

        if (self::status() === self::STATUS_STOPPED && Service::isMinIntervalPassed(self::EXECUTION_MIN_INTERVAL)) {
            if (self::debug) {
                Logger::log('attach js to make remote request');
            }
            ob_start(['CleantalkSP\Common\FSWatcher\Service', 'attach_js']);
        }
    }

    private static function run($params)
    {
        self::$status = self::STATUS_RUNNING;
        Scan::run($params);
        self::stop();
    }

    private static function stop()
    {
        self::$status = self::STATUS_STOPPED;
        Service::setAllJournalsAsCompleted();
    }

    private static function status()
    {
        $is_exist = Service::getProcessingJournal();
        if (!is_null($is_exist)) {
            self::$status = self::STATUS_RUNNING;
        }

        return self::$status;
    }
}
