<?php

namespace CleantalkSP\Common;

use CleantalkSP\Common\Helpers\Helper;

class Escape {
    /**
     * Simple method: escape html attribute
     *
     * @param $text
     */
    public static function escAttr($text)
    {
        $safe_text = Helper::checkInvalidUTF8($text);

        return Helper::convertToSpecialchars( $safe_text, ENT_QUOTES );
    }
    
    /**
     * Simple method: escape html
     *
     * @param $text
     */
    public static function escHtml($text)
    {
        $safe_text = Helper::checkInvalidUTF8($text);

        return Helper::convertToSpecialchars( $safe_text, ENT_QUOTES );
    }
    
    /**
     * Simple method: escape js
     *
     * @param $text
     */
    public static function escJs($text)
    {
        $safe_text = Helper::checkInvalidUTF8($text);
        $safe_text = Helper::convertToSpecialchars( $safe_text, ENT_COMPAT );
        $safe_text = preg_replace( '/&#(x)?0*(?(1)27|39);?/i', "'", stripslashes( $safe_text ) );
        $safe_text = str_replace( "\r", '', $safe_text );

        return str_replace( "\n", '\\n', addslashes( $safe_text ) );
    }
    
    /**
     * Simple method: escape textarea
     *
     * @param $text
     */
    public static function escTextarea($text)
    {
        return htmlspecialchars( $text, ENT_QUOTES );
    }
    
    /**
     * Simple method: escape url
     *
     * @param $url
     */
    public static function escUrl($url, $protocols = null, $_context = 'display')
    {
        $original_url = $url;

        if ( '' === $url ) {
            return $url;
        }

        $url = str_replace( ' ', '%20', ltrim( $url ) );
        $url = preg_replace( '|[^a-z0-9-~+_.?#=!&;,/:%@$\|*\'()\[\]\\x80-\\xff]|i', '', $url );

        if ( '' === $url ) {
            return $url;
        }

        if ( 0 !== stripos( $url, 'mailto:' ) ) {
            $strip = array( '%0d', '%0a', '%0D', '%0A' );
            $url   = Helper::deepReplace( $strip, $url );
        }

        $url = str_replace( ';//', '://', $url );
        /*
         * If the URL doesn't appear to contain a scheme, we presume
         * it needs http:// prepended (unless it's a relative link
         * starting with /, # or ?, or a PHP file).
         */
        if ( strpos( $url, ':' ) === false && ! in_array( $url[0], array( '/', '#', '?' ), true ) &&
             ! preg_match( '/^[a-z0-9-]+?\.php/i', $url ) ) {
            $url = 'http://' . $url;
        }

        if ( '/' === $url[0] ) {
            $good_protocol_url = $url;
        } else {
            if ( ! is_array( $protocols ) ) {
                $protocols = Helper::getAllowedProtocols();
            }
            $good_protocol_url = wp_kses_bad_protocol( $url, $protocols );
            if ( strtolower( $good_protocol_url ) != strtolower( $url ) ) {
                return '';
            }
        }

        return $good_protocol_url;
    }
    
    /**
     * Simple method: escape url raw
     *
     * @param $text
     */
    public static function escUrlRaw($text)
    {
        // TODO
    }
    
    /**
     * Simple method: escape kses
     *
     * @param $string
     * @param $allowed_html
     * @param array $allowed_protocols
     */
    public static function escKses($string, $allowed_html, $allowed_protocols = array())
    {
        // TODO
    }
    
    /**
     * Simple method: escape kses post
     *
     * @param $data
     */
    public static function escKsesPost($data)
    {
        // TODO
    }
}