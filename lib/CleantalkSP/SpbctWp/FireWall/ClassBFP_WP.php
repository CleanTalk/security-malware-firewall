<?php
/*
 * BruteForce protection FireWall module.
 *
 * @version 1.0
 * @since 2.49
 * @see FireWall_module
 */

namespace CleantalkSP\SpbctWp\FireWall;


use CleantalkSP\SpbctWp\Helper;
use CleantalkSP\Variables\Server;

class ClassBFP_WP extends FireWall_module_tc {

	/*
	 * Default wrong login count to checking brute force.
	 */
	private $bf_limit = 5;

	/*
	 * Default time interval for allowing the wrong login count.
	 */
	private $allowed_interval = 900;

	private $is_login_page;

	public function __construct() {

		parent::__construct();

		$this->is_login_page = strpos( Server::get('REQUEST_URI'), 'wp-login.php' ) !== false ;

		$this->store_interval = $this->allowed_interval;

	}

	public function check() {

		global $wpdb;

		$results = array();

		if( $this->is_login_page && ! $this->was_logged_in  ) {

			$this->clear_table( SPBC_TBL_TC_LOG );

			$time = time();
			$block_time_end = $time + $this->allowed_interval;

			foreach( $this->ip_array as $ip_origin => $current_ip ){
				$query = "SELECT SUM(entries) as total_count 
				         FROM `" . SPBC_TBL_TC_LOG . "` 
				         WHERE ip = '$current_ip' 
				         AND log_type = 1 
				         AND interval_start < '$block_time_end';";
				$result = $wpdb->get_results( $query, OBJECT );

				if( ! empty( $result ) && $result[0]->total_count >= $this->bf_limit ){
					$results[] = array( 'ip' => $current_ip, 'is_personal' => false, 'status' => 'DENY_BY_BFP' );
				}
			}

			if ( ! empty( $results ) ) {
				// Do block page
				return $results;
			} else {
				// Handle login actions
				add_action( 'apbct_log_wrong_auth',  array( $this, 'update_logs' ) );
			}

		}

		return $results;

	}

	public function update_logs() {

		global $wpdb;

		$interval_time = Helper::time__get_interval_start( $this->allowed_interval );

		foreach( $this->ip_array as $ip_origin => $current_ip ){
			$id = md5( $current_ip . $interval_time . 'bfp' );
			$wpdb->query(
				"INSERT INTO " . SPBC_TBL_TC_LOG . " SET
				id = '$id',
				log_type = 1,
				ip = '$current_ip',
				entries = 1,
				interval_start = $interval_time
			ON DUPLICATE KEY UPDATE
				ip = ip,
				entries = entries + 1,
				interval_start = $interval_time;"
			);
		}

	}

}