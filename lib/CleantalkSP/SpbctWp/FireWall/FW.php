<?php

namespace CleantalkSP\SpbctWP\Firewall;

use CleantalkSP\SpbctWp\API;
use CleantalkSP\SpbctWP\DB;
use CleantalkSP\SpbctWP\Helper;
use CleantalkSP\Variables\Cookie;
use CleantalkSP\Variables\Get;
use CleantalkSP\Variables\Server;

class FW extends \CleantalkSP\SpbctWP\Firewall\FirewallModule {
	
	public $module_name = 'FW';
	
	public $data_table__common = '';
	public $data_table__personal = '';
	public $data_table__personal_countries = '';
	
	/**
	 * @var bool
	 */
	protected $test;
	
	// Additional params
	protected $api_key = false;
	protected $set_cookies = false;
	
	protected $real_ip;
	protected $debug;
	protected $debug_data = '';
	
	/**
	 * FireWall_module constructor.
	 * Use this method to prepare any data for the module working.
	 *
	 * @param array $params
	 */
	public function __construct( $params = array() ){
		
		parent::__construct( $params );
		
	}
	
	/**
	 * @param $ips
	 */
	public function ip__append_additional( &$ips ){
		
		$this->real_ip = isset( $ips['real'] ) ? $ips['real'] : null;
		
		if( isset( $this->state->settings['spbc_key'] ) && Get::get('spbct_test') == md5( $this->state->settings['spbc_key'] ) ){
			$ip_type = Helper::ip__validate( Get::get('spbct_test_ip') );
			$test_ip = $ip_type == 'v6' ? Helper::ip__v6_normalize( Get::get('spbct_test_ip') ) : Get::get('spbct_test_ip');
			if($ip_type) {
				$ips['test']   = $test_ip;
				$this->test_ip = $test_ip;
				$this->test    = true;
			}
		}
	}
	
	/**
	 * Check every IP using FireWall data table.
	 *
	 * @return array
	 */
	public function check() {
		
		$results = array();
		
		foreach( $this->ip_array as $ip_origin => $current_ip ) {
			
			$ip_type = Helper::ip__validate($current_ip);
			
			// IPv4 query
			if( $ip_type && $ip_type == 'v4' ){
				
				$current_ip_v4 = sprintf( "%u", ip2long( $current_ip ) );
				for ( $needles = array(), $m = 6; $m <= 32; $m ++ ) {
					$mask      = str_repeat( '1', $m );
					$mask      = str_pad( $mask, 32, '0' );
					$needles[] = sprintf( "%u", bindec( $mask & base_convert( $current_ip_v4, 10, 2 ) ) );
				}
				$needles = array_unique( $needles );
				
				$query = '(
					SELECT 0 AS is_personal, 1 AS is_ip, status, country_code, network, mask
					FROM ' . $this->data_table__common . '
					WHERE
						network IN (' . implode( ',', $needles ) . ')
						AND network = ' . $current_ip_v4 . ' & mask
						AND country_code = "0"
				) UNION (
					SELECT 1 AS is_personal, 1 AS is_ip, status, 0 AS country_code, network, mask
					FROM ' . $this->data_table__personal . '
					WHERE
						network IN (' . implode( ',', $needles ) . ')
						AND network = ' . $current_ip_v4 . ' & mask
				) UNION (
					SELECT 1 AS is_personal, 0 AS is_ip, tbl_private.status, country_code, network, mask
					FROM ' . $this->data_table__personal_countries . ' AS tbl_private
					RIGHT JOIN ' . $this->data_table__common . ' AS tbl_common USING(country_code)
					WHERE
						network IN (' . implode( ',', $needles ) . ')
						AND network = ' . $current_ip_v4 . ' & mask
						AND tbl_private.status IS NOT NULL
				)';
				
				$db_results = $this->db->fetch_all( $query, ARRAY_A );
				
			}
			
			// In base
			if( ! empty( $db_results ) ) {
				
				foreach( $db_results as $entry ) {
					
					$result_entry = array(
						'module' => $this->module_name,
						'ip' => $current_ip,
						'is_personal' => (int)$entry['is_personal'],
						'country_code' => $entry['country_code'],
						'network' => $entry['network'],
						'mask' => $entry['mask'],
					);
					
					switch ( $entry['status'] ) {
						case 2:	 $result_entry = array_merge( $result_entry, array('status' => 'PASS_BY_TRUSTED_NETWORK', ) ); break;
						case 1:	 $result_entry = array_merge( $result_entry, array('status' => 'PASS_BY_WHITELIST', ) );       break;
						case 0:	 $result_entry = array_merge( $result_entry, array('status' => 'DENY', ) );                    break;
						case -1: $result_entry = array_merge( $result_entry, array('status' => 'DENY_BY_NETWORK', ) );         break;
						case -2: $result_entry = array_merge( $result_entry, array('status' => 'DENY_BY_DOS', ) );             break;
						case -3: $result_entry = array_merge( $result_entry, array('status' => 'DENY_BY_SEC_FW', ) );          break;
						case -4: $result_entry = array_merge( $result_entry, array('status' => 'DENY_BY_SPAM_FW', ) );         break;
					}
					
					$results[ $ip_origin ] = $result_entry;
				}
				
				// Not in base
			}else {
				
				$results[ $ip_origin ] = array(
					'module' => $this->module_name,
					'ip' => $current_ip,
					'is_personal' => false,
					'country_code' => null,
					'network' => null,
					'mask' => null,
					'status' => 'PASS',
				);
				
			}
			
		}
		
		return $results;
		
	}
	
	/**
	 * Shows DIE page.
	 * Stops script executing.
	 *
	 * @param $result
	 */
	public function _die( $result ){
		
		// Common actions for all modules
		parent::_die( $result );
		
		// Adding block reason
		switch( $result['status'] ){
			case 'DENY':                $reason = __('Blacklisted', 'security-malware-firewall');                      break;
			case 'DENY_BY_NETWORK':	    $reason = __('Hazardous network', 'security-malware-firewall');	               break;
			case 'DENY_BY_DOS':         $reason = __('Blocked by DoS prevention system', 'security-malware-firewall'); break;
			case 'DENY_BY_WAF_XSS':	    $reason = __('Blocked by Web Application Firewall: XSS attack detected.',    'security-malware-firewall'); break;
			case 'DENY_BY_WAF_SQL':	    $reason = __('Blocked by Web Application Firewall: SQL-injection detected.', 'security-malware-firewall'); break;
			case 'DENY_BY_WAF_EXPLOIT':	$reason = __('Blocked by Web Application Firewall: Exploit detected.',       'security-malware-firewall'); break;
			case 'DENY_BY_WAF_FILE':    $reason = __('Blocked by Web Application Firewall: Malicious files upload.', 'security-malware-firewall'); break;
			case 'DENY_BY_BFP':         $reason = __('Blocked by BruteForce Protection: Too many invalid logins.',   'security-malware-firewall'); break;
			default :                   $reason = __('Blacklisted', 'security-malware-firewall');                      break;
		}
		
		if( $this->die_page__file ){
			
			$die_page_template = file_get_contents($this->die_page__file );

            $status = $result['status'] == 'PASS_SFW__BY_WHITELIST' ? '1' : '0';
            $cookie_val = md5( $result['ip'] . $this->api_key ) . $status;

			// Translation
			$replaces = array(
				'{TITLE}' => __('Blocked: Security by CleanTalk', 'security-malware-firewall'),
				'{TEST_TITLE}' => Get::get('spbct_test')
					? __('This is the testing page for Security FireWall', 'security-malware-firewall')
					: '',
				'{REASON}' => $reason,
				'{GENERATED_TIMESTAMP}' => time(),
				'{FALSE_POSITIVE_WARNING}' => __('Maybe you\'ve been blocked by a mistake. Please refresh the page (press CTRL + F5) or try again later.', 'security-malware-firewall'),
				
				
				'{REMOTE_ADDRESS}'                 => $result['ip'],
				'{SERVICE_ID}'                     => $this->state->data['service_id'],
				'{HOST}'                           => Server::get( 'HTTP_HOST' ),
				'{GENERATED}'                      => '<h2 class="second">The page was generated at '.date("D, d M Y H:i:s"). '</h2>',
			);
			
			foreach( $replaces as $place_holder => $replace ){
				$die_page_template = str_replace( $place_holder, $replace, $die_page_template );
			}
			
			wp_die($die_page_template, "Blacklisted", Array('response'=>403));
			
		}else{
			wp_die("IP BLACKLISTED. Blocked by Security Firewall " . $result['ip'], "Blacklisted", Array('response'=>403));
		}
		
	}
	
	/**
	 * Sends and wipe SFW log
	 *
	 * @param $db
	 * @param $log_table
	 * @param string $ct_key API key
	 *
	 * @return array|bool array('error' => STRING)
	 */
	public static function send_log( $db, $log_table, $ct_key ) {
		
		//Getting logs
		$query = 'SELECT * FROM ' . $log_table . ' LIMIT ' . SPBC_SELECT_LIMIT . ';';
		$db->fetch_all( $query );
		
		if( count( $db->result ) ){
			
			//Compile logs
			$data = array();
			foreach ( $db->result as $key => $value ) {
				
				//Compile log
				$to_data = array(
					'datetime'         => date( 'Y-m-d H:i:s', $value['entry_timestamp'] ),
					'page_url'         => $value['page_url'],
					'visitor_ip'       => Helper::ip__validate( $value['ip_entry'] ) == 'v4' ? (int) sprintf( '%u', ip2long( $value['ip_entry'] ) ) : (string) $value['ip_entry'],
					'http_user_agent'  => $value['http_user_agent'],
					'request_method'   => $value['request_method'],
					'x_forwarded_for'  => $value['x_forwarded_for'],
					'matched_networks' => $value['network'] ? $value['network'] . '/' . $value['mask'] : NULL,
					'matched_country'  => $value['country_code'],
					'is_personal'      => $value['is_personal'],
					'hits'             => (int) $value['requests'],
				);
				
				// Legacy
				switch($value['status']){
					case 'PASS_BY_TRUSTED_NETWORK': $to_data['status_efw'] = 3;  break;
					case 'PASS_BY_WHITELIST':       $to_data['status_efw'] = 2;  break;
					case 'PASS':                    $to_data['status_efw'] = 1;  break;
					case 'DENY':                    $to_data['status_efw'] = 0;  break;
					case 'DENY_BY_NETWORK':         $to_data['status_efw'] = -1; break;
					case 'DENY_BY_DOS':             $to_data['status_efw'] = -2; break;
					case 'DENY_BY_WAF_XSS':         $to_data['status_efw'] = -3; $to_data['waf_comment'] = $value['pattern']; break;
					case 'DENY_BY_WAF_SQL':         $to_data['status_efw'] = -4; $to_data['waf_comment'] = $value['pattern']; break;
					case 'DENY_BY_WAF_FILE':        $to_data['status_efw'] = -5; $to_data['waf_comment'] = $value['pattern']; break;
					case 'DENY_BY_WAF_EXPLOIT':     $to_data['status_efw'] = -6; $to_data['waf_comment'] = $value['pattern']; break;
					case 'DENY_BY_BFP':             $to_data['status_efw'] = -7; break;
					case 'DENY_BY_SEC_FW':          $to_data['status_efw'] = -8; break;
					case 'DENY_BY_SPAM_FW':         $to_data['status_efw'] = -9; break;
				}
				
				switch($value['status']){
					case 'PASS_BY_TRUSTED_NETWORK': $to_data['status'] = 3;  break;
					case 'PASS_BY_WHITELIST':       $to_data['status'] = 2;  break;
					case 'PASS':                    $to_data['status'] = 1;  break;
					case 'DENY':                    $to_data['status'] = 0;  break;
					case 'DENY_BY_NETWORK':         $to_data['status'] = -1; break;
					case 'DENY_BY_DOS':             $to_data['status'] = -2; break;
					case 'DENY_BY_WAF_XSS':         $to_data['status'] = -3; $to_data['waf_comment'] = $value['pattern']; break;
					case 'DENY_BY_WAF_SQL':         $to_data['status'] = -4; $to_data['waf_comment'] = $value['pattern']; break;
					case 'DENY_BY_WAF_FILE':        $to_data['status'] = -5; $to_data['waf_comment'] = $value['pattern']; break;
					case 'DENY_BY_WAF_EXPLOIT':     $to_data['status'] = -6; $to_data['waf_comment'] = $value['pattern']; break;
					case 'DENY_BY_BFP':             $to_data['status'] = -7; break;
					case 'DENY_BY_SEC_FW':          $to_data['status'] = -8; break;
					case 'DENY_BY_SPAM_FW':         $to_data['status'] = -9; break;
				}
				
				$data[] = $to_data;
				
			} unset($key, $value, $result, $to_data);
			
			//Sending the request
			$result = API::method__security_logs__sendFWData( $ct_key, $data );
			
			//Checking answer and deleting all lines from the table
			if( empty( $result['error'] ) ){
				
				if( $result['rows'] == count( $data ) ){
					$db->execute( "TRUNCATE TABLE " . $log_table . ";" );
					return count($data);
				}else
					return array( 'error' => 'SENT_AND_RECEIVED_LOGS_COUNT_DOESNT_MACH' );
			}else
				return $result;
		}else
			return $result = array( 'error' => 'NO_LOGS_TO_SEND' );
	}
	
	/**
	 * Gets multifile with data to update Firewall.
	 *
	 * @param DB $db Database handler
	 * @param string $db__table__data
	 * @param string $spbc_key
	 *
	 * @return array
	 */
	static public function firewall_update__get_multifiles( $db, $db__table__data, $spbc_key ){
		
		// Getting remote file name
		$result = API::method__security_firewall_data_file( $spbc_key, 'multifiles' );
		
		if(empty($result['error'])){
			
			if( !empty($result['file_url']) ){
				
				$file_url = $result['file_url'];
				
				$response_code = Helper::http__request__get_response_code($file_url);
				
				if( empty( $response_code['error'] ) ){
					
					if( $response_code === 200 || $response_code === 501 ){
							
						if( preg_match( '/multifiles/', $file_url ) ){
							
							$gz_data = Helper::http__request__get_content($file_url);
							
							if( empty( $gz_data['error'] ) ){
								
								if(Helper::get_mime_type($gz_data, 'application/x-gzip')){
									
									if(function_exists('gzdecode')) {
										
										$data = gzdecode( $gz_data );
										
										if($data !== false){
											
											$result__clear_db = self::clear_data_table( $db );
											
											if( empty( $result__clear_db['error'] ) ){
											
												$lines = Helper::buffer__parse__csv($data);
												
												return array(
													'multifile_url' => $file_url,
													'file_urls'     => $lines,
												);
												
											}else
												return $result__clear_db;
										}else
											return array('error' => 'COULDNT_UNPACK');
									}else
										return array('error' => 'Function gzdecode not exists. Please update your PHP to version 5.4');
								}else
									return array('error' => 'WRONG_REMOTE_FILE');
							}else
								return array('error' => 'COULD_NOT_GET_MULTIFILE: ' . $gz_data['error'] );
						}else
							return array('error' => 'WRONG_REMOTE_FILE');
					} else
						return array('error' => 'NO_REMOTE_FILE_FOUND');
				}else
					return array('error' => 'MULTIFILE_COULD_NOT_GET_RESPONSE_CODE: '. $response_code['error'] );
			}else
				return array('error' => 'BAD_RESPONSE');
		}else
			return $result;
	}
	
	/**
	 * Writes entries from remote files to Firewall database.
	 *
	 * @param DB $db database handler
	 * @param string $data_table__common Table name with common data
	 * @param string $data_table__personal Table name with personal IPs
	 * @param string $data_table__personal_countries Table name with with personal country list
	 * @param string $file_url
	 *
	 * @return array|bool|int|mixed|string
	 */
	static public function firewall_update__write_to_db( $db, $data_table__common, $data_table__personal, $data_table__personal_countries, $file_url ){
		
		$response_code = Helper::http__request__get_response_code( $file_url );
		
		if( empty( $response_code['error'] ) ){
			
			if( $response_code === 200 || $response_code === 501 ){ // Check if it's there
				
				$gz_data = Helper::http__request__get_content( $file_url );
				
				if( empty( $gz_data['error'] ) ){
					
					if( Helper::get_mime_type( $gz_data, 'application/x-gzip' ) ){
						
						if( function_exists('gzdecode') ) {
							
							$data = gzdecode( $gz_data );
							
							if( $data !== false ){
								
								$lines = Helper::buffer__parse__csv( $data );
								
							}else
								return array( 'error' => 'COULDNT_UNPACK' );
						}else
							return array( 'error' => 'Function gzdecode not exists. Please update your PHP to version 5.4' );
					}else
						return array( 'error' => 'Wrong mime type');
				}else
					return array('error' => 'COULD_NOT_GET_MULTIFILE: ' . $gz_data['error'] );
				
				reset( $lines );
				
				for( $count_result = 0; current($lines) !== false; ) {
					
					for ( $i=0; SPBC_WRITE_LIMIT !== $i && current($lines) !== false; $i++, $count_result++, next($lines) ) {
						
						$entry = current($lines);
						
						if ( empty( $entry ) ) {
							continue;
						}
						if ( SPBC_WRITE_LIMIT !== $i ) {
							
							$network   = $entry[0];
							$mask = $entry[1];
							// $comment = $entry[2]; // Comment from user
							$status      = isset( $entry[3] ) ? $entry[3] : 0;
							$is_personal = isset( $entry[4] ) ? intval( $entry[4] ) : 0;
							$country     = isset( $entry[5] ) ? trim( $entry[5], '"' ) : 0;
							
							// IPv4
							if ( is_numeric( $network ) ) {
								
								$mask = sprintf(
									'%u',
									bindec( str_pad( str_repeat( '1', $mask ), 32, 0, STR_PAD_RIGHT ) )
								);
								
								if( $country || ! $is_personal ) {
									$unique = md5( $network . $mask . $country );
									$sql__common[] = "('$unique', $network, $mask, $status, '$country')";
								}
								if( $is_personal && $country )
									$sql__personal_country[] = "('$country',$status)";
								
								if( $is_personal && ! $country )
									$sql__personal_ip[] = "($network, $mask, $status)";
								
							}
						}
					}
					
					// Insertion to common table
					$sql_result__common___result = $db->execute(
						'INSERT INTO ' . $data_table__common
						. ' (id, network, mask, status, country_code) '
						. ' VALUES '
						. implode( ',', $sql__common)
						. ' ON DUPLICATE KEY UPDATE'
						. ' network=network'
						. ';'
					);
					
					// @todo $db->execute() could return false on good query
					// because of $wpdb->query()
//					if( $sql_result__common___result === false )
//						return array( 'error' => 'COULD_NOT_WRITE_TO_DB 1: ' . $db->get_last_error() );
					
					// Insertion to personal IPs table
					if( ! empty( $sql__personal_ip ) ) {
						$sql_result__common___result = $db->execute(
							'INSERT INTO ' . $data_table__personal . ' (network,mask,status) VALUES '
							. implode( ',', $sql__personal_ip ) . ';'
						);
						unset( $sql__personal_ip );
						if ( $sql_result__common___result === false )
							return array( 'error' => 'COULD_NOT_WRITE_TO_DB 2: ' . $db->get_last_error() );
					}
					
					// Insertion to personal countries table
					if( ! empty( $sql__personal_country ) ){
						$sql__personal_country = array_unique( $sql__personal_country ); // Filtering duplicate entries
						$sql_result__common___result = $db->execute(
							'INSERT INTO ' . $data_table__personal_countries . '(country_code,status) VALUES '
							. implode( ',', $sql__personal_country) . ';'
						);
						unset( $sql__personal_country );
						if( $sql_result__common___result === false )
							return array( 'error' => 'COULD_NOT_WRITE_TO_DB 3: ' . $db->get_last_error() );
					}
				}
				
				return $count_result;
				
			}else
				return array('error' => 'NO_REMOTE_FILE_FOUND');
		}else
			return array('error' => 'FILE_COULD_NOT_GET_RESPONSE_CODE: '. $response_code['error'] );
	}
	
	/**
	 * Adding local exclusions to to the FireWall database.
	 *
	 * @param DB $db database handler
	 * @param string $db__table__data table name
	 * @param array $exclusions
	 *
	 * @return array|bool|int|mixed|string
	 */
	static public function firewall_update__write_to_db__exclusions( $db, $db__table__data, $exclusions = array() ){
		
		$query = 'INSERT INTO `' . $db__table__data . '` (network,mask,status) VALUES ';
		
		//Exclusion for servers IP (SERVER_ADDR)
		if ( Server::get('HTTP_HOST') ) {
			$exclusions[] = Helper::dns__resolve( Server::get('HTTP_HOST') );
			$exclusions[] = '127.0.0.1';
			foreach ( $exclusions as $exclusion ) {
				if ( Helper::ip__validate( $exclusion ) && sprintf( '%u', ip2long( $exclusion ) ) ) {
					$query .= '(' . sprintf( '%u', ip2long( $exclusion ) ) . ', ' . sprintf( '%u', bindec( str_repeat( '1', 32 ) ) ) . ', 2),';
				}
			}
		}
		
		$sql_result = $db->execute( substr( $query, 0, - 1 ) . ';' );
		
		if( $sql_result === false )
			return array( 'error' => 'COULD_NOT_WRITE_TO_DB 4: ' . $db->get_last_error() );
		
		return count( $exclusions );
		
	}
	
	/**
	 * Clear SFW table
	 *
	 * @param $db
	 * @param $db__table__data
	 *
	 * @return string[]
	 */
	public static function clear_data_table( $db ) {
		
		// Clear personal tables
		$db->execute('TRUNCATE TABLE `'. SPBC_TBL_FIREWALL_DATA__IPS .'`;');
		$db->execute('TRUNCATE TABLE `'. SPBC_TBL_FIREWALL_DATA__COUNTRIES .'`;');
		
		// Clean common table from unused countries
		// Get all personal country tables
		$res = $db->fetch_all('SHOW TABLES LIKE "%spbc_firewall__personal_countries%"');
		
		// Get all countries for all blogs
		foreach( $res as $tbl )
			$sql[] = '(SELECT country_code FROM ' . current( $tbl ) . ')';
		$res = $db->fetch_all( implode( ' UNION ', $sql ) );
		
		// Delete all IP/mask for every other countries no in list
		$in[] = "'0'";
		foreach( $res as $country_code )
			$in[] = "'".current( $country_code )."'";
		$db->execute( 'DELETE FROM ' . SPBC_TBL_FIREWALL_DATA . ' WHERE country_code NOT IN (' . implode( ',', $in ) . ')');
	}
}