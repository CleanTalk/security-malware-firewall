<?php

namespace CleantalkSP\SpbctWP\Firewall;

use CleantalkSP\SpbctWp\API;
use CleantalkSP\SpbctWP\DB;
use CleantalkSP\SpbctWP\Helper;
use CleantalkSP\Variables\Cookie;
use CleantalkSP\Variables\Get;
use CleantalkSP\Variables\Server;

class BFP extends \CleantalkSP\SpbctWP\Firewall\FirewallModule {
	
	public $module_name = 'BFP';
	
	protected $is_logged_in    = false;
	protected $is_login_page    = false;
	protected $allowed_interval = 900;
	protected $bf_limit = 5;
	protected $block_period = 3600;
	
	protected $chance_to_clean = 100;
	
	protected $api_key = false;
	
	/**
	 * FireWall_module constructor.
	 * Use this method to prepare any data for the module working.
	 *
	 * @param array $params
	 */
	public function __construct( $params = array() ){
		
		parent::__construct( $params );
		
	}
	
	public function check() {
		
		$results = array();
		
		if( $this->is_login_page && ! $this->is_logged_in  ) {
			
			$time = time();
			
			foreach( $this->ip_array as $ip_origin => $current_ip ){
				$query = "SELECT SUM(entries) as total_count
				         FROM `" . SPBC_TBL_TC_LOG . "`
				         WHERE ip = '$current_ip'
				         AND log_type = 1
				         AND interval_start < '$time';";
				$this->result[$current_ip] = $this->db->fetch( $query, OBJECT );
				
				if(
					! empty( $this->result ) &&
					! is_null( $this->result[$current_ip]->total_count ) &&
					$this->result[$current_ip]->total_count >= $this->bf_limit
				)
					$results[] = array( 'ip' => $current_ip, 'is_personal' => false, 'status' => 'DENY_BY_BFP' );
			}
		}
		
		foreach( $results as &$result ){
			$result = array_merge(
				$result,
				array(
					'ip'          => end( $this->ip_array ),
					'is_personal' => false,
					'module'      => 'BFP',
				)
			);
		}
		
		return $results;
		
	}
	
	protected function middle_action( $result ){
		$this->clear_table();
		add_action( 'apbct_log_wrong_auth',  array( $this, 'update_logs' ) );
	}
	
	public function update_logs() {
		
		global $wpdb;
		
		foreach( $this->ip_array as $ip_origin => $current_ip ){
			
			$interval_time = Helper::time__get_interval_start( $this->allowed_interval );
			
			$id = md5( $current_ip . 'bfp' );
			$wpdb->query(
				"INSERT INTO " . SPBC_TBL_TC_LOG . " SET
				id = '$id',
				log_type = 1,
				ip = '$current_ip',
				entries = 1,
				interval_start = $interval_time
			ON DUPLICATE KEY UPDATE
				ip = ip,
				entries = entries + 1,
				interval_start = $interval_time;"
			);
		}
		
	}
	
	private function clear_table() {
		
		if( rand( 0, 1000 ) < $this->chance_to_clean ){
			$interval_start = Helper::time__get_interval_start( $this->block_period );
			$this->db->execute(
				'DELETE
				FROM ' . SPBC_TBL_TC_LOG . '
				WHERE interval_start < '. $interval_start .'
				AND log_type  = 1
				LIMIT 100000;'
			);
		}
	}
	
	
}