<?php

namespace CleantalkSP\Fpdf;

use CleantalkSP\SpbctWP\DB;

class Pdf extends Fpdf
{
    public function Header() // phpcs:ignore PSR1.Methods.CamelCapsMethodName.NotCamelCaps
    {
        // Logo
        $this->Image(__DIR__ . DIRECTORY_SEPARATOR . 'img' . DIRECTORY_SEPARATOR . 'logo.png', 10, 6, 20);

        $this->SetFont('Times', 'B', 25);

        // Move to the right
        $this->Cell(80);

        // Title
        $this->Cell(30, 10, esc_html__('Scanner logs', 'security-malware-firewall'), 0, 0, 'C');

        // Line break
        $this->Ln(20);

        $this->SetFont('Times', 'B', 15);
        $this->Cell(0, 0, esc_html__('CleanTalk Inc', 'security-malware-firewall'), 0, 1, 'L');

        $this->Ln(20);
    }

    public function LoadData() // phpcs:ignore PSR1.Methods.CamelCapsMethodName.NotCamelCaps
    {
        global $spbc;

        $data = [
        [
            "The last scan of this website was on",
            date('M d Y H:i:s', $spbc->data['scanner']['last_scan'])
        ],
        [
            "Site URL",
            site_url()
        ],
        [
            "Duration of scanning",
            $spbc->data['scanner']['scan_finish_timestamp'] - $spbc->data['scanner']['scan_start_timestamp'] . ' sec'
        ],
        [
            "Website total files",
            isset($spbc->data['scanner']['files_total']) ? $spbc->data['scanner']['files_total'] : $spbc->data['scanner']['last_scan_amount']
        ]
        ];

        return $data;
    }

    public function scanTable($header, $data)
    {
        $this->SetFont('Times', 'B', 12);

        // Header
        $this->Cell(70, 8, $header[0], 1);
        $this->Cell(120, 8, $header[1], 1);

        $this->Ln();

        $this->SetFont('Times', '', 12);

        // Data
        foreach ($data as $row) {
            $this->Cell(70, 7, $row[0], 1);
            $this->Cell(120, 7, $row[1], 1);
            $this->Ln();
        }
    }

    public function scanHeuristic()
    {
        $txt = DB::getInstance()->fetchAll(
            'SELECT id, content FROM ' . SPBC_TBL_SCAN_RESULTS_LOG
            . ' WHERE content LIKE "%Heuristic analysis%"'
            . ' ORDER BY id DESC'
            . ' LIMIT 1'
        );

        $txt = explode(';', strip_tags($txt[0]['content']));

        $this->SetFont('Times', 'B', 15);

        $this->Cell(80);
        $this->Cell(30, 10, esc_html__('Heuristic analysis', 'security-malware-firewall'), 0, 0, 'C');

        $this->Ln();

        $this->SetFont('Times', '', 12);

        foreach ($txt as $k => $v) {
            $this->MultiCell(150, 4, $v);
            $this->Ln();
        }
    }

    public function scanSignature()
    {
        $txt = DB::getInstance()->fetchAll(
            'SELECT id, content FROM ' . SPBC_TBL_SCAN_RESULTS_LOG
            . ' WHERE content LIKE "%Signature analysis%"'
            . ' ORDER BY id DESC'
            . ' LIMIT 1'
        );

        $txt = explode(';', strip_tags($txt[0]['content']));

        $this->SetFont('Times', 'B', 15);

        $this->Cell(80);
        $this->Cell(30, 10, esc_html__('Signature analysis', 'security-malware-firewall'), 0, 0, 'C');

        $this->Ln();

        $this->SetFont('Times', '', 12);

        foreach ($txt as $k => $v) {
            $this->MultiCell(150, 4, $v);
            $this->Ln();
        }
    }

    public function critical()
    {
        $txt = DB::getInstance()->fetchAll(
            "SELECT `path` FROM " . SPBC_TBL_SCAN_FILES
            . " WHERE severity = 'CRITICAL'"
        );

        $this->SetFont('Times', 'B', 15);

        $this->Cell(80);
        $this->Cell(30, 10, esc_html__('Critical files', 'security-malware-firewall'), 0, 0, 'C');

        $this->Ln();

        $this->SetFont('Times', '', 12);

        foreach ($txt as $k => $v) {
            $this->MultiCell(170, 7, $v['path'], 1);
            $this->Ln();
        }
    }
}
