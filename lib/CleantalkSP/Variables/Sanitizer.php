<?php

namespace CleantalkSP\Variables;

class Sanitizer {
    /**
     * Runs sanitizing process for input
     *
     * Now contains no filters: xss, url
     *
     * @param mixed $variable   Input to sanitize
     * @param string $filter_name Sanitizing filter name
     *
     * @return string
     */
    public static function sanitize($variable, $filter_name)
    {
        switch( $filter_name ){

            // XSS. Recursive.
            case 'xss':
                return self::cleanXss($variable);

            // URL
            case 'url':
                return self::cleanUrl($variable);

            // Simple string
            case 'word':
                return self::cleanWord($variable);

            case 'int':
                return self::cleanInt($variable);
        }

        return $variable;
    }

    /**
     * Simple method: clean xss
     */
    public static function cleanXss($variable)
    {
        $variable_filtered = preg_replace( '#[\'"].*?>.*?<#i', '', $variable );
        return $variable === $variable_filtered
            ? htmlspecialchars( $variable_filtered )
            : static::sanitize( $variable_filtered, 'xss');
    }

    /**
     * Simple method: clean url
     */
    public static function cleanUrl($variable)
    {
        return preg_replace( '#[^a-zA-Z0-9$\-_.+!*\'(),{}|\\^~\[\]`<>\#%";\/?:@&=.]#i', '', $variable );
    }

    /**
     * Simple method: clean word
     */
    public static function cleanWord($variable)
    {
        return preg_replace( '#[^a-zA-Z0-9_.\-,]#', '', $variable );
    }

    /**
     * Simple method: clean int
     */
    public static function cleanInt($variable)
    {
        return preg_replace( '#[^0-9.,]#', '', $variable );
    }
}