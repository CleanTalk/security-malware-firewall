<?php
/**
 * @package Security & Malware Firewall 
 * @version 1.0
 */
/*
Plugin Name: Security & Malware Firewall 
Plugin URI: https://wordpress.org/plugins/security-malware-firewall/ 
Description: The plugin temporary restricts attempts to login to WordPress backend. The restriction is rising for a few seconds if an account failed to login.  
Author: Denis Shagy
Version: 1.1.1
Author URI: https://cleantalk.org
*/

//
// To avoid issue with variable scope in activation hook.
// https://wordpress.org/support/topic/register_activation_hook-and-global-variables?replies=11
//
global $spbc_auth_logs_table_label;

$spbc_auth_logs_table_label = 'spbc_auth_logs';
$spbc_login_attempts_label = 'spbc_login_attempts'; 

$spbc_attempts_max_fails = 5; // Limit of failed attempts before restrict access to backend. 
$spbc_attempts_calc_period = 3600; // Time interval to count failed attempts. 
$spbc_attempts_sleep_usual = 3; // Give a delay before attempts to login.
$spbc_attempts_sleep_long = 10; // Give a delay before attempts to login.

register_activation_hook( __FILE__, 'spbc_activation' );
add_filter('authenticate', 'spbc_authenticate', 99, 3);

//
// Test an attempt to get authed in WordPress backend.
//
function spbc_authenticate($user, $username, $password) {
    global $spbc_login_attempts_label, $spbc_attempts_max_fails, $spbc_attempts_sleep_usual, $spbc_attempts_sleep_long;

    if(is_wp_error($user)) {

        $err_codes = $user->get_error_codes();
        if (in_array( 'incorrect_password', $err_codes )) {
            $spbc_login_attempts = get_option($spbc_login_attempts_label);
            if (is_array($spbc_login_attempts)) {
                
                if (isset($spbc_login_attempts[$username])) {
                    if ($spbc_login_attempts[$username]['attempts'] >= $spbc_attempts_max_fails) {
                        spbc_add_issue($username, $password, $spbc_login_attempts);
                        sleep ($spbc_attempts_sleep_long);
                    } else {
                        spbc_add_issue($username, $password, $spbc_login_attempts);
                    }
                } else {
                    spbc_add_issue($username, $password, $spbc_login_attempts, true);
                }
            } else {
                spbc_add_issue($username, $password, $spbc_login_attempts, true);
            }
            sleep ($spbc_attempts_sleep_usual);
        }
    }
    return $user;
}

// Adds a record to failed logins.
function spbc_add_issue($username, $password, $attempts, $new_issue = false) {
    global $spbc_login_attempts_label, $spbc_attempts_calc_period, $wpdb, $spbc_auth_logs_table_label;
    
    // Reset the data to avaoid PHP issues.
    if (!isset($attempts) || !count($attempts)) {
        $attempts = array();
    }
    
    if (isset($attempts[$username]['first_issue']) && time() - $attempts[$username]['first_issue'] > $spbc_attempts_calc_period) {
        $new_issue = true;
        unset($attempts[$username]);
    }

    $update_option = false;
    if ($new_issue) {
        $attempts[$username]['attempts'] = 1;
        $attempts[$username]['first_issue'] = time();
        $attempts[$username]['passwords'][] = md5($password);
        $update_option = true;
    } else {

        // Increase attempts only if new password failed.
        if (!in_array(md5($password), $attempts[$username]['passwords'])) {
            $attempts[$username]['attempts']++;
            $attempts[$username]['passwords'][] = md5($password);
            $update_option = true;
        }
    }
    
    if ($update_option) {
        update_option($spbc_login_attempts_label, $attempts);
        
        $auth_ip = null;
        if (function_exists( 'filter_var' )) {
            // The plugin doesn't use any IP from HTTP* headers, because these types of IPs can be spoofed.
            if (isset($_SERVER['REMOTE_ADDR']) && filter_var( $_SERVER['REMOTE_ADDR'], FILTER_VALIDATE_IP, FILTER_FLAG_IPV4 )) {
	            $auth_ip = $_SERVER['REMOTE_ADDR'];
            }
        }

        $spbc_auth_logs_table = $wpdb->prefix . $spbc_auth_logs_table_label;
        $values = array(
            'datetime' => date("Y-m-d H:s:i"), 
            'user_login' => $username,
            'event' => 'auth_failed',
            'auth_ip' => $auth_ip ? ip2long($auth_ip) : null 
        );
        $result = $wpdb->insert(
            $spbc_auth_logs_table,
            $values
        );
    }

    return null;
}

//
// A code during plugin activation.
//
function spbc_activation () {
    global $wpdb, $spbc_auth_logs_table_label;

    $spbc_auth_logs_table = $wpdb->prefix . $spbc_auth_logs_table_label;

    $sql = sprintf("CREATE TABLE IF NOT EXISTS `%s` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `datetime` datetime NOT NULL,
  `user_login` varchar(60) NOT NULL,
  `event` enum('login','logout','auth_failed') NOT NULL,
  `auth_ip` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `datetime` (`datetime`,`event`)
) ENGINE=MyISAM  DEFAULT CHARSET=latin1 AUTO_INCREMENT=1;",
        $spbc_auth_logs_table 
    ); 
    $wpdb->query($sql);
    return null;
}


?>
