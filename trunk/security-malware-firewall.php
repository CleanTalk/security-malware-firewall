<?php
/**
 * @package Security & Malware Firewall 
 * @version 1.0
 */
/*
Plugin Name: Security & Malware Firewall 
Plugin URI: https://wordpress.org/plugins/security-malware-firewall/ 
Description: The plugin temporary restricts attempts to login to WordPress backend. The restriction is rising for a few seconds if an account failed to login.  
Author: Denis Shagy
Version: 1.0.1
Author URI: https://cleantalk.org
*/

$spbc_login_attempts_label = 'spbc_login_attempts'; 

$spbc_attempts_max_fails = 5; // Limit of failed attempts before restrict access to backend. 
$spbc_attempts_calc_period = 3600; // Time interval to count failed attempts. 
$spbc_attempts_sleep_usual = 3; // Give a delay before attempts to login.
$spbc_attempts_sleep_long = 10; // Give a delay before attempts to login.

add_filter('authenticate', 'spbc_authenticate', 99, 3);

function spbc_authenticate($user, $username, $password) {
    global $spbc_login_attempts_label, $spbc_attempts_calc_period, $spbc_attempts_max_fails, $spbc_attempts_sleep_usual, $spbc_attempts_sleep_long;

    if(is_wp_error($user)) {

        $err_codes = $user->get_error_codes();
        if (in_array( 'incorrect_password', $err_codes )) {
            /*
            * TODO to version 1.1: Test the code to rise long delay between login attempts.
            *
            */
/*
            $spbc_login_attempts = get_option($spbc_login_attempts_label);
            if (is_array($spbc_login_attempts)) {
                
                if (isset($spbc_login_attempts[$username])) {
                    if ($spbc_login_attempts[$username]['attempts'] >= $spbc_attempts_max_fails) {
                        sleep ($spbc_attempts_sleep_long);
                    } else {
                        spbc_add_issue($username, $password, $spbc_login_attempts);
                    }
                } else {
                    spbc_add_issue($username, $password, $spbc_login_attempts, true);
                }
            } else {
                spbc_add_issue($username, $password, $spbc_login_attempts, true);
            }
*/
            sleep ($spbc_attempts_sleep_usual);
        }
    }
    return $user;
}

// Adds a record to failed logins.
function spbc_add_issue($username, $password, $attempts, $new_issue = false) {
    global $spbc_login_attempts_label, $spbc_attempts_calc_period;
    
    // Reset the data to avaoid PHP issues.
    if (!isset($attempts) || !count($attempts)) {
        $attempts = array();
    }
    
    $update_option = false;
    if ($new_issue) {
        $attempts[$username]['attempts'] = 1;
        $attempts[$username]['first_issue'] = time();
        $attempts[$username]['passwords'][] = md5($password);
        $update_option = true;
    } else {

        // Increase attempts only if new password failed.
        if (!in_array(md5($password), $attempts[$username]['passwords'])) {
            $attempts[$username]['attempts']++;
            $attempts[$username]['passwords'][] = md5($password);
            $update_option = true;
        }
    }
    
    if ($update_option) {
        update_option($spbc_login_attempts_label, $attempts);
    }

    return null;
}


?>
