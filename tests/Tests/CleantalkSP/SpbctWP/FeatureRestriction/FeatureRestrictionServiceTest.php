<?php

// Including namespaces for used classes for the purpose of brevity
namespace Tests\CleantalkSP\SpbctWP\FeatureRestriction;

use CleantalkSP\SpbctWP\FeatureRestriction\FeatureRestriction;
use CleantalkSP\SpbctWP\FeatureRestriction\FeatureRestrictionService;
use CleantalkSP\SpbctWP\State;
use PHPUnit\Framework\TestCase;

class FeatureRestrictionServiceTest extends TestCase
{
    protected $state;
    protected $featureRestrictionService;

    public function setUp()
    {
        $this->state = $this->createMock(State::class);
        $this->featureRestrictionService = new FeatureRestrictionService();
    }

    /**
     * @test
     * Description: When SPBC state key is not valid and current feature restriction is on key fail
     */
    public function getState_whenSpbcKeyIsNotOkayAndCurrentFeatureRestrictionOnKeyFail()
    {
        $this->state->key_is_ok = false;

        $featureRestriction = new FeatureRestriction('firewall_log', true, true);
        $this->featureRestrictionService->restrictions[] = $featureRestriction;

        $result = $this->featureRestrictionService->getState($this->state, 'firewall_log');

        $this->assertFalse($result->is_active);
    }

    /**
     * @test
     * Description: When SPBC state key is valid and moderate state is off and current feature restriction is on moderate fail
     */
    public function getState_whenSpbcKeyIsOkayAndModerateStateIsOffAndOnModerateFail()
    {
        $this->state->key_is_ok = true;
        $this->state->moderate = false;
        $this->state->notice_show = false;

        $featureRestriction = new FeatureRestriction('firewall_log', true, true);
        $this->featureRestrictionService->restrictions[] = $featureRestriction;

        $result = $this->featureRestrictionService->getState($this->state, 'firewall_log');

        $this->assertFalse($result->is_active);
    }

    public function testSPBCRestrictions()
    {
        $spbc = new State(
            'spbc',
            array(
                'settings',
                'data',
                'remote_calls',
                'debug',
                'installing',
                'errors',
                'fw_stats'
            ),
            is_multisite(),
            is_main_site()
        );
        $spbc->moderate = 1;
        $spbc->key_is_ok = 1;
        $this->assertTrue($spbc->feature_restrictions->getState($spbc, 'firewall_log')->is_active);
        $this->assertTrue($spbc->feature_restrictions->getState($spbc, 'security_log')->is_active);
        $this->assertTrue($spbc->feature_restrictions->getState($spbc, 'scanner')->is_active);
        $this->assertTrue($spbc->feature_restrictions->getState($spbc, 'fswatcher')->is_active);

        $spbc->moderate = 0;
        $this->assertFalse($spbc->feature_restrictions->getState($spbc, 'firewall_log')->is_active);
        $this->assertFalse($spbc->feature_restrictions->getState($spbc, 'security_log')->is_active);
        $this->assertFalse($spbc->feature_restrictions->getState($spbc, 'scanner')->is_active);
        $this->assertFalse($spbc->feature_restrictions->getState($spbc, 'fswatcher')->is_active);


        $spbc->moderate = 1;
        $spbc->key_is_ok = 0;
        $this->assertFalse($spbc->feature_restrictions->getState($spbc, 'firewall_log')->is_active);
        $this->assertFalse($spbc->feature_restrictions->getState($spbc, 'security_log')->is_active);
        $this->assertFalse($spbc->feature_restrictions->getState($spbc, 'scanner')->is_active);
        $this->assertFalse($spbc->feature_restrictions->getState($spbc, 'fswatcher')->is_active);

        //info html
        $this->assertNotEmpty($spbc->feature_restrictions->getState($spbc, 'firewall_log')->info_html);
        $this->assertNotEmpty($spbc->feature_restrictions->getState($spbc, 'security_log')->info_html);
        $this->assertNotEmpty($spbc->feature_restrictions->getState($spbc, 'scanner')->info_html);
        $this->assertNotEmpty($spbc->feature_restrictions->getState($spbc, 'fswatcher')->info_html);


        //wrong name
        $this->expectException(\Exception::class);
        $this->assertTrue($spbc->feature_restrictions->getState($spbc, 'firewall')->is_active);
        $this->assertEmpty($spbc->feature_restrictions->getState($spbc, 'firewall')->info_html);
    }
}
