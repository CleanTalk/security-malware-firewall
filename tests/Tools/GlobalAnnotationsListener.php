<?php

namespace CleantalkSP\SpbctWP\Helpers;

use PHPUnit\Framework\Test;
use PHPUnit\Framework\TestCase;
use PHPUnit\Framework\TestListener;
use PHPUnit\Framework\TestListenerDefaultImplementation;

/**
 * Enables @env and @server annotations on test classes and methods.
 *
 * Examples:
 *
 * <code>
 * @env APP_ENV=bar
 * @server APP_DEBUG=1
 * @server FOO=
 * </code>
 */
class GlobalAnnotationsListener implements TestListener
{
    use TestListenerDefaultImplementation;

    private $server;

    private $env;

    public function startTest(Test $test): void
    {
        if ($test instanceof TestCase) {
            $this->backupGlobals();
            $this->readGlobalAnnotations($test);
        }
    }
    public function endTest(Test $test, float $time): void
    {
        $this->restoreGlobals();
    }

    private function backupGlobals(): void
    {
        $this->server = $_SERVER;
        $this->env = $_ENV;
    }

    private function restoreGlobals(): void
    {
        if (null !== $this->server) {
            $_SERVER = $this->server;
        }
        if (null !== $this->env) {
            $_ENV = $this->env;
        }
    }

    private function readGlobalAnnotations(TestCase $test): void
    {
        $globalVars = $this->parseGlobalAnnotations($test);
        if (!empty($globalVars['env'])) {
            foreach ($globalVars['env'] as $name => $value) {
                $_ENV[$name] = $value;
            }
        }
        if (!empty($globalVars['server'])) {
            foreach ($globalVars['server'] as $name => $value) {
                $_SERVER[$name] = $value;
            }
        }
    }

    private function parseGlobalAnnotations(TestCase $test): array
    {
        $annotations = $test->getAnnotations();
        $globalVarAnnotations = array_filter(
            array_merge_recursive($annotations['class'], $annotations['method']),
            function ($annotationName) {
                return in_array($annotationName, ['env', 'server']);
            },
            ARRAY_FILTER_USE_KEY
        );

        return array_map(function ($annotations) {
            return array_reduce($annotations, function ($carry, $annotation) {
                if (!strpos($annotation, '=')) {
                    $carry[$annotation] = '';
                } else {
                    list($name, $value) = explode('=', $annotation, 2);
                    $carry[$name] = $value;
                }
                return $carry;
            }, []);
        }, $globalVarAnnotations);
    }
}