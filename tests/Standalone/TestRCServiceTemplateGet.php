<?php

use CleantalkSP\SpbctWP\CleantalkSettingsTemplates;

class TestRCServiceTemplateGet extends PHPUnit\Framework\TestCase
{
    private $template_id;
    private $api_response_empty;
    private $api_response;
    private $api_response_custom;
    private $api_key;
    private $expected_result;

    protected function setUp()
    {
        $this->template_id = '1511';
        $this->api_response_empty = array();
        $this->api_response = array (
            0 =>
                array (
                    'template_id' => 1511,
                    'product_id' => 4,
                    'name' => "abc2",
                    'options_cloud' => '{"notify_admin_login":1,"auto_whitelist_owner_ip":1,"ct_in_list_db":1,"2fa_enable":0,"backend_logs_enable":1}',
                    'options_site' => '{"bfp__allowed_wrong_auths":"20","bfp__delay__1_fails":"0","bfp__delay__5_fails":"0","bfp__block_period__5_fails":"120","bfp__count_interval":"300","login_page_rename__enabled":"0","login_page_rename__name":"login","login_page_rename__redirect":"","there_was_signature_treatment":0,"fw__custom_message":"<p>TEST MSG</p>"}',
                    'created' => "2023-04-03 11:15:04",
                    'updated' => "2023-04-03 11:15:04",
                    'service_id_last_used' => null,
                    'user_id' => 767867,
                    'set_as_default' => 00,
                ),
        );
        $this->api_response_custom = $this->api_response;
        $this->api_key = getenv("CLEANTALK_TEST_API_KEY");
        $this->expected_result = array (
            'template_name' => 'abc2',
            'options_site' =>
                array (
                    'bfp__allowed_wrong_auths' => '20',
                    'bfp__delay__1_fails' => '0',
                    'bfp__delay__5_fails' => '0',
                    'bfp__block_period__5_fails' => '120',
                    'bfp__count_interval' => '300',
                    'login_page_rename__enabled' => '0',
                    'login_page_rename__name' => 'login',
                    'login_page_rename__redirect' => '',
                    'there_was_signature_treatment' => 0,
                    'fw__custom_message' => '<p>TEST MSG</p>'
                ),
        );
    }

    public function testValidateGoodAPIResponse()
    {
        $got = CleantalkSettingsTemplates::settingsTemplatesValidateApiResponse($this->template_id,$this->api_response);
        $this->assertEquals($this->expected_result,$got);
    }

    public function testValidateBadAPIResponseEmptyTemplate()
    {
        $this->expectException(InvalidArgumentException::class);
        $this->expectExceptionMessage('API error');
        CleantalkSettingsTemplates::settingsTemplatesValidateApiResponse($this->template_id,$this->api_response_empty);
    }

    public function testValidateBadAPIResponseNoSuchTemplateId()
    {
        $this->api_response_custom = $this->api_response;
        $this->api_response_custom[0]['template_id'] = 'asdsa';
        $this->expectException(InvalidArgumentException::class);
        $this->expectExceptionMessage('no such template_id');
        CleantalkSettingsTemplates::settingsTemplatesValidateApiResponse($this->template_id,$this->api_response_custom);
    }

    public function testValidateBadAPIResponseOptionsIsEmpty()
    {
        $this->api_response_custom = $this->api_response;
        $this->api_response_custom[0]['options_site'] = '';
        $this->expectException(InvalidArgumentException::class);
        $this->expectExceptionMessage('options_site is empty');
        CleantalkSettingsTemplates::settingsTemplatesValidateApiResponse($this->template_id,$this->api_response_custom);
    }

    public function testValidateBadAPIResponseOptionsIsNotAString()
    {
        $this->api_response_custom = $this->api_response;
        $this->api_response_custom[0]['options_site'] = array('somethings');
        $this->expectException(InvalidArgumentException::class);
        $this->expectExceptionMessage('not a string');
        CleantalkSettingsTemplates::settingsTemplatesValidateApiResponse($this->template_id,$this->api_response_custom);
    }

    public function testValidateBadAPIResponseOptionsIsNotJSON()
    {
        $this->api_response_custom = $this->api_response;
        $this->api_response_custom[0]['options_site'] = 's{{[}::sd{]}}';
        $this->expectException(InvalidArgumentException::class);
        $this->expectExceptionMessage('JSON decode error');
        CleantalkSettingsTemplates::settingsTemplatesValidateApiResponse($this->template_id,$this->api_response_custom);
    }

    public function testValidateBadAPIResponseHasAPIError()
    {
        $this->api_response_custom = $this->api_response;
        $this->api_response_custom = array("error"=>"some_error");
        $this->expectException(InvalidArgumentException::class);
        $this->expectExceptionMessage('some_error');
        CleantalkSettingsTemplates::settingsTemplatesValidateApiResponse($this->template_id,$this->api_response_custom);
    }

    public function testNoSuchTemplateId()
    {
        $this->expectExceptionMessage('no such template_id found');
        CleantalkSettingsTemplates::settingsTemplatesSetOptions('1122',
            CleantalkSettingsTemplates::settingsTemplatesValidateApiResponse('1122',$this->api_response),
            $this->api_key);
    }

    public function testGoodRequest()
    {
        $result = CleantalkSettingsTemplates::settingsTemplatesSetOptions('1511',
            CleantalkSettingsTemplates::settingsTemplatesValidateApiResponse('1511',$this->api_response),
            $this->api_key);
        $this->assertEquals($result,'{"OK":"Settings updated"}');
    }

    public function testBadRequest()
    {
        $this->expectExceptionMessage('wrong services_templates_get response');
        CleantalkSettingsTemplates::settingsTemplatesSetOptions('1511',
            CleantalkSettingsTemplates::settingsTemplatesValidateApiResponse('1511',$this->api_response_empty),
            $this->api_key);
    }
}
