<?php

use CleantalkSP\SpbctWP\DB;
use CleantalkSP\SpbctWP\Firewall\BFP;
use CleantalkSP\SpbctWP\Firewall\FirewallState;
use Mock\FirewallStateMock;
use CleantalkSP\Updater\Updater;

class TestBFP extends PHPUnit\Framework\TestCase
{
    protected $bfp;
    protected $db;

    protected function setUp()
    {
        global $spbc;
        Updater::runUpdateScripts('2.105', '2.106');
        $this->db = DB::getInstance();
        //test string
        $this->bfp =
            new BFP(
                array(
                    'api_key'       => $spbc->api_key,
                    'state'         => $spbc,
                    'is_login_page' => true,
                    'is_logged_in'  => false,
                    'bf_limit'      => $spbc->settings['bfp__allowed_wrong_auths'],
                    'block_period'  => $spbc->settings['bfp__block_period__5_fails'],
                    'count_period'  => $spbc->settings['bfp__count_interval'], // Counting login attempts in this interval
                )
        );
    }

    public function testIpv4Block()
    {
        class_alias(FirewallStateMock::class, FirewallState::class);

        $ip = '127.0.0.1';
        $this->db->execute('
            TRUNCATE TABLE 
        ' . SPBC_TBL_BFP_BLOCKED);
        $this->db->execute('
            TRUNCATE TABLE 
        ' . SPBC_TBL_TC_LOG);
        $this->bfp->setDb($this->db);

        for ($i = 0; $i<=5; $i++) {
            $this->bfp->setIpArray(array($ip));
            BFP::$is_checked = false;
            $this->bfp->updateLogs();
        }

        $bfp_result = $this->bfp->check();
        $this->assertEquals($bfp_result[0]->ip, $ip);
        $this->assertEquals($bfp_result[0]->status, 'DENY_BY_BFP');
    }

    public function testIpv6Block()
    {
        $ip = 'fddc:0002:aa98:00dd:0000:0000:0000:ffee';
        $this->db->execute('
            TRUNCATE TABLE 
        ' . SPBC_TBL_BFP_BLOCKED);
        $this->db->execute('
            TRUNCATE TABLE 
        ' . SPBC_TBL_TC_LOG);
        $this->bfp->setDb($this->db);

        for ($i = 0; $i<=5; $i++){
            $this->bfp->setIpArray(array($ip));
            BFP::$is_checked = false;
            $this->bfp->updateLogs();
        }

        $bfp_result = $this->bfp->check();
        $this->assertEquals($bfp_result[0]->ip, $ip);
        $this->assertEquals($bfp_result[0]->status, 'DENY_BY_BFP');
    }
}
