<?php

use CleantalkSP\SpbctWP\Helpers\IP;
use CleantalkSP\SpbctWP\HTTP\CDNHeadersChecker;

class TestCDNChecker extends PHPUnit\Framework\TestCase
{

    public function testCommonCheck()
    {
        $result = CDNHeadersChecker::check();
        $this->assertEquals($result['found_headers'], array());
        $this->assertEquals($result['setting_changed_to'], '2');
        $this->assertEquals($result['error'], null, is_string($result['error']) ? $result['error'] : 'OK');
    }

    public function testIPKnownCDNHeaders()
    {
        $result = IP::getKnownCDNHeadersNames();
        $this->assertTrue(is_array($result));
        $this->assertTrue(!empty($result));
        $this->assertEquals(count($result), count(IP::$known_headers_collection));
    }

    public function testFindCDNHeaders()
    {
        $known_headers = IP::getKnownCDNHeadersNames();

        //empty
        $provided_headers = array();
        $result = CDNHeadersChecker::findKnownCDNHeaderSlugs($provided_headers, $known_headers);
        $this->assertTrue(is_array($result));
        $this->assertTrue(empty($result));

        //x-forwarded-for
        $provided_headers = array('X-Forwarded-For');
        $result = CDNHeadersChecker::findKnownCDNHeaderSlugs($provided_headers, $known_headers);
        $this->assertTrue(is_array($result));
        $this->assertTrue(!empty($result));

        $last_check_headers = CDNHeadersChecker::getLastCheckCDNHeaders();
        $this->assertTrue(is_array($last_check_headers));
        $this->assertTrue(empty($last_check_headers));

        CDNHeadersChecker::updateStoredCDNHeadersData($result);

        $last_check_headers = CDNHeadersChecker::getLastCheckCDNHeaders();
        $this->assertTrue(is_array($last_check_headers));
        $this->assertTrue(!empty($last_check_headers));
        $this->assertEquals($last_check_headers[0], 'x_forwarded_for');
    }

    public function testApplyIPGetHeadersSettings()
    {
        global $spbc;
        $known_headers = IP::getKnownCDNHeadersNames();

        //x-forwarded-for
        $provided_headers = array('X-Forwarded-For');
        $result = CDNHeadersChecker::findKnownCDNHeaderSlugs($provided_headers, $known_headers);
        CDNHeadersChecker::updateStoredCDNHeadersData($result);
        $last_check_headers = CDNHeadersChecker::getLastCheckCDNHeaders();
        $spbc->settings['secfw__get_ip'] = '8';
        $new_header_id = CDNHeadersChecker::getNewHeaderIdForSettings($spbc->settings['secfw__get_ip'], $last_check_headers);
        $this->assertEquals($new_header_id, '3');
        CDNHeadersChecker::applyIPGetHeadersSettings($spbc, $new_header_id);
        $this->assertEquals($spbc->settings['secfw__get_ip'], '3');
    }
}
