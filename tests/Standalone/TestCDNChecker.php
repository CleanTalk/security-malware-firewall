<?php

use CleantalkSP\SpbctWP\Helpers\IP;
use CleantalkSP\SpbctWP\HTTP\CDNHeadersChecker;

class TestCDNChecker extends PHPUnit\Framework\TestCase
{

    public function testCommonCheck()
    {
        $result = CDNHeadersChecker::check();
        $this->assertEquals($result['found_headers'], array());
        $this->assertEquals($result['setting_changed_to'], '2');
        $this->assertEquals($result['error'], null, is_string($result['error']) ? $result['error'] : 'OK');
    }

    public function testIPKnownCDNHeaders()
    {
        $result = IP::getKnownCDNHeadersNames();
        $this->assertTrue(is_array($result));
        $this->assertTrue(!empty($result));
        $this->assertEquals(count($result), count(IP::$known_headers_collection));
    }

    public function testFindCDNHeaders()
    {
        $known_headers = IP::getKnownCDNHeadersNames();

        //empty
        $provided_headers = array();
        $result = CDNHeadersChecker::findKnownCDNHeaderSlugs($provided_headers, $known_headers);
        $this->assertTrue(is_array($result));
        $this->assertTrue(empty($result));

        //x-forwarded-for
        $provided_headers = array('X-Forwarded-For');
        $result = CDNHeadersChecker::findKnownCDNHeaderSlugs($provided_headers, $known_headers);
        $this->assertTrue(is_array($result));
        $this->assertTrue(!empty($result));
        $this->assertTrue(in_array('x_forwarded_for', $result));

        CDNHeadersChecker::updateStoredCDNHeadersData($result);
        $loaded = CDNHeadersChecker::loadStoredCDNHeadersData();

        $this->assertTrue(is_array($loaded));
        $this->assertTrue(!empty($loaded));
        $this->assertTrue(in_array('x_forwarded_for', $loaded[count($loaded) - 1]['found_cdn_headers']), var_export($loaded, 1));

        //cloudflare
        $provided_headers = array('X-Forwarded-For','Cf-Connecting-Ip','X-Real-Ip','somethingelse');
        $result = CDNHeadersChecker::findKnownCDNHeaderSlugs($provided_headers, $known_headers);
        $this->assertTrue(is_array($result));
        $this->assertTrue(!empty($result));
        $this->assertTrue(in_array('cloud_flare', $result));

        CDNHeadersChecker::updateStoredCDNHeadersData($result);
        $loaded = CDNHeadersChecker::loadStoredCDNHeadersData();

        $this->assertTrue(is_array($loaded));
        $this->assertTrue(!empty($loaded));
        $this->assertTrue(in_array('cloud_flare', $loaded[count($loaded) - 1]['found_cdn_headers']), var_export($loaded, 1));
    }

    public function testGetWorkHeaderSlug()
    {
        $loaded = CDNHeadersChecker::loadStoredCDNHeadersData();
        $this->assertTrue(is_array($loaded));
        $this->assertTrue(!empty($loaded));
        $this->assertTrue(in_array('cloud_flare', $loaded[count($loaded) - 1]['found_cdn_headers']), var_export($loaded, 1));

        $found_headers = $loaded[count($loaded) - 1]['found_cdn_headers'];

        $work_header = CDNHeadersChecker::getWorkHeaderSlug($found_headers);
        $this->assertTrue(!empty($work_header));
        $this->assertTrue(is_string($work_header));
        $this->assertEquals('cloud_flare', $work_header);
    }

    public function testApplyIPGetHeadersSettings()
    {
        global $spbc;
        $known_headers = IP::getKnownCDNHeadersNames();

        //x-forwarded-for
        $provided_headers = array('X-Forwarded-For');
        $found_headers = CDNHeadersChecker::findKnownCDNHeaderSlugs($provided_headers, $known_headers);
        $spbc->settings['secfw__get_ip'] = '8';
        $new_header_id = CDNHeadersChecker::getNewHeaderIdForSettings($spbc->settings['secfw__get_ip'], $found_headers);
        $this->assertEquals($new_header_id, '3');
        CDNHeadersChecker::applyIPGetHeadersSettings($spbc, $new_header_id);
        $this->assertEquals($spbc->settings['secfw__get_ip'], '3');

        //cloudflare
        $provided_headers = array('X-Forwarded-For', 'Cf-Connecting-Ip');
        $found_headers = CDNHeadersChecker::findKnownCDNHeaderSlugs($provided_headers, $known_headers);
        $spbc->settings['secfw__get_ip'] = '3';
        $new_header_id = CDNHeadersChecker::getNewHeaderIdForSettings($spbc->settings['secfw__get_ip'], $found_headers);
        $this->assertEquals($new_header_id, '12');
        CDNHeadersChecker::applyIPGetHeadersSettings($spbc, $new_header_id);
        $this->assertEquals($spbc->settings['secfw__get_ip'], '12');
    }
}
