<?php

use CleantalkSP\SpbctWP\DB;
use CleantalkSP\SpbctWP\Firewall\TC;

class TestTC extends PHPUnit\Framework\TestCase
{
    protected $tc;

    protected function setUp()
    {
        global $spbc;
        $this->tc =
            new TC(
                array(
                    'data_table'   => SPBC_TBL_FIREWALL_DATA,
                    'log_table'    => SPBC_TBL_TC_LOG,
                    'state'        => $spbc,
                    'api_key'      => $spbc->api_key,
                    'is_logged_in' => false,
                    'user_is_admin' => false,
                    'store_interval' => $spbc->settings['traffic_control__autoblock_timeframe'],
                    'tc_limit'     => 35,
                    'block_period' => $spbc->settings['traffic_control__autoblock_period'],
                )
        );
    }

    public function testIpv4Block()
    {
        $ip = '127.0.0.1';
        $this->db = DB::getInstance();
        $this->db->execute('
            TRUNCATE TABLE 
        ' . SPBC_TBL_TC_LOG);
        $this->tc->setDb($this->db);

        for ($i = 1; $i<=35; $i++){
            $this->tc->setIpArray(array($ip));
            $this->tc->updateLog();
        }

        $this->tc->setIpArray(array($ip));
        $tc_result = $this->tc->check();
        $this->assertEquals($tc_result[0]->ip, $ip);
        $this->assertEquals($tc_result[0]->status, 'DENY_BY_DOS');
    }

    public function testIpv6Block()
    {
        $ip = 'fddc:0002:aa98:00dd:0000:0000:0000:ffee';
        $this->db = DB::getInstance();
        $this->db->execute('
            TRUNCATE TABLE 
        ' . SPBC_TBL_TC_LOG);
        $this->tc->setDb($this->db);

        for ($i = 1; $i<=35; $i++){
            $this->tc->setIpArray(array($ip));
            $this->tc->updateLog();
        }

        $this->tc->setIpArray(array($ip));
        $tc_result = $this->tc->check();
        $this->assertEquals($tc_result[0]->ip, $ip);
        $this->assertEquals($tc_result[0]->status, 'DENY_BY_DOS');
    }

    public function testIpv6pass()
    {
        $ip = 'fddc:0002:aa98:00dd:0000:0000:0000:ffee';
        $this->db = DB::getInstance();
        $this->db->execute('
            TRUNCATE TABLE 
        ' . SPBC_TBL_TC_LOG);
        $this->tc->setDb($this->db);

        for ($i = 1; $i<=34; $i++){
            $this->tc->setIpArray(array($ip));
            $this->tc->updateLog();
        }

        $this->tc->setIpArray(array($ip));
        $tc_result = $this->tc->check();
        $this->assertEquals($tc_result, array());
    }

    public function testMultiIpMixedPass()
    {
        $ip = 'fddc:0002:aa98:00dd:0000:0000:0000:ffee';
        $this->db = DB::getInstance();
        $this->db->execute('
            TRUNCATE TABLE 
        ' . SPBC_TBL_TC_LOG);
        $this->tc->setDb($this->db);

        for ($i = 1; $i<=150; $i++){
            $this->tc->setIpArray(array(rand(1,255) . '.' . rand(1,255) . '.' . rand(1,255) . '.' . rand(1,255)));
            $this->tc->updateLog();
        }

        $this->tc->setIpArray(array($ip));
        $tc_result = $this->tc->check();
        $this->assertEquals($tc_result, array());
    }

    public function testMultiIpMixedBlock()
    {
        $ip = '127.0.0.2';
        $this->db = DB::getInstance();
        $this->db->execute('
            TRUNCATE TABLE 
        ' . SPBC_TBL_TC_LOG);
        $this->tc->setDb($this->db);

        for ($i = 1; $i<=50; $i++){
            $this->tc->setIpArray(array(rand(1,255) . '.' . rand(1,255) . '.' . rand(1,255) . '.' . rand(1,255)));
            $this->tc->updateLog();
        }

        for ($i = 1; $i<=35; $i++){
            $this->tc->setIpArray(array($ip));
            $this->tc->updateLog();
        }

        $this->tc->setIpArray(array($ip));
        $tc_result = $this->tc->check();
        $this->assertEquals($tc_result[0]->ip, $ip);
        $this->assertEquals($tc_result[0]->status, 'DENY_BY_DOS');
    }

}
