<?php

use CleantalkSP\Common\Scanner\SignaturesAnalyser\Controller;
use CleantalkSP\Common\Scanner\SignaturesAnalyser\Structures\FileInfo;
use PHPUnit\Framework\TestCase;

class SignaturesScan extends TestCase
{
    public $large_file_for_signatures;
    public $current_dir;

    public function setUp()
    {
        $this->current_dir = __DIR__ . DIRECTORY_SEPARATOR;
        $this->large_file_name = 'large.php';
        $this->large_file_for_signatures = $this->current_dir . $this->large_file_name;
    }
    public function testEmpty()
    {
        unset ($content);

        $signature_scanner = new Controller();
        $content = '';
        $signatures = array();
        $file_to_check = new FileInfo(null, $content);
        $result = $signature_scanner->scanFile($file_to_check, $this->current_dir, $signatures);

        $this->assertInstanceOf('CleantalkSP\Common\Scanner\SignaturesAnalyser\Structures\Verdict', $result);
        $this->assertEquals( 'ERROR', $result->status);
        $this->assertEquals('FILE_SIZE_ZERO', $result->error_msg);
        unset ($content);
    }

    public function testLarge()
    {
        unset ($content);
        $signature_scanner = new Controller();
        $content = str_repeat('-', 1024*8*1024*4);
        file_put_contents($this->large_file_for_signatures, $content);
        $signatures = array();
        $file_to_check = new FileInfo('large.php', null, null);
        $result = $signature_scanner->scanFile($file_to_check, $this->current_dir, $signatures);

        $this->assertInstanceOf('CleantalkSP\Common\Scanner\SignaturesAnalyser\Structures\Verdict', $result);
        $this->assertEquals( 'ERROR', $result->status);
        $this->assertEquals( 'FILE_SIZE_TOO_LARGE', $result->error_msg);
        unset ($content);
    }

    public function tearDown()
    {
        parent::tearDown(); // TODO: Change the autogenerated stub
        @unlink($this->large_file_for_signatures);
    }
}
