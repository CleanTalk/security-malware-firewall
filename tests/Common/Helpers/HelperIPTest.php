<?php

namespace CleantalkSP\Common\Helpers;

use PHPUnit\Framework\TestCase;

/**
 * The class contains methods for working with ip
 */
class HelperIPTest extends TestCase
{
    public function setUp()
    {
        $_SERVER['REMOTE_ADDR'] = '127.0.0.1';
    }
    
    public function test_get()
    {
        $this->assertEquals('127.0.0.1', IP::get());
    }
    
    public function test_validate()
    {
        # any false data
        $anyFalseData = false;
        $this->assertFalse(IP::validate($anyFalseData));
        
        # ip v4
        $ipV4 = '127.0.0.1';
        $ipV4Zero = '0.0.0.0';
        $expected = 'v4';
        $this->assertEquals($expected, IP::validate($ipV4));
        $this->assertFalse(IP::validate($ipV4Zero));
        
        # ip v6
        $ipV6 = '0:0:0:0:0:0:7f00:1';
        $expected = 'v6';
        $ipV6Reduce = '0:0:0:0:0:0:0:0';
        $this->assertEquals($expected, IP::validate($ipV6));
        $this->assertFalse(IP::validate($ipV6Reduce));
    }
    
    public function test_v6_normalize()
    {
        # ip v4
        $ipV4 = '127.0.0.1';
        $expected = '0:0:0:0:0:0:7f00:1';
        $this->assertEquals($expected, IP::normalizeIPv6($ipV4));
    
        # ip v6
        $ipV6 = '0:0:0:0:0:0:7f00:1';
        $expected = '0:0:0:0:0:0:7f00:1';
        $this->assertEquals($expected, IP::normalizeIPv6($ipV6));
    
        # any data other than ip
        $anyData = 'asdqwerty';
        $this->assertFalse(IP::normalizeIPv6($anyData));
    }

    public function test_v6_reduce()
    {
        # ip v4
        $ipV4 = '127.0.0.1';
        $expected = '127.0.0.1';
        $this->assertEquals($expected, IP::reduceIPv6($ipV4));
    
        # ip v6
        $ipV6 = '0:0:0:0:0:0:0:0';
        $expected = '::';
        $this->assertEquals($expected, IP::reduceIPv6($ipV6));
    
        # ip v6
        $ipV6 = '2001:4860:4860:0000:0000:0000:0000:8888';
        $expected = '2001:4860:4860::8888';
        $this->assertEquals($expected, IP::reduceIPv6($ipV6));
    }
}